{
	"basePath": "/santaba/rest",
	"definitions": {
		"WebsiteCollectorInfo": {
			"type": "object",
			"properties": {
				"hostname": {
					"readOnly": true,
					"type": "string"
				},
				"collectorGroupName": {
					"readOnly": true,
					"type": "string"
				},
				"collectorGroupId": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"description": {
					"readOnly": true,
					"type": "string"
				},
				"id": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"status": {
					"readOnly": true,
					"type": "string"
				}
			}
		},
		"AwsElastiCacheDiscoveryMethod": {
			"allOf": [
				{ "$ref": "#/definitions/AutoDiscoveryMethod" },
				{
					"type": "object",
					"properties": {}
				}
			],
			"x-discriminator-value": "ad_awselasticache"
		},
		"AutoDiscoveryFilter": {
			"type": "object",
			"required": [ "attribute", "operation" ],
			"properties": {
				"comment": { "type": "string" },
				"attribute": { "type": "string" },
				"operation": { "type": "string" },
				"value": { "type": "string" }
			}
		},
		"Widget": {
			"type": "object",
			"required": [ "dashboardId", "name", "type" ],
			"properties": {
				"lastUpdatedBy": {
					"description": "The user that last updated the widget",
					"readOnly": true,
					"type": "string"
				},
				"userPermission": {
					"description": "The permission level of the user who last modified the widget",
					"readOnly": true,
					"type": "string",
					"example": "write"
				},
				"dashboardId": {
					"format": "int32",
					"description": "The id of the dashboard the widget belongs to",
					"type": "integer",
					"example": 1.0
				},
				"name": {
					"description": "The name of the widget",
					"type": "string",
					"example": "Test"
				},
				"description": {
					"description": "The description of the widget",
					"type": "string",
					"example": "Devices By Type"
				},
				"lastUpdatedOn": {
					"format": "int64",
					"description": "The time that corresponds to when the widget was last updated, in epoch format",
					"readOnly": true,
					"type": "integer"
				},
				"theme": {
					"description": "The color scheme of the widget. Options are: borderPurple | borderGray | borderBlue | solidPurple | solidGray | solidBlue | simplePurple | simpleBlue | simpleGray | newBorderGray | newBorderBlue | newBorderDarkBlue | newSolidGray | newSolidBlue | newSolidDarkBlue | newSimpleGray | newSimpleBlue |newSimpleDarkBlue",
					"type": "string",
					"example": "newBorderBlue"
				},
				"interval": {
					"format": "int32",
					"description": "The refresh interval of the widget, in minutes",
					"type": "integer",
					"example": 5.0
				},
				"id": {
					"format": "int32",
					"description": "The Id of the widget",
					"type": "integer"
				},
				"type": {
					"description": "alert | batchjob | flash | gmap | ngraph | ograph | cgraph | sgraph | netflowgraph | groupNetflowGraph | netflow | groupNetflow | html | bigNumber | gauge | pieChart | table | dynamicTable | deviceSLA | text | statsd | deviceStatus | serviceAlert | noc | websiteOverview | websiteOverallStatus | websiteIndividualStatus | websiteSLA",
					"type": "string",
					"example": "bigNumber"
				},
				"timescale": {
					"description": "The default timescale of the widget",
					"type": "string"
				}
			},
			"discriminator": "type"
		},
		"DeviceDatasourceGraph": {
			"type": "object",
			"properties": {
				"displayPrio": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"name": {
					"readOnly": true,
					"type": "string"
				},
				"id": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"title": {
					"readOnly": true,
					"type": "string"
				}
			}
		},
		"EscalationChainPaginationResponse": {
			"type": "object",
			"properties": {
				"total": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"searchId": {
					"readOnly": true,
					"type": "string"
				},
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/EscalatingChain" }
				}
			}
		},
		"SnmpTrapEventSource": {
			"allOf": [
				{ "$ref": "#/definitions/EventSource" },
				{
					"type": "object",
					"properties": {}
				}
			],
			"x-discriminator-value": "snmptrap"
		},
		"DynamicTableWidget": {
			"allOf": [
				{ "$ref": "#/definitions/Widget" },
				{
					"type": "object",
					"required": [ "columns", "dataSourceId", "rows" ],
					"properties": {
						"dataSourceId": {
							"format": "int32",
							"description": "The id of the selected datasource",
							"type": "integer"
						},
						"topX": {
							"format": "int32",
							"type": "integer"
						},
						"dataSourceFullName": {
							"description": "The full name of the selected datasource",
							"readOnly": true,
							"type": "string"
						},
						"columns": {
							"type": "array",
							"items": { "$ref": "#/definitions/DynamicTableWidgetColumn" }
						},
						"sortOrder": { "type": "string" },
						"forecast": { "$ref": "#/definitions/TableWidgetForecastConfiguration" },
						"rows": {
							"type": "array",
							"items": { "$ref": "#/definitions/DynamicTableWidgetRow" }
						}
					}
				}
			],
			"x-discriminator-value": "dynamictable"
		},
		"WidgetPaginationResponse": {
			"type": "object",
			"properties": {
				"total": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"searchId": {
					"readOnly": true,
					"type": "string"
				},
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/Widget" }
				}
			}
		},
		"DataSourceUpdateReasonsPaginationResponse": {
			"type": "object",
			"properties": {
				"total": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"searchId": {
					"readOnly": true,
					"type": "string"
				},
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/UpdateReason" }
				}
			}
		},
		"WMIAutoDiscoveryMethod": {
			"allOf": [
				{ "$ref": "#/definitions/AutoDiscoveryMethod" },
				{
					"type": "object",
					"required": [ "namespace", "property", "wmiClass" ],
					"properties": {
						"linkedClasses": {
							"type": "array",
							"items": { "$ref": "#/definitions/LinkedWmiClass" }
						},
						"externalResourceID": { "type": "string" },
						"externalResourceType": { "type": "string" },
						"wmiClass": { "type": "string" },
						"property": { "type": "string" },
						"namespace": { "type": "string" },
						"ILP": {
							"type": "array",
							"items": { "$ref": "#/definitions/ILP" }
						},
						"enableLinkedClassILP": { "type": "boolean" },
						"enableWmiClassILP": { "type": "boolean" }
					}
				}
			],
			"x-discriminator-value": "ad_wmi"
		},
		"WebPageCollectorAttribute": {
			"allOf": [
				{ "$ref": "#/definitions/CollectorAttribute" },
				{
					"type": "object",
					"properties": {
						"request": { "type": "string" },
						"port": { "type": "string" },
						"followRedirect": { "type": "boolean" },
						"ip": { "type": "string" },
						"readTimeout": {
							"format": "int32",
							"type": "integer"
						},
						"connectTimeout": {
							"format": "int32",
							"type": "integer"
						},
						"useSSL": { "type": "boolean" }
					}
				}
			],
			"x-discriminator-value": "webpage"
		},
		"CustomGraph": {
			"type": "object",
			"required": [ "dataPoints" ],
			"properties": {
				"virtualDataPoints": {
					"description": "The virtual datapoints added to the widget (note that a virtual datapoint must be referenced in a graph line to be displayed)",
					"type": "array",
					"items": { "$ref": "#/definitions/CustomVirtualDataPoint" }
				},
				"minValue": {
					"description": "The minimum value that should be displayed on the y-axis",
					"type": "object"
				},
				"topX": {
					"format": "int32",
					"description": "The number of lines to display for each configured datapoint",
					"type": "integer"
				},
				"maxValue": {
					"description": "The maximum value that should be displayed on the y-axis",
					"type": "object"
				},
				"dataPoints": {
					"description": "The datapoints added to the widget (note that a datapoint must be referenced in a graph line to be displayed)",
					"type": "array",
					"items": { "$ref": "#/definitions/CustomFlexibleVirtualDataSourceEx" }
				},
				"verticalLabel": {
					"description": "The label that will be display along the y axis",
					"type": "string"
				},
				"id": {
					"format": "int32",
					"description": "The unique id of the custom graph displayed by this widget (not to be confused with the widget id)",
					"type": "integer"
				},
				"aggregate": {
					"description": "true: You can set this field to true to aggregate results into one line.\nfalse: Results will not be aggregated\nthe default value is true",
					"type": "boolean"
				},
				"desc": {
					"description": "Whether the top X are displayed (false) or the bottom X are displayed (true), the default value is true",
					"type": "boolean"
				},
				"scaleUnit": {
					"format": "int32",
					"description": "The base scale unit (1000 or 1024)",
					"type": "integer"
				},
				"globalConsolidateFunction": {
					"description": "The function for global consolidate",
					"type": "string"
				}
			}
		},
		"AccessLogPaginationResponse": {
			"type": "object",
			"properties": {
				"total": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"searchId": {
					"readOnly": true,
					"type": "string"
				},
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/AuditLog" }
				}
			}
		},
		"CollectorBase": {
			"type": "object",
			"properties": {
				"userChangeOn": {
					"format": "int64",
					"description": "The last time the Collector was updated, in epoch format",
					"readOnly": true,
					"type": "integer"
				},
				"confVersion": {
					"description": "The version of the agent.conf configuration file",
					"readOnly": true,
					"type": "string"
				},
				"updatedOnLocal": {
					"description": "The time that the Collector was last updated, in local time format",
					"readOnly": true,
					"type": "string"
				},
				"hostname": {
					"description": "The hostname of the device the Collector is installed on",
					"readOnly": true,
					"type": "string"
				},
				"numberOfInstances": {
					"format": "int32",
					"type": "integer"
				},
				"id": {
					"format": "int32",
					"description": "The id of the Collector",
					"readOnly": true,
					"type": "integer"
				},
				"ea": {
					"description": "Whether the collector is in EA version",
					"readOnly": true,
					"type": "boolean"
				},
				"watchdogUpdatedOnLocal": {
					"description": "The time that the Collector Watchdog was last updated, in local time format",
					"readOnly": true,
					"type": "string"
				},
				"hasFailOverDevice": {
					"description": "Whether the collector has failover devices",
					"readOnly": true,
					"type": "boolean"
				},
				"collectorGroupName": {
					"description": "The name of the group the Collector is in",
					"readOnly": true,
					"type": "string"
				},
				"netscanVersion": {
					"description": "The Netscan version associated with the Collector",
					"readOnly": true,
					"type": "string"
				},
				"inSDT": {
					"description": "The SDT status of the collector",
					"readOnly": true,
					"type": "boolean"
				},
				"updatedOn": {
					"format": "int64",
					"description": "The time that the Collector was last updated, in epoch format",
					"readOnly": true,
					"type": "integer"
				},
				"automaticUpgradeInfo": {
					"description": "The details of the Collector\u0027s automatic upgrade schedule, if one exists",
					"$ref": "#/definitions/AutomaticUpgradeInfo"
				},
				"numberOfHosts": {
					"format": "int32",
					"description": "The number of devices monitored by the Collector",
					"readOnly": true,
					"type": "integer"
				},
				"collectorConf": {
					"description": "The Collector\u0027s configuration file",
					"readOnly": true,
					"type": "string"
				},
				"sbproxyConf": {
					"description": "The Proxy\u0027s configuration",
					"readOnly": true,
					"type": "string"
				},
				"lastSentNotificationOnLocal": {
					"description": "The time that a notification was last sent for this Collector, in local time format",
					"readOnly": true,
					"type": "string"
				},
				"customProperties": {
					"description": "The custom properties defined for the Collector",
					"type": "array",
					"items": { "$ref": "#/definitions/NameAndValue" }
				},
				"predefinedConfig": {
					"description": "Collector configurations",
					"readOnly": true,
					"type": "object"
				},
				"onetimeUpgradeInfo": {
					"description": "The details of the Collector\u0027s one time upgrade, if one has been scheduled",
					"$ref": "#/definitions/OnetimeUpgradeInfo"
				},
				"wrapperConf": {
					"description": "The java service wrapper\u0027s configuration",
					"readOnly": true,
					"type": "string"
				},
				"clearSent": {
					"description": "Whether or not an alert clear notifcation has been sent for this Collector",
					"readOnly": true,
					"type": "boolean"
				},
				"status": {
					"format": "int32",
					"description": "The registration status of the Collector. Acceptable values are: 0\u003d unregistered, 1\u003d registered, 2\u003d stopped, 3\u003d suspended",
					"readOnly": true,
					"type": "integer"
				},
				"backupAgentId": {
					"format": "int32",
					"description": "The Id of the backup Collector assigned to the Collector",
					"type": "integer",
					"example": 75.0
				},
				"specifiedCollectorDeviceGroupId": {
					"format": "int32",
					"description": "The ResourceGroup id when create a new collector device",
					"type": "integer",
					"example": 0.0
				},
				"escalatingChainId": {
					"format": "int32",
					"description": "The Id of the escalation chain associated with this Collector",
					"type": "integer",
					"example": 80.0
				},
				"collectorSize": {
					"description": "The size of the collector",
					"readOnly": true,
					"type": "string"
				},
				"ackedOnLocal": {
					"description": "The time that the Collector was acknowledged (if it is in alert), in local time format",
					"readOnly": true,
					"type": "string"
				},
				"watchdogConf": {
					"description": "The Watchdog\u0027s configuration",
					"readOnly": true,
					"type": "string"
				},
				"description": {
					"description": "The Collector\u0027s description",
					"type": "string",
					"example": "Linux Collector"
				},
				"createdOn": {
					"format": "int64",
					"description": "The time that the Collector was created, in epoch format",
					"readOnly": true,
					"type": "integer"
				},
				"platform": {
					"description": "The OS of the Collector device (e.g. Linux, Windows)",
					"readOnly": true,
					"type": "string"
				},
				"isDown": {
					"description": "Whether or not the Collector is currently down",
					"readOnly": true,
					"type": "boolean"
				},
				"userVisibleHostsNum": {
					"format": "int32",
					"description": "The number of devices monitored by the Collector and visible to the user that made the query",
					"readOnly": true,
					"type": "integer"
				},
				"canDowngrade": {
					"description": "Whether the collector can be downgraded to a lower version",
					"readOnly": true,
					"type": "boolean"
				},
				"ackComment": {
					"description": "The comment associated with the Collector acknowledgement (if it is in alert and acknowledged)",
					"readOnly": true,
					"type": "string"
				},
				"nextUpgradeInfo": {
					"description": "The details of the Collector\u0027s next upgrade, if one has been scheduled",
					"readOnly": true,
					"$ref": "#/definitions/NextUpgradeInfo"
				},
				"suppressAlertClear": {
					"description": "Whether alert clear notifications are suppressed for the Collector",
					"type": "boolean",
					"example": true
				},
				"nextRecipient": {
					"format": "int32",
					"description": "The Id of the next recipient to which alert notifications will be sent",
					"readOnly": true,
					"type": "integer"
				},
				"ackedOn": {
					"format": "int64",
					"description": "The epoch at which the Collector was acknowledged (if it is in alert)",
					"readOnly": true,
					"type": "integer"
				},
				"userChangeOnLocal": {
					"description": "The last time the Collector was updated, in the account time zone",
					"readOnly": true,
					"type": "string"
				},
				"collectorDeviceId": {
					"format": "int32",
					"description": "The device id of the collector device",
					"readOnly": true,
					"type": "integer"
				},
				"ackedBy": {
					"description": "The user that acknowledged the Collector (if it is in alert)",
					"readOnly": true,
					"type": "string"
				},
				"userPermission": {
					"description": "The permission level of the user that made the API request to get Collector information",
					"readOnly": true,
					"type": "string"
				},
				"needAutoCreateCollectorDevice": {
					"description": "Whether to create a collector device when instance collector, the default value is true",
					"type": "boolean",
					"example": "true"
				},
				"watchdogUpdatedOn": {
					"format": "int64",
					"description": "The time that the Watchdog Services was last updated, in epoch format",
					"readOnly": true,
					"type": "integer"
				},
				"canDowngradeReason": {
					"description": "The reason why the collector can be downgraded",
					"readOnly": true,
					"type": "string"
				},
				"lastSentNotificationOn": {
					"format": "int64",
					"description": "The time, in epoch format, that a notification was last sent for the Collector",
					"readOnly": true,
					"type": "integer"
				},
				"acked": {
					"description": "Whether or not the Collector is currently acknowledged",
					"readOnly": true,
					"type": "boolean"
				},
				"onetimeDowngradeInfo": {
					"description": "The details of the Collector\u0027s automatic downgrade schedule, if one exists",
					"$ref": "#/definitions/OnetimeUpgradeInfo"
				},
				"upTime": {
					"format": "int64",
					"description": "The time the Collector has been up, in seconds",
					"readOnly": true,
					"type": "integer"
				},
				"build": {
					"description": "The Collector version",
					"readOnly": true,
					"type": "string"
				},
				"previousVersion": {
					"description": "The previous version of the collector, used for downgrading",
					"readOnly": true,
					"type": "string"
				},
				"collectorGroupId": {
					"format": "int32",
					"description": "The Id of the group the Collector is in",
					"type": "integer",
					"example": 10.0
				},
				"createdOnLocal": {
					"description": "The time that the Collector was created, in local time format",
					"readOnly": true,
					"type": "string"
				},
				"enableFailBack": {
					"description": "Whether or not automatic failback is enabled for the Collector, the default value is true",
					"type": "boolean",
					"example": "true"
				},
				"resendIval": {
					"format": "int32",
					"description": "The interval, in minutes, after which alert notifications for the Collector will be resent",
					"type": "integer",
					"example": 15.0
				},
				"arch": {
					"description": "The collector architecture (Windows | Linux platform followed by 32 | 64 bit)",
					"readOnly": true,
					"type": "string"
				},
				"enableFailOverOnCollectorDevice": {
					"description": "Whether or not the device the Collector is installed on is enabled for fail over",
					"type": "boolean",
					"example": true
				}
			}
		},
		"DataSourceAttribute": {
			"type": "object",
			"required": [ "name", "value" ],
			"properties": {
				"name": { "type": "string" },
				"comment": { "type": "string" },
				"value": { "type": "string" }
			}
		},
		"StatsDMetricDefinition": {
			"type": "object",
			"properties": {
				"consolidateFunction": {
					"format": "int32",
					"type": "integer"
				},
				"display": { "$ref": "#/definitions/StatsDGraphDisplay" },
				"name": { "type": "string" },
				"aggregateFunction": { "type": "string" }
			}
		},
		"SDT": {
			"type": "object",
			"required": [ "type" ],
			"properties": {
				"endDateTimeOnLocal": {
					"description": "The date, time and time zone that the SDT will end at",
					"readOnly": true,
					"type": "string"
				},
				"timezone": {
					"description": "The specific timezone for SDT",
					"type": "string",
					"example": "America/Los_Angeles"
				},
				"sdtType": {
					"type": "string",
					"example": "oneTime"
				},
				"monthDay": {
					"format": "int32",
					"description": "1 | 2....| 31 The day of the month that the SDT will be active for a monthly SDT",
					"type": "integer",
					"example": 7.0
				},
				"weekOfMonth": {
					"description": "The weel of the month that the SDT will be active for a monthly SDT",
					"type": "string",
					"example": "1"
				},
				"admin": {
					"description": "The name of the user that created the SDT",
					"readOnly": true,
					"type": "string"
				},
				"endDateTime": {
					"format": "int64",
					"description": "The epoch time, in milliseconds, that the SDT will end",
					"type": "integer",
					"example": 1.534554E12
				},
				"type": {
					"description": "The type resource that this SDT is for: ServiceSDT | CollectorSDT | DeviceDataSourceInstanceSDT | DeviceBatchJobSDT | DeviceClusterAlertDefSDT | DeviceDataSourceInstanceGroupSDT | DeviceDataSourceSDT | DeviceEventSourceSDT | DeviceGroupSDT | DeviceSDT | WebsiteCheckpointSDT | WebsiteGroupSDT | WebsiteSDT",
					"type": "string",
					"example": "DeviceGroupSDT"
				},
				"isEffective": {
					"description": "true: the SDT is currently actice\nfalse: the SDT is currently inactive",
					"readOnly": true,
					"type": "boolean"
				},
				"minute": {
					"format": "int32",
					"description": "1 | 2....| 60 The minute of the hour that the SDT should begin for a repeating SDT",
					"type": "integer",
					"example": 6.0
				},
				"duration": {
					"format": "int32",
					"description": "The duration of the SDT in minutes",
					"type": "integer",
					"example": 138.0
				},
				"endHour": {
					"format": "int32",
					"description": "1 | 2....| 24 The hour that the SDT ends for a repeating SDT",
					"type": "integer",
					"example": 5.0
				},
				"startDateTime": {
					"format": "int64",
					"description": "The epoch time, in milliseconds, that the SDT will start",
					"type": "integer",
					"example": 1.5344604E12
				},
				"hour": {
					"format": "int32",
					"description": "1 | 2....| 24 The hour that the SDT will start for a repeating SDT (daily, weekly, or monthly)",
					"type": "integer",
					"example": 3.0
				},
				"startDateTimeOnLocal": {
					"description": "The date, time and time zone that the SDT will end at",
					"readOnly": true,
					"type": "string"
				},
				"weekDay": {
					"type": "string",
					"example": "Sunday"
				},
				"comment": {
					"description": "The notes associated with the SDT",
					"type": "string",
					"example": "Emergency prod deployment"
				},
				"id": {
					"description": "The Id of the SDT. This value will be in the following format \"XX_##\" where XX will refer to the type of SDT and ## will refer to the number of SDTs of that type",
					"readOnly": true,
					"type": "string"
				},
				"endMinute": {
					"format": "int32",
					"description": "1 | 2....| 60 The minute of the hour that the SDT ends for a repeating SDT",
					"type": "integer",
					"example": 18.0
				}
			},
			"discriminator": "type"
		},
		"WebsiteGroupSDTHistoryPaginationResponse": {
			"type": "object",
			"properties": {
				"total": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"searchId": {
					"readOnly": true,
					"type": "string"
				},
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/SDTHistory" }
				}
			}
		},
		"DeviceInstanceDataPaginationResponse": {
			"type": "object",
			"properties": {
				"total": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"searchId": {
					"readOnly": true,
					"type": "string"
				},
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/DeviceInstanceData" }
				}
			}
		},
		"NMapNetscanPolicyCredential": {
			"type": "object",
			"properties": {
				"deviceGroupId": {
					"format": "int32",
					"description": "The ID of the ResourceGroup that credentials should be inherited from, for this scan",
					"type": "integer",
					"example": 1.0
				},
				"custom": {
					"description": "Custom credentials that should be used for this scan",
					"type": "array",
					"items": {
						"additionalProperties": { "type": "string" },
						"type": "object"
					},
					"example": "[{\"snmp.community\":\"test\"}]"
				},
				"deviceGroupName": {
					"description": "The name of the ResourceGroup that credentials should be inherited from, for this scan",
					"type": "string",
					"example": "Network Devices"
				}
			}
		},
		"AwsBillingReportDiscoveryMethod": {
			"allOf": [
				{ "$ref": "#/definitions/AutoDiscoveryMethod" },
				{
					"type": "object",
					"required": [ "awsBillingReportAttribute" ],
					"properties": { "awsBillingReportAttribute": { "type": "string" } }
				}
			],
			"x-discriminator-value": "ad_awsbillingreport"
		},
		"GaugeWidgetData": {
			"allOf": [
				{ "$ref": "#/definitions/WidgetData" },
				{
					"type": "object",
					"properties": {
						"maxValue": {
							"format": "double",
							"readOnly": true,
							"type": "number"
						},
						"legend": {
							"readOnly": true,
							"type": "string"
						},
						"peakTime": {
							"format": "int64",
							"readOnly": true,
							"type": "integer"
						},
						"historyTimestamps": {
							"readOnly": true,
							"type": "array",
							"items": {
								"format": "int64",
								"type": "integer"
							}
						},
						"displayUnit": { "type": "string" },
						"peakTimeOnLocal": {
							"readOnly": true,
							"type": "string"
						},
						"colorLevel": {
							"format": "int32",
							"readOnly": true,
							"type": "integer"
						},
						"peakValue": {
							"format": "double",
							"readOnly": true,
							"type": "number"
						},
						"minValue": {
							"format": "double",
							"readOnly": true,
							"type": "number"
						},
						"displayType": {
							"format": "int32",
							"type": "integer"
						},
						"showPeak": {
							"readOnly": true,
							"type": "boolean"
						},
						"currentValue": {
							"format": "double",
							"readOnly": true,
							"type": "number"
						},
						"historyValues": {
							"readOnly": true,
							"type": "object"
						}
					}
				}
			],
			"x-discriminator-value": "gauge"
		},
		"AggregateCollectorAttribute": {
			"allOf": [
				{ "$ref": "#/definitions/CollectorAttribute" },
				{
					"type": "object",
					"properties": {}
				}
			]
		},
		"WebsiteIndividualsStatusWidget": {
			"allOf": [
				{ "$ref": "#/definitions/Widget" },
				{
					"type": "object",
					"required": [ "locations" ],
					"properties": {
						"isInternal": {
							"description": "Whether it is an internal website check",
							"readOnly": true,
							"type": "boolean"
						},
						"websiteName": {
							"description": "The name of the website that status is displayed for",
							"type": "string"
						},
						"websiteId": {
							"format": "int32",
							"description": "The id of the website that status is displayed for",
							"type": "integer"
						},
						"websiteGroupId": {
							"format": "int32",
							"description": "The id of the group associated with the website that status is displayed for",
							"type": "integer"
						},
						"locations": {
							"description": "The checkpoint locations for which data is displayed",
							"type": "array",
							"items": { "$ref": "#/definitions/LocationData" }
						},
						"websiteGroupName": {
							"description": "The group associated with the website that status is displayed for",
							"readOnly": true,
							"type": "string"
						},
						"graph": {
							"description": "The website graph name - this should always be checkpointStatus",
							"type": "string"
						}
					}
				}
			],
			"x-discriminator-value": "websiteindividualstatus"
		},
		"SNMPAutoDiscoveryMethod": {
			"allOf": [
				{ "$ref": "#/definitions/AutoDiscoveryMethod" },
				{
					"type": "object",
					"required": [ "OID", "discoveryType", "lookupOID" ],
					"properties": {
						"lookupOID": { "type": "string" },
						"externalResourceID": { "type": "string" },
						"descriptionOID": { "type": "string" },
						"externalResourceType": { "type": "string" },
						"OID": { "type": "string" },
						"ILP": {
							"type": "array",
							"items": { "$ref": "#/definitions/SNMPILP" }
						},
						"discoveryType": { "type": "string" },
						"enableSNMPILP": { "type": "boolean" }
					}
				}
			],
			"x-discriminator-value": "ad_snmp"
		},
		"SysLogEventSource": {
			"allOf": [
				{ "$ref": "#/definitions/EventSource" },
				{
					"type": "object",
					"properties": {}
				}
			],
			"x-discriminator-value": "syslog"
		},
		"NOCWidgetData": {
			"allOf": [
				{ "$ref": "#/definitions/WidgetData" },
				{
					"type": "object",
					"properties": {
						"ackChecked": {
							"readOnly": true,
							"type": "boolean"
						},
						"sdtChecked": {
							"readOnly": true,
							"type": "boolean"
						},
						"items": {
							"uniqueItems": true,
							"readOnly": true,
							"type": "array",
							"items": { "$ref": "#/definitions/ItemData" }
						}
					}
				}
			],
			"x-discriminator-value": "noc"
		},
		"ResultItem": {
			"type": "object",
			"properties": {
				"bottomLabel": {
					"readOnly": true,
					"type": "string"
				},
				"value": {
					"readOnly": true,
					"type": "string"
				},
				"colorLevel": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				}
			}
		},
		"AlertSlaReport": {
			"allOf": [
				{ "$ref": "#/definitions/ReportBase" },
				{
					"type": "object",
					"properties": {
						"hostsValType": {
							"description": "host | group. The type of entities specified in the hostsVal field",
							"type": "string"
						},
						"dateRange": {
							"description": "The Time Range configured for the report: Last 2 hours | Last 24 hours | Last calendar day | Last 7 days | Last 14 days | Last 30 days | Last calendar month | Last 365 days | Any custom date range in this format: YYYY-MM-dd hh:mm TO YYYY-MM-dd hh:mm",
							"type": "string"
						},
						"hostsVal": {
							"description": "The devices OR groups (use full path) selected for the report, where multiple entities are separated by commas. Note that glob is supported",
							"type": "string"
						},
						"dataPoint": {
							"description": "The datapoints selected for the report, where multiple datapoints are separated by commas",
							"type": "string"
						},
						"alertLevel": {
							"description": "Warn | Error | Critical. The minimum severity of the alert statuses you’d like to evaluate for the specified devices and ResourceGroups",
							"type": "string"
						},
						"alertRule": {
							"description": "The name of the Alert Rule that the datapoint alert you’re evaluating will be routed to. Note that if you do not select the correct alert rule, no matching alerts will be displayed",
							"type": "string"
						},
						"dataSource": {
							"description": "The datasource instance selected for the report, in the format DatasourceName-InstanceName (If it is a single instance datasource you can just leave it at DatasourceName)",
							"type": "string"
						}
					}
				}
			],
			"x-discriminator-value": "alert sla"
		},
		"NetAppAutoDiscoveryMethod": {
			"allOf": [
				{ "$ref": "#/definitions/AutoDiscoveryMethod" },
				{
					"type": "object",
					"required": [ "type" ],
					"properties": {
						"request": { "type": "string" },
						"instanceName": { "type": "string" },
						"type": { "type": "string" },
						"instanceGroupName": { "type": "string" },
						"instanceValue": { "type": "string" },
						"instanceDescription": { "type": "string" },
						"object": { "type": "string" },
						"instanceLocator": { "type": "string" }
					}
				}
			],
			"x-discriminator-value": "ad_netapp"
		},
		"Website": {
			"type": "object",
			"required": [ "name", "testLocation", "type" ],
			"properties": {
				"template": {
					"description": "The website template",
					"type": "object"
				},
				"testLocation": {
					"description": "The locations from which the website is monitored. If the website is internal, this field should include Collectors. If Non-Internal, possible test locations are:\n1 : US - LA\n2 : US - DC\n3 : US - SF\n4 : Europe - Dublin\n5 : Asia - Singapore\n6 : Australia - Sydney\ntestLocation:\"{all:true}\" indicates that the service will be monitored from all checkpoint locations\ntestLocation:\"{smgIds:[1,2,3]}\" indicates that the service will be monitored from checkpoint locations 1, 2 and 3\ntestLocation:\"{collectorIds:[85,90]}\" indicates that the service will be monitored by Collectors 85 and 90",
					"$ref": "#/definitions/WebsiteLocation"
				},
				"groupId": {
					"format": "int32",
					"description": "The id of the group the website is in",
					"readOnly": true,
					"type": "integer",
					"example": 1.0
				},
				"overallAlertLevel": {
					"description": "warn | error | critical\nThe level of alert to trigger if the website fails the number of checks specified by transition from the test locations specified by globalSmAlertCond",
					"type": "string",
					"example": "warn"
				},
				"pollingInterval": {
					"format": "int32",
					"description": "1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10\nThe polling interval for the website, in units of minutes. This value indicates how often the website is checked. The minimum is 1 minute, and the maximum is 10 minutes",
					"type": "integer",
					"example": 5.0
				},
				"description": {
					"description": "The description of the website",
					"type": "string",
					"example": "Monitor Ebay site response times"
				},
				"disableAlerting": {
					"description": "true: alerting is disabled for the website\nfalse: alerting is enabled for the website\nIf stopMonitoring\u003dtrue, then alerting will also by default be disabled for the website",
					"type": "boolean"
				},
				"type": {
					"description": "The type of the website. Acceptable values are: pingcheck, webcheck",
					"type": "string",
					"example": "webcheck"
				},
				"lastUpdated": {
					"format": "int64",
					"description": "The time (in epoch format) that the website was updated",
					"readOnly": true,
					"type": "integer"
				},
				"stopMonitoringByFolder": {
					"description": "true: monitoring is disabled for all services in the website\u0027s folder\nfalse: monitoring is not disabled for all services in website\u0027s folder",
					"readOnly": true,
					"type": "boolean"
				},
				"id": {
					"format": "int32",
					"description": "The id of the website",
					"readOnly": true,
					"type": "integer"
				},
				"stopMonitoring": {
					"description": "true: monitoring is disabled for the website\nfalse: monitoring is enabled for the website\nIf stopMonitoring\u003dtrue, then alerting will also by default be disabled for the website",
					"type": "boolean"
				},
				"userPermission": {
					"description": "write | read | ack. The permission level of the user that made the API request",
					"type": "string"
				},
				"individualSmAlertEnable": {
					"description": "true: an alert will be triggered if a check fails from an individual test location\nfalse: an alert will not be triggered if a check fails from an individual test location",
					"type": "boolean",
					"example": false
				},
				"checkpoints": {
					"description": "The checkpoints from the which the website is monitored. This object should reference each location specified in testLocation in addition to an \u0027Overall\u0027 checkpoint",
					"type": "array",
					"items": { "$ref": "#/definitions/WebsiteCheckPoint" }
				},
				"steps": {
					"description": "Required for type\u003dwebcheck , An object comprising one or more steps, see the table below for the properties included in each step",
					"type": "array",
					"items": { "$ref": "#/definitions/WebCheckStep" }
				},
				"transition": {
					"format": "int32",
					"description": "1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 30 | 60\nThe number of checks that must fail before an alert is triggered",
					"type": "integer",
					"example": 1.0
				},
				"globalSmAlertCond": {
					"format": "int32",
					"description": "The number of test locations that checks must fail at to trigger an alert, where the alert triggered will be consistent with the value of overallAlertLevel. Possible values and corresponding number of Site Monitor locations are\n0 : all\n1 : half\n2 : more than one\n3 : any",
					"type": "integer",
					"example": 0.0
				},
				"isInternal": {
					"description": "Whether or not the website is internal",
					"type": "boolean",
					"example": false
				},
				"collectors": {
					"description": "The collectors that are monitoring the website, if the website is internal",
					"readOnly": true,
					"type": "array",
					"items": { "$ref": "#/definitions/WebsiteCollectorInfo" }
				},
				"domain": {
					"description": "Required for type\u003dwebcheck , The domain of the service. This is the base URL of the service",
					"type": "string",
					"example": "www.ebay.com"
				},
				"name": {
					"description": "The name of the website",
					"type": "string",
					"example": "Ebay"
				},
				"useDefaultLocationSetting": {
					"description": "true: The checkpoint locations configured in the website Default Settings will be used\nfalse: The checkpoint locations specified in the testLocation will be used",
					"type": "boolean",
					"example": false
				},
				"useDefaultAlertSetting": {
					"description": "true: The alert settings configured in the website Default Settings will be used\nfalse: Service Default Settings will not be used, and you will need to specify individualSMAlertEnable, individualAlertLevel, globalSmAlertConf, overallAlertLevel and pollingInterval",
					"type": "boolean",
					"example": true
				},
				"individualAlertLevel": {
					"description": "warn | error | critical\nThe level of alert to trigger if the website fails a check from an individual test location",
					"type": "string",
					"example": "warn"
				},
				"properties": {
					"description": "The properties associated with the website",
					"readOnly": true,
					"type": "array",
					"items": { "$ref": "#/definitions/NameAndValue" }
				},
				"status": {
					"description": "Whether is the website dead (the collector is down) or not",
					"readOnly": true,
					"type": "string"
				}
			},
			"discriminator": "type"
		},
		"MatchPattern": {
			"type": "object",
			"properties": {
				"pattern": {
					"description": "The regex or plain text to look for in the file and trigger alert if found",
					"type": "string"
				},
				"alertLevel": {
					"description": "The level of alert to trigger: warn | error | critical",
					"type": "string"
				}
			}
		},
		"AlertTrendsMetric": {
			"type": "object",
			"required": [ "itemType", "itemVal" ],
			"properties": {
				"itemType": { "type": "string" },
				"itemVal": { "type": "string" }
			}
		},
		"TCPCollectorAttribute": {
			"allOf": [
				{ "$ref": "#/definitions/CollectorAttribute" },
				{
					"type": "object",
					"properties": {
						"payload": { "type": "string" },
						"port": { "type": "string" },
						"encoding": { "type": "string" },
						"timeout": {
							"format": "int32",
							"type": "integer"
						}
					}
				}
			],
			"x-discriminator-value": "tcp"
		},
		"SDTPaginationResponse": {
			"type": "object",
			"properties": {
				"total": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"searchId": {
					"readOnly": true,
					"type": "string"
				},
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/SDT" }
				}
			}
		},
		"WidgetData": {
			"type": "object",
			"properties": {
				"type": {
					"readOnly": true,
					"type": "string"
				},
				"title": { "type": "string" }
			},
			"discriminator": "type"
		},
		"NetscanPaginationResponse": {
			"type": "object",
			"properties": {
				"total": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"searchId": {
					"readOnly": true,
					"type": "string"
				},
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/Netscan" }
				}
			}
		},
		"AwsBillingCollectorAttribute": {
			"allOf": [
				{ "$ref": "#/definitions/CollectorAttribute" },
				{
					"type": "object",
					"properties": {}
				}
			],
			"x-discriminator-value": "awsbilling"
		},
		"EndpointPaginationResponse": {
			"type": "object",
			"properties": {
				"total": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"searchId": {
					"readOnly": true,
					"type": "string"
				},
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/NetflowEndpoint" }
				}
			}
		},
		"AwsClassicElbServiceLimitsCollectorAttribute": {
			"allOf": [
				{ "$ref": "#/definitions/CollectorAttribute" },
				{
					"type": "object",
					"properties": {
						"period": {
							"format": "int32",
							"type": "integer"
						}
					}
				}
			],
			"x-discriminator-value": "awsclassicelbservicelimits"
		},
		"WebsiteGroup": {
			"type": "object",
			"required": [ "name" ],
			"properties": {
				"fullPath": {
					"description": "The full path of the group",
					"readOnly": true,
					"type": "string"
				},
				"stopMonitoring": {
					"description": "true: monitoring is disabled for the websites in the group\nfalse: monitoring is enabled for the websites in the group\nIf stopMonitoring\u003dtrue, then alerting will also by default be disabled for the websites in the group",
					"type": "boolean"
				},
				"userPermission": {
					"description": "The permission level of the user that made the API request. Acceptable values are: write, read, ack",
					"readOnly": true,
					"type": "string"
				},
				"testLocation": { "$ref": "#/definitions/WebsiteLocation" },
				"hasWebsitesDisabled": {
					"readOnly": true,
					"type": "boolean"
				},
				"description": {
					"description": "The description of the group",
					"type": "string",
					"example": "Amazon web and ping checks"
				},
				"disableAlerting": {
					"description": "true: alerting is disabled for the websites in the group\nfalse: alerting is enabled for the websites in the group\nIf stopMonitoring\u003dtrue, then alerting will also by default be disabled for the websites in the group",
					"type": "boolean",
					"example": false
				},
				"parentId": {
					"format": "int32",
					"description": "The Id of the parent group. If parentId\u003d1 then the group exists under the root  group",
					"type": "integer",
					"example": 1.0
				},
				"numOfDirectWebsites": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"name": {
					"description": "The name of the group",
					"type": "string",
					"example": "Amazon Website Checks"
				},
				"numOfDirectSubGroups": {
					"format": "int32",
					"description": "The number of direct website groups in this group (exlcuding those in subgroups)",
					"readOnly": true,
					"type": "integer"
				},
				"id": {
					"format": "int32",
					"description": "The Id of the group",
					"readOnly": true,
					"type": "integer"
				},
				"numOfWebsites": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"properties": {
					"type": "array",
					"items": { "$ref": "#/definitions/NameAndValue" }
				}
			}
		},
		"OverviewGraphWidget": {
			"allOf": [
				{ "$ref": "#/definitions/Widget" },
				{
					"type": "object",
					"required": [ "dsigId", "hId" ],
					"properties": {
						"hostName": {
							"readOnly": true,
							"type": "string"
						},
						"graphName": {
							"readOnly": true,
							"type": "string"
						},
						"hId": {
							"format": "int32",
							"type": "integer"
						},
						"dsigId": {
							"format": "int32",
							"type": "integer"
						},
						"dsName": {
							"readOnly": true,
							"type": "string"
						},
						"dsId": {
							"format": "int32",
							"type": "integer"
						},
						"dsigName": {
							"readOnly": true,
							"type": "string"
						},
						"graphId": {
							"format": "int32",
							"type": "integer"
						}
					}
				}
			],
			"x-discriminator-value": "ograph"
		},
		"CustomFlexibleVirtualDataSourceEx": {
			"type": "object",
			"required": [ "deviceDisplayName", "deviceGroupFullPath", "display", "instanceName", "name" ],
			"properties": {
				"customGraphId": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"instanceName": { "$ref": "#/definitions/GlobMatchToggle" },
				"display": { "$ref": "#/definitions/GraphDisplay" },
				"aggregateFunction": { "type": "string" },
				"deviceDisplayName": { "$ref": "#/definitions/GlobMatchToggle" },
				"dataPointName": { "type": "string" },
				"dataSourceId": {
					"format": "int32",
					"type": "integer"
				},
				"dataPointId": {
					"format": "int32",
					"type": "integer"
				},
				"dataSourceFullName": { "type": "string" },
				"consolidateFunction": { "type": "string" },
				"name": { "type": "string" },
				"id": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"deviceGroupFullPath": { "$ref": "#/definitions/GlobMatchToggle" }
			}
		},
		"Netscan": {
			"type": "object",
			"required": [ "collector", "duplicate", "method", "name" ],
			"properties": {
				"creator": {
					"description": "The user that created the policy",
					"type": "string",
					"example": "sarah@logicmonitor.com"
				},
				"collectorGroupName": {
					"description": "The name of the group of the Collector associated with this Netscan",
					"type": "string",
					"example": "Prod"
				},
				"method": {
					"description": "The method that should be used to discover devices. Options are nmap (ICMP Ping), nec2 (EC2), and script",
					"type": "string",
					"example": "nmap"
				},
				"collectorGroup": {
					"format": "int32",
					"description": "The ID of the group of the Collector associated with this Netscan",
					"type": "integer",
					"example": 4.0
				},
				"description": {
					"description": "The description of the Netscan Policy",
					"type": "string",
					"example": "Discovers devices within the office network for monitoring"
				},
				"nextStart": {
					"description": "The date and time of the next start time of the scan - displayed as manual if the scan does not run on a schedule",
					"type": "string",
					"example": "2018-09-07 15:12:00 PDT"
				},
				"duplicate": {
					"description": "Information that determines how duplicate discovered devices should be handled",
					"$ref": "#/definitions/ExcludeDuplicateIps"
				},
				"version": {
					"format": "int32",
					"description": "The Id of the device",
					"type": "integer",
					"example": 2.0
				},
				"collector": {
					"format": "int32",
					"description": "The ID of the Collector associated with this Netscan",
					"type": "integer",
					"example": 148.0
				},
				"ignoreSystemIPsDuplicates": {
					"description": "Ignore system.ips when checking for duplicate resources",
					"type": "boolean"
				},
				"schedule": {
					"description": "Information related to the recurring execution schedule for the Netscan Policy",
					"$ref": "#/definitions/RestSchedule"
				},
				"collectorDescription": {
					"description": "The description of the Collector associated with this Netscan",
					"type": "string",
					"example": "Prod CollectorA"
				},
				"name": {
					"description": "The name of the Netscan Policy",
					"type": "string",
					"example": "Office Network"
				},
				"nextStartEpoch": {
					"format": "int64",
					"description": "The epoch of the next start time of the scan - displayed as 0 if the scan does not run on a schedule",
					"type": "integer",
					"example": 1.53635832E9
				},
				"id": {
					"format": "int32",
					"description": "The ID of the Netscan Policy",
					"type": "integer",
					"example": 208.0
				},
				"nsgId": {
					"format": "int32",
					"description": "The ID of the group the policy belongs to",
					"type": "integer",
					"example": 47.0
				},
				"group": {
					"description": "The group the Netscan policy should belong to",
					"type": "string",
					"example": "RT_check"
				}
			},
			"discriminator": "method"
		},
		"ErrorResponse": {
			"type": "object",
			"properties": {
				"errorMessage": {
					"description": "The error message",
					"readOnly": true,
					"type": "string"
				},
				"errorCode": {
					"format": "int32",
					"description": "The error code",
					"readOnly": true,
					"type": "integer"
				},
				"errorDetail": {
					"description": "The error detail",
					"readOnly": true,
					"type": "object"
				}
			}
		},
		"PieChartWidget": {
			"allOf": [
				{ "$ref": "#/definitions/Widget" },
				{
					"type": "object",
					"required": [ "pieChartInfo" ],
					"properties": { "pieChartInfo": { "$ref": "#/definitions/PieChartInfo" } }
				}
			],
			"x-discriminator-value": "piechart"
		},
		"AzureBillingDiscoveryMethod": {
			"allOf": [
				{ "$ref": "#/definitions/AutoDiscoveryMethod" },
				{
					"type": "object",
					"required": [ "azureBillingType" ],
					"properties": { "azureBillingType": { "type": "string" } }
				}
			],
			"x-discriminator-value": "ad_azurebilling"
		},
		"NTLMAuthentication": {
			"allOf": [
				{ "$ref": "#/definitions/Authentication" },
				{
					"type": "object",
					"properties": { "domain": { "type": "string" } }
				}
			],
			"x-discriminator-value": "ntlm"
		},
		"PieChartDataPoint": {
			"type": "object",
			"required": [ "deviceDisplayName", "deviceGroupFullPath", "instanceName", "name" ],
			"properties": {
				"dataSourceId": {
					"format": "int32",
					"type": "integer"
				},
				"dataPointName": { "type": "string" },
				"top10": { "type": "boolean" },
				"dataPointId": {
					"format": "int32",
					"type": "integer"
				},
				"instanceName": { "type": "string" },
				"dataSourceFullName": { "type": "string" },
				"name": { "type": "string" },
				"aggregateFunction": { "type": "string" },
				"deviceGroupFullPath": { "type": "string" },
				"deviceDisplayName": { "type": "string" },
				"aggregate": { "type": "boolean" }
			}
		},
		"DeviceStatus": {
			"allOf": [
				{ "$ref": "#/definitions/Widget" },
				{
					"type": "object",
					"required": [ "deviceId" ],
					"properties": {
						"deviceId": {
							"format": "int32",
							"type": "integer"
						},
						"deviceDisplayName": {
							"readOnly": true,
							"type": "string"
						}
					}
				}
			],
			"x-discriminator-value": "devicestatus"
		},
		"WebsiteCheckpointSDT": {
			"allOf": [
				{ "$ref": "#/definitions/SDT" },
				{
					"type": "object",
					"properties": {
						"websiteName": { "type": "string" },
						"checkpointName": { "type": "string" },
						"checkpointId": {
							"format": "int32",
							"type": "integer"
						}
					}
				}
			],
			"x-discriminator-value": "websitecheckpointsdt"
		},
		"DeviceGroupDataSource": {
			"type": "object",
			"properties": {
				"stopMonitoring": {
					"description": "Boolean flag for enabling/disabling monitoring of DataSource",
					"type": "boolean"
				},
				"dataSourceId": {
					"format": "int32",
					"description": "The ID of the DataSource",
					"readOnly": true,
					"type": "integer"
				},
				"dataSourceGroupName": {
					"description": "The DataSource Group name",
					"readOnly": true,
					"type": "string"
				},
				"deviceGroupId": {
					"format": "int32",
					"description": "The ID of the ResourceGroup for the DataSource",
					"readOnly": true,
					"type": "integer"
				},
				"dataSourceDisplayName": {
					"description": "The Display Name of the DataSource",
					"readOnly": true,
					"type": "string"
				},
				"disableAlerting": {
					"description": "Boolean flag for enabling/disabling alerting for DataSource",
					"readOnly": true,
					"type": "boolean"
				},
				"dataSourceName": {
					"description": "The Name of the DataSource",
					"readOnly": true,
					"type": "string"
				},
				"dataSourceType": {
					"description": "The Type of the DataSource",
					"readOnly": true,
					"type": "string"
				}
			}
		},
		"StatsDWidget": {
			"allOf": [
				{ "$ref": "#/definitions/Widget" },
				{
					"type": "object",
					"properties": { "graphInfo": { "$ref": "#/definitions/StatsDGraph" } }
				}
			],
			"x-discriminator-value": "statsd"
		},
		"AutomaticUpgradeInfo": {
			"type": "object",
			"required": [ "dayOfWeek", "hour", "minute", "occurrence", "version" ],
			"properties": {
				"dayOfWeek": {
					"type": "string",
					"example": "MON"
				},
				"hour": {
					"format": "int32",
					"type": "integer",
					"example": 15.0
				},
				"createdBy": {
					"readOnly": true,
					"type": "string"
				},
				"level": {
					"readOnly": true,
					"type": "string"
				},
				"timezone": {
					"type": "string",
					"example": "Americas/Los Angeles"
				},
				"description": {
					"type": "string",
					"example": "regular MGD updates"
				},
				"occurrence": {
					"type": "string",
					"example": "Any"
				},
				"type": {
					"readOnly": true,
					"type": "string"
				},
				"version": {
					"type": "string",
					"example": "MGD"
				},
				"minute": {
					"format": "int32",
					"type": "integer",
					"example": 0.0
				}
			}
		},
		"GcpAppEngineDiscoveryMethod": {
			"allOf": [
				{ "$ref": "#/definitions/AutoDiscoveryMethod" },
				{
					"type": "object",
					"properties": {}
				}
			]
		},
		"OnetimeUpgradeInfo": {
			"type": "object",
			"required": [ "majorVersion", "minorVersion", "startEpoch" ],
			"properties": {
				"createdBy": {
					"readOnly": true,
					"type": "string"
				},
				"level": {
					"readOnly": true,
					"type": "string"
				},
				"timezone": { "type": "string" },
				"endEpoch": {
					"format": "int64",
					"readOnly": true,
					"type": "integer"
				},
				"description": {
					"type": "string",
					"example": "regular MGD updates"
				},
				"type": {
					"readOnly": true,
					"type": "string"
				},
				"majorVersion": {
					"format": "int32",
					"type": "integer",
					"example": 27.0
				},
				"minorVersion": {
					"format": "int32",
					"type": "integer",
					"example": 1.0
				},
				"startEpoch": {
					"format": "int64",
					"type": "integer",
					"example": 1.53488874E9
				}
			}
		},
		"NetflowQoSReportTableRow": {
			"allOf": [
				{ "$ref": "#/definitions/NetflowDataBase" },
				{
					"type": "object",
					"properties": {
						"received": {
							"format": "double",
							"readOnly": true,
							"type": "number"
						},
						"type": {
							"readOnly": true,
							"type": "string"
						},
						"sent": {
							"format": "double",
							"readOnly": true,
							"type": "number"
						}
					}
				}
			],
			"x-discriminator-value": "qosreporttablerow"
		},
		"DeviceClusterAlertConfigPaginationResponse": {
			"type": "object",
			"properties": {
				"total": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"searchId": {
					"readOnly": true,
					"type": "string"
				},
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/DeviceClusterAlertConfig" }
				}
			}
		},
		"NetflowWidget": {
			"allOf": [
				{ "$ref": "#/definitions/Widget" },
				{
					"type": "object",
					"required": [ "deviceDisplayName" ],
					"properties": {
						"filter": { "type": "string" },
						"dataType": { "type": "string" },
						"netflowFilter": { "$ref": "#/definitions/NetflowFilters" },
						"deviceId": {
							"format": "int32",
							"readOnly": true,
							"type": "integer"
						},
						"deviceDisplayName": { "type": "string" }
					}
				}
			],
			"x-discriminator-value": "netflow"
		},
		"NetFlowRecord": {
			"x-discriminator-value": "flowrecord",
			"type": "object",
			"properties": {
				"srcIP": {
					"readOnly": true,
					"type": "string"
				},
				"percentUsage": {
					"format": "double",
					"readOnly": true,
					"type": "number"
				},
				"lastEpochInSec": {
					"format": "int64",
					"readOnly": true,
					"type": "integer"
				},
				"ifOut": {
					"format": "int64",
					"readOnly": true,
					"type": "integer"
				},
				"dataType": {
					"readOnly": true,
					"type": "string"
				},
				"usage": {
					"format": "double",
					"readOnly": true,
					"type": "number"
				},
				"dstDNS": {
					"readOnly": true,
					"type": "string"
				},
				"srcPort": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"firstEpochInSec": {
					"format": "int64",
					"readOnly": true,
					"type": "integer"
				},
				"protocol": {
					"readOnly": true,
					"type": "string"
				},
				"dstPort": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"ifIn": {
					"format": "int64",
					"readOnly": true,
					"type": "integer"
				},
				"sourceMBytes": {
					"format": "double",
					"readOnly": true,
					"type": "number"
				},
				"srcDNS": {
					"readOnly": true,
					"type": "string"
				},
				"destinationMBytes": {
					"format": "double",
					"readOnly": true,
					"type": "number"
				},
				"dstIP": {
					"readOnly": true,
					"type": "string"
				}
			}
		},
		"TreeNode": {
			"type": "object",
			"properties": {
				"userPermission": { "type": "string" },
				"displayName": { "type": "string" },
				"id": {
					"format": "int32",
					"type": "integer"
				},
				"type": { "type": "string" }
			}
		},
		"DNSCollectorAttribute": {
			"allOf": [
				{ "$ref": "#/definitions/CollectorAttribute" },
				{
					"type": "object",
					"properties": {}
				}
			],
			"x-discriminator-value": "dns"
		},
		"WebsiteSDT": {
			"allOf": [
				{ "$ref": "#/definitions/SDT" },
				{
					"type": "object",
					"properties": {
						"websiteName": {
							"description": "The name of the website that the SDT applies to",
							"type": "string"
						},
						"websiteId": {
							"format": "int32",
							"description": "The Id of the website that the SDT applies to",
							"type": "integer"
						}
					}
				}
			],
			"x-discriminator-value": "websitesdt"
		},
		"DeviceDataSourceData": {
			"type": "object",
			"properties": {
				"instances": {
					"readOnly": true,
					"additionalProperties": { "$ref": "#/definitions/RawDataValues" },
					"type": "object"
				},
				"dataPoints": {
					"readOnly": true,
					"type": "array",
					"items": { "type": "string" }
				},
				"nextPageParams": {
					"readOnly": true,
					"type": "string"
				},
				"dataSourceName": {
					"readOnly": true,
					"type": "string"
				}
			}
		},
		"CustomVirtualDataPoint": {
			"type": "object",
			"properties": {
				"rpn": { "type": "string" },
				"customGraphId": {
					"format": "int32",
					"type": "integer"
				},
				"display": { "$ref": "#/definitions/GraphDisplay" },
				"name": { "type": "string" },
				"id": {
					"format": "int32",
					"type": "integer"
				}
			}
		},
		"PDHAutoDiscoveryMethod": {
			"allOf": [
				{ "$ref": "#/definitions/AutoDiscoveryMethod" },
				{
					"type": "object",
					"required": [ "category", "objRegex" ],
					"properties": {
						"objRegex": { "type": "string" },
						"category": { "type": "string" }
					}
				}
			],
			"x-discriminator-value": "ad_pdh"
		},
		"JDBCCollectorAttribute": {
			"allOf": [
				{ "$ref": "#/definitions/CollectorAttribute" },
				{
					"type": "object",
					"properties": {
						"password": { "type": "string" },
						"query": { "type": "string" },
						"url": { "type": "string" },
						"username": { "type": "string" }
					}
				}
			],
			"x-discriminator-value": "jdbc"
		},
		"DeviceDataSourceInstanceGroupSDT": {
			"allOf": [
				{ "$ref": "#/definitions/SDT" },
				{
					"type": "object",
					"properties": {
						"deviceDataSourceInstanceGroupId": {
							"format": "int32",
							"description": "The name of the device datasource instance group that the SDT will be associated with",
							"type": "integer"
						},
						"deviceDataSourceInstanceGroupName": {
							"description": "The name of the instance group",
							"type": "string"
						},
						"deviceDataSourceId": {
							"format": "int32",
							"description": "The id of the device datasource instance group that the SDT will be associated with",
							"type": "integer"
						},
						"deviceId": {
							"format": "int32",
							"description": "The id of the device that the SDT will be associated with",
							"type": "integer"
						},
						"deviceDisplayName": {
							"description": "The name of the device that the SDT will be associated with",
							"type": "string"
						},
						"dataSourceName": { "type": "string" }
					}
				}
			],
			"x-discriminator-value": "devicedatasourceinstancegroupsdt"
		},
		"UDPCollectorAttribute": {
			"allOf": [
				{ "$ref": "#/definitions/CollectorAttribute" },
				{
					"type": "object",
					"properties": {
						"payload": { "type": "string" },
						"port": { "type": "string" }
					}
				}
			],
			"x-discriminator-value": "udp"
		},
		"DynamicTableWidgetData": {
			"allOf": [
				{ "$ref": "#/definitions/WidgetData" },
				{
					"type": "object",
					"properties": {
						"columnHeaders": {
							"readOnly": true,
							"type": "array",
							"items": { "$ref": "#/definitions/ColumnHeader" }
						},
						"rows": {
							"readOnly": true,
							"type": "array",
							"items": { "$ref": "#/definitions/RowData" }
						}
					}
				}
			],
			"x-discriminator-value": "dynamictable"
		},
		"SDTHistory": {
			"type": "object",
			"properties": {
				"duration": {
					"format": "int64",
					"description": "The duration of the SDT, in minutes",
					"readOnly": true,
					"type": "integer",
					"example": 456.0
				},
				"itemId": {
					"format": "int32",
					"description": "The ID of the resource in SDT, e.g. the group or device in SDT",
					"readOnly": true,
					"type": "integer",
					"example": 1.0
				},
				"endEpoch": {
					"format": "int64",
					"description": "The end epoch for the SDT",
					"readOnly": true,
					"type": "integer",
					"example": 1.475902808E12
				},
				"admin": {
					"description": "The user that added the SDT",
					"readOnly": true,
					"type": "string",
					"example": "sarah@logicmonitor.com"
				},
				"comment": {
					"description": "The comment associated with the SDT",
					"readOnly": true,
					"type": "string",
					"example": "migrating devices to new network and new IP addresses"
				},
				"id": {
					"description": "The ID of the SDT",
					"readOnly": true,
					"type": "string",
					"example": "b-nTH4ECTH2rZ-Q548GOKg"
				},
				"type": {
					"description": "The SDT type",
					"readOnly": true,
					"type": "string",
					"example": "DeviceGroupSDT"
				},
				"startEpoch": {
					"format": "int64",
					"description": "The start epoch for the SDT",
					"readOnly": true,
					"type": "integer",
					"example": 1.475875446E12
				}
			}
		},
		"DeviceDataSourceInstanceConfig": {
			"type": "object",
			"properties": {
				"instanceName": { "type": "string" },
				"deviceDataSourceId": {
					"format": "int32",
					"type": "integer"
				},
				"configStatus": {
					"format": "int32",
					"type": "integer"
				},
				"version": {
					"format": "int64",
					"type": "integer"
				},
				"deviceId": {
					"format": "int32",
					"type": "integer"
				},
				"deltaConfig": {
					"type": "array",
					"items": { "$ref": "#/definitions/DeviceDataSourceInstanceConfigDiff" }
				},
				"deviceDisplayName": { "type": "string" },
				"dataSourceName": { "type": "string" },
				"alerts": {
					"type": "array",
					"items": { "$ref": "#/definitions/DeviceDataSourceInstanceConfigAlert" }
				},
				"dataSourceId": {
					"format": "int32",
					"type": "integer"
				},
				"instanceId": {
					"format": "int32",
					"type": "integer"
				},
				"configErrMsg": { "type": "string" },
				"changeStatus": { "type": "string" },
				"id": { "type": "string" },
				"pollTimestamp": {
					"format": "int64",
					"type": "integer"
				},
				"config": { "type": "string" }
			}
		},
		"ExcludeDuplicateIps": {
			"type": "object",
			"properties": {
				"collectors": {
					"description": "The collectors for which monitored devices should be used to identify and exclude duplicate IPs, if duplicate type is 4",
					"type": "array",
					"items": { "type": "string" },
					"example": "[\"ip-172-31-45-179.us-west-2.compute.internal\"]"
				},
				"groups": {
					"description": "The groups for which devices should be used to identify and exclude duplicate IPs, if duplicate type is 3",
					"type": "array",
					"items": { "type": "string" },
					"example": "[\"Network Devices\"]"
				},
				"type": {
					"format": "int32",
					"description": "What types of duplicate IPs should be excluded. Options are 1 (matching any monitored devices), 2 (matching devices already discovered by this scan), 3 (matching devices in these groups), and 4 (matching devices assigned to these collectors)",
					"type": "integer",
					"example": 1.0
				}
			}
		},
		"Role": {
			"type": "object",
			"required": [ "name", "privileges" ],
			"properties": {
				"enableRemoteSessionInCompanyLevel": {
					"description": "Whether Remote Session should be enabled at the account level",
					"readOnly": true,
					"type": "boolean"
				},
				"customHelpLabel": {
					"description": "The label for the custom help URL as it will appear in the Help \u0026 Support dropdown menu",
					"type": "string",
					"example": "Internal Support Resources"
				},
				"customHelpURL": {
					"description": "The URL that should be added to the Help \u0026 Support dropdown menu",
					"type": "string",
					"example": "https://logicmonitor.com/support"
				},
				"privileges": {
					"description": "The account privileges associated with the role. Privileges can be added to a role for each area of your account",
					"type": "array",
					"items": { "$ref": "#/definitions/Privilege" }
				},
				"associatedUserCount": {
					"format": "int32",
					"description": "The count of the users which are belongs to the role",
					"readOnly": true,
					"type": "integer"
				},
				"name": {
					"description": "The name of the role",
					"type": "string",
					"example": "administrator"
				},
				"description": {
					"description": "The description of the role",
					"type": "string",
					"example": "Administrator can do everything, including security-sensitive actions"
				},
				"id": {
					"format": "int32",
					"description": "The Id of the role",
					"readOnly": true,
					"type": "integer"
				},
				"twoFARequired": {
					"description": "Whether Two-Factor Authentication should be required for this role",
					"type": "boolean",
					"example": true
				},
				"requireEULA": {
					"description": "Whether or not users assigned this role should be required to acknowledge the EULA (end user license agreement)",
					"type": "boolean",
					"example": true
				},
				"acctRequireTwoFA": {
					"description": "Whether Two-Factor Authentication should be required for the entire account",
					"readOnly": true,
					"type": "boolean"
				}
			}
		},
		"ReportRecipient": {
			"type": "object",
			"required": [ "addr", "type" ],
			"properties": {
				"additionInfo": {
					"description": "If the type is admin and the method is email, the field should indicate the actual email address of the admin",
					"readOnly": true,
					"type": "string"
				},
				"method": {
					"description": "This should always be email",
					"type": "string",
					"example": "email"
				},
				"type": {
					"description": "Where admin refers to a user in the account and arbitrary refers to an email address not associated with a user account.Acceptable values are: admin, arbitrary",
					"type": "string",
					"example": "admin"
				},
				"addr": {
					"description": "This should be a username if type\u003dadmin, or an email address if type\u003darbitrary",
					"type": "string",
					"example": "sarah"
				}
			}
		},
		"AdminPaginationResponse": {
			"type": "object",
			"properties": {
				"total": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"searchId": {
					"readOnly": true,
					"type": "string"
				},
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/Admin" }
				}
			}
		},
		"CIMCollectorAttribute": {
			"allOf": [
				{ "$ref": "#/definitions/CollectorAttribute" },
				{
					"type": "object",
					"properties": {
						"ip": {
							"readOnly": true,
							"type": "string"
						},
						"namespace": { "type": "string" },
						"queryClass": { "type": "string" },
						"queryIndex": { "type": "string" },
						"queryValue": { "type": "string" },
						"fields": {
							"type": "array",
							"items": { "$ref": "#/definitions/DataSourceAttribute" }
						}
					}
				}
			],
			"x-discriminator-value": "cim"
		},
		"ScriptAutoDiscoveryMethod": {
			"allOf": [
				{ "$ref": "#/definitions/AutoDiscoveryMethod" },
				{
					"type": "object",
					"required": [ "type" ],
					"properties": {
						"winScript": { "type": "string" },
						"groovyScript": { "type": "string" },
						"type": { "type": "string" },
						"linuxCmdline": { "type": "string" },
						"linuxScript": { "type": "string" },
						"winCmdline": { "type": "string" }
					}
				}
			],
			"x-discriminator-value": "ad_script"
		},
		"NetscanPorts": {
			"type": "object",
			"properties": {
				"isGlobalDefault": {
					"description": "Whether or not default ports should be used",
					"type": "boolean",
					"example": true
				},
				"value": {
					"description": "The ports that should be used in the Netscan",
					"type": "string",
					"example": "21,22,23"
				}
			}
		},
		"DummyAutoDiscoveryMethod": {
			"allOf": [
				{ "$ref": "#/definitions/AutoDiscoveryMethod" },
				{
					"type": "object",
					"required": [ "generateCount", "getGenerateCount2", "maxNumber" ],
					"properties": {
						"generateCount": {
							"format": "int32",
							"type": "integer"
						},
						"getGenerateCount2": {
							"format": "int32",
							"type": "integer"
						},
						"maxNumber": {
							"format": "int32",
							"type": "integer"
						}
					}
				}
			],
			"x-discriminator-value": "ad_dummy"
		},
		"CollectorVersion": {
			"type": "object",
			"properties": {
				"stable": {
					"description": "False for early release. True for general release",
					"readOnly": true,
					"type": "boolean"
				},
				"releaseEpoch": {
					"format": "int64",
					"description": "Release Epoch for official releases",
					"readOnly": true,
					"type": "integer"
				},
				"has32bitWindows": {
					"description": "True if Windows collector available",
					"readOnly": true,
					"type": "boolean"
				},
				"has32bitLinux": {
					"description": "True if Linux collector available",
					"readOnly": true,
					"type": "boolean"
				},
				"majorVersion": {
					"format": "int32",
					"description": "The collector major version",
					"readOnly": true,
					"type": "integer"
				},
				"minorVersion": {
					"format": "int32",
					"description": "The collector minor version",
					"readOnly": true,
					"type": "integer"
				},
				"mandatory": {
					"description": "True if collector is a required release",
					"readOnly": true,
					"type": "boolean"
				}
			}
		},
		"AwsEC2ReservedInstanceDiscoveryMethod": {
			"allOf": [
				{ "$ref": "#/definitions/AutoDiscoveryMethod" },
				{
					"type": "object",
					"required": [ "instanceName" ],
					"properties": { "instanceName": { "type": "string" } }
				}
			],
			"x-discriminator-value": "ad_awsec2reservedinstance"
		},
		"WebsiteGroupPaginationResponse": {
			"type": "object",
			"properties": {
				"total": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"searchId": {
					"readOnly": true,
					"type": "string"
				},
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/WebsiteGroup" }
				}
			}
		},
		"WebsitePaginationResponse": {
			"type": "object",
			"properties": {
				"total": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"searchId": {
					"readOnly": true,
					"type": "string"
				},
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/Website" }
				}
			}
		},
		"JMXAutoDiscoveryMethod": {
			"allOf": [
				{ "$ref": "#/definitions/AutoDiscoveryMethod" },
				{
					"type": "object",
					"required": [ "path", "ports", "url" ],
					"properties": {
						"path": { "type": "string" },
						"ports": { "type": "string" },
						"url": { "type": "string" }
					}
				}
			],
			"x-discriminator-value": "ad_jmx"
		},
		"CustomGraphWidget": {
			"allOf": [
				{ "$ref": "#/definitions/Widget" },
				{
					"type": "object",
					"properties": { "graphInfo": { "$ref": "#/definitions/CustomGraph" } }
				}
			],
			"x-discriminator-value": "cgraph"
		},
		"NetflowFilters": {
			"type": "object",
			"properties": {
				"nodeB": { "type": "string" },
				"protocol": { "type": "string" },
				"ipVersion": { "type": "string" },
				"top": {
					"format": "int32",
					"type": "integer"
				},
				"ifIdx": {
					"format": "int32",
					"type": "integer"
				},
				"ifName": { "type": "string" },
				"qosType": { "type": "string" },
				"ports": { "type": "string" },
				"nodeA": { "type": "string" },
				"conversation": {
					"type": "array",
					"items": { "$ref": "#/definitions/ConversationFilter" }
				},
				"direction": { "type": "string" }
			}
		},
		"AwsS3CollectorAttribute": {
			"allOf": [
				{ "$ref": "#/definitions/CollectorAttribute" },
				{
					"type": "object",
					"properties": {}
				}
			],
			"x-discriminator-value": "awss3"
		},
		"AzureServiceRegionDiscoveryMethod": {
			"allOf": [
				{ "$ref": "#/definitions/AutoDiscoveryMethod" },
				{
					"type": "object",
					"properties": {}
				}
			],
			"x-discriminator-value": "ad_azureserviceregion"
		},
		"UnmonitoredDevices": {
			"type": "object",
			"properties": {
				"deviceType": {
					"readOnly": true,
					"type": "string"
				},
				"nspId": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"forwardIp": {
					"readOnly": true,
					"type": "string"
				},
				"endDate": {
					"readOnly": true,
					"type": "string"
				},
				"ip": {
					"readOnly": true,
					"type": "string"
				},
				"dns": {
					"readOnly": true,
					"type": "string"
				},
				"collectorId": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"ports": {
					"readOnly": true,
					"type": "string"
				},
				"nspName": {
					"readOnly": true,
					"type": "string"
				},
				"deviceStatus": {
					"readOnly": true,
					"type": "string"
				},
				"manufacturer": {
					"readOnly": true,
					"type": "string"
				},
				"collectorDescription": {
					"readOnly": true,
					"type": "string"
				},
				"displayAs": {
					"readOnly": true,
					"type": "string"
				},
				"sysName": {
					"readOnly": true,
					"type": "string"
				},
				"nseId": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"id": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"endTimestamp": {
					"format": "int64",
					"readOnly": true,
					"type": "integer"
				},
				"status": {
					"readOnly": true,
					"type": "string"
				},
				"nseScanId": {
					"readOnly": true,
					"type": "string"
				}
			}
		},
		"OpsNoteGroupAllScope": {
			"allOf": [
				{ "$ref": "#/definitions/OpsNoteScope" },
				{
					"type": "object",
					"properties": {
						"groupId": {
							"format": "int32",
							"type": "integer"
						}
					}
				}
			],
			"x-discriminator-value": "groupall"
		},
		"ScriptEventSource": {
			"allOf": [
				{ "$ref": "#/definitions/EventSource" },
				{
					"type": "object",
					"properties": {
						"schedule": {
							"format": "int32",
							"description": "The polling interval for the EventSource",
							"type": "integer"
						},
						"groovyScript": {
							"description": "The groovy script contents, if scriptType \u003d embed",
							"type": "string"
						},
						"scriptType": {
							"description": "The type of script: embed | file",
							"type": "string"
						},
						"windowsScript": {
							"description": "The windows script name, if scriptType \u003d file",
							"type": "string"
						},
						"linuxScript": {
							"description": "The linux script name, if scriptType \u003d file",
							"type": "string"
						},
						"linuxCmdline": {
							"description": "Linux script arguments, if applicable",
							"type": "string"
						},
						"windowsCmdline": {
							"description": "Windows script arguments, if applicable",
							"type": "string"
						}
					}
				}
			],
			"x-discriminator-value": "scriptevent"
		},
		"PropertyPaginationResponse": {
			"type": "object",
			"properties": {
				"total": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"searchId": {
					"readOnly": true,
					"type": "string"
				},
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/EntityProperty" }
				}
			}
		},
		"AuditLogReport": {
			"allOf": [
				{ "$ref": "#/definitions/ReportBase" },
				{
					"type": "object",
					"properties": {
						"filter": {
							"description": "The filter setting for the report",
							"type": "string"
						},
						"sortedBy": {
							"description": "The sort option for the repor",
							"type": "string"
						},
						"dateRange": {
							"description": "The Time Range configured for the report: Last 2 hours | Last 24 hours | Last calendar day | Last 7 days | Last 14 days | Last 30 days | Last calendar month | Last 365 days | Any custom date range in this format: YYYY-MM-dd hh:mm TO YYYY-MM-dd hh:mm",
							"type": "string"
						},
						"columns": {
							"description": "The columns displayed in the report",
							"type": "array",
							"items": { "$ref": "#/definitions/DynamicColumn" }
						},
						"username": {
							"description": "The user name of the user filter setting for the report",
							"type": "string"
						}
					}
				}
			],
			"x-discriminator-value": "audit log"
		},
		"Admin": {
			"type": "object",
			"required": [ "email", "password", "roles", "username" ],
			"properties": {
				"lastName": {
					"description": "The last name associated with the user",
					"type": "string",
					"example": "Doe"
				},
				"note": {
					"description": "Any notes assocaited with the user",
					"type": "string",
					"example": "John Doe is an Admin on this Portal"
				},
				"viewPermission": {
					"description": "The account tabs that will be visible to the user",
					"type": "object",
					"example": "{\n\n\"Hosts\" : true,\n\"Services\" : true,\n\"Reports\" : true,\n\"Dashboards\" : true,\n\"Alerts\" : true,\n\"Settings\" : true\n}"
				},
				"timezone": {
					"description": "The timezone of the user",
					"type": "string",
					"example": "America/Los Angeles"
				},
				"roles": {
					"uniqueItems": true,
					"description": "The roles assigned to the user",
					"type": "array",
					"items": { "$ref": "#/definitions/Role" }
				},
				"lastLoginOn": {
					"format": "int64",
					"description": "The time that the user last logged in, in epoch format",
					"readOnly": true,
					"type": "integer"
				},
				"lastActionOnLocal": {
					"description": "The time, in local format, of the user\u0027s last action",
					"readOnly": true,
					"type": "string"
				},
				"smsEmailFormat": {
					"description": "sms | fullText, where sms \u003d 160 characters and fullText\u003d all characters",
					"type": "string",
					"example": "sms"
				},
				"apionly": {
					"description": "Whether it is a API only user",
					"type": "boolean",
					"example": false
				},
				"apiTokens": {
					"description": "Any API Tokens associated with the user",
					"type": "array",
					"items": { "$ref": "#/definitions/APIToken" }
				},
				"password": {
					"description": "The password associated with the user",
					"type": "string",
					"example": "JohnDoe1"
				},
				"lastAction": {
					"description": "The last action taken by the user",
					"readOnly": true,
					"type": "string"
				},
				"trainingEmail": {
					"description": "The email address for user\u0027s Training account",
					"readOnly": true,
					"type": "string"
				},
				"lastActionOn": {
					"format": "int64",
					"description": "The time, in epoch format, of the user\u0027s last action",
					"readOnly": true,
					"type": "integer"
				},
				"id": {
					"format": "int32",
					"description": "The Id of the user",
					"readOnly": true,
					"type": "integer"
				},
				"email": {
					"description": "The email address associated with the user",
					"type": "string",
					"example": "john.doe@logicmonitor.com"
				},
				"contactMethod": {
					"description": "email | smsemail",
					"type": "string",
					"example": "email"
				},
				"acceptEULAOn": {
					"format": "int64",
					"description": "The time, in epoch format, that the user accepted the EULA (if required to)",
					"readOnly": true,
					"type": "integer"
				},
				"smsEmail": {
					"description": "The sms email address associated with the user",
					"type": "string",
					"example": "8054445555@logicmonitor.com"
				},
				"twoFAEnabled": {
					"description": "Whether or not two factor authentication is enabled for the user",
					"type": "boolean",
					"example": false
				},
				"firstName": {
					"description": "The first name associated with the user",
					"type": "string",
					"example": "John"
				},
				"phone": {
					"description": "The phone number associated with the user",
					"type": "string",
					"example": "8054445555"
				},
				"createdBy": {
					"description": "Who created the user. This may be another user, SAML or LogicMonitor",
					"type": "string",
					"example": "Chief Admin"
				},
				"forcePasswordChange": {
					"description": "Whether or not the user should be forced to change their password on the next login",
					"type": "boolean",
					"example": true
				},
				"acceptEULA": {
					"description": "Whether or not the user is required to accept the EULA (end user license agreement)",
					"type": "boolean",
					"example": true
				},
				"username": {
					"description": "The username associated with the user",
					"type": "string",
					"example": "John"
				},
				"status": {
					"description": "The user\u0027s status. Should be one of active and suspended",
					"type": "string",
					"example": "active"
				}
			}
		},
		"EventSourcePaginationResponse": {
			"type": "object",
			"properties": {
				"total": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"searchId": {
					"readOnly": true,
					"type": "string"
				},
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/EventSource" }
				}
			}
		},
		"GenerateReportResult": {
			"type": "object",
			"required": [ "reportId", "taskId" ],
			"properties": {
				"reportId": {
					"format": "int32",
					"description": "The id of the report",
					"type": "integer"
				},
				"taskId": {
					"format": "int64",
					"description": "The task id of the generating process",
					"type": "integer"
				},
				"resulturl": {
					"description": "The url of the generated report",
					"readOnly": true,
					"type": "string"
				}
			}
		},
		"BatchJobWidget": {
			"allOf": [
				{ "$ref": "#/definitions/Widget" },
				{
					"type": "object",
					"properties": {
						"groupDisplayName": {
							"description": "The display name of the ResourceGroup in LogicMonitor that the batchjob is running on",
							"type": "string"
						},
						"batchJobId": {
							"format": "int32",
							"description": "The id of the batchjob definition in LogicMonitor",
							"type": "integer"
						},
						"batchJobName": {
							"description": "The name of the batchjob definition in LogicMonitor",
							"type": "string"
						},
						"deviceDisplayName": {
							"description": "The display name of the device in LogicMonitor that the batchjob is running on",
							"type": "string"
						}
					}
				}
			],
			"x-discriminator-value": "batchjob"
		},
		"DashboardPaginationResponse": {
			"type": "object",
			"properties": {
				"total": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"searchId": {
					"readOnly": true,
					"type": "string"
				},
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/Dashboard" }
				}
			}
		},
		"Metric": {
			"type": "object",
			"required": [ "dataSourceId" ],
			"properties": {
				"dataSourceId": {
					"format": "int32",
					"type": "integer"
				},
				"dataPointName": { "type": "string" },
				"dataPointId": {
					"format": "int32",
					"type": "integer"
				},
				"instances": { "type": "string" },
				"dataSourceFullName": {
					"readOnly": true,
					"type": "string"
				}
			}
		},
		"TableWidgetColumn": {
			"type": "object",
			"required": [ "columnName", "dataPoint" ],
			"properties": {
				"alternateDataPoints": {
					"type": "array",
					"items": { "$ref": "#/definitions/TableWidgetDataPoint" }
				},
				"rpn": { "type": "string" },
				"dataPoint": { "$ref": "#/definitions/TableWidgetDataPoint" },
				"columnName": { "type": "string" },
				"enableForecast": { "type": "boolean" },
				"roundingDecimal": {
					"format": "int32",
					"type": "integer"
				}
			}
		},
		"AppliesToFunction": {
			"type": "object",
			"required": [ "code", "name" ],
			"properties": {
				"code": {
					"description": "The AppliesTo Function code. Note that special characters may need to be escaped.",
					"type": "string"
				},
				"name": {
					"description": "The name of the AppliesTo Function",
					"type": "string"
				},
				"description": {
					"description": "The description of the AppliesTo Function",
					"type": "string"
				},
				"id": {
					"format": "int32",
					"description": "The ID of the AppliesTo Function",
					"readOnly": true,
					"type": "integer"
				}
			}
		},
		"GraphOpsNoteScope": {
			"type": "object",
			"properties": {
				"serviceGroupIds": {
					"type": "array",
					"items": {
						"format": "int32",
						"type": "integer"
					}
				},
				"serviceId": {
					"format": "int32",
					"type": "integer"
				},
				"type": { "type": "string" },
				"deviceGroupIds": {
					"type": "array",
					"items": {
						"format": "int32",
						"type": "integer"
					}
				},
				"deviceId": {
					"format": "int32",
					"type": "integer"
				}
			}
		},
		"OpsNote": {
			"type": "object",
			"required": [ "note" ],
			"properties": {
				"note": {
					"description": "The note message",
					"type": "string",
					"example": "software update from 1.0.0 to 1.2.4"
				},
				"createdBy": {
					"description": "The user that created the Ops Note",
					"readOnly": true,
					"type": "string"
				},
				"scopes": {
					"description": "The scopes associated with the note. Each scope has a type of device, service, deviceGroup or serviceGroup. A note with no scope will show up for everything in the account",
					"type": "array",
					"items": { "$ref": "#/definitions/OpsNoteScope" }
				},
				"id": {
					"description": "The id associated with the Ops Note",
					"readOnly": true,
					"type": "string"
				},
				"happenOnInSec": {
					"format": "int64",
					"description": "The date and time associated with the note, in epoch seconds format",
					"type": "integer",
					"example": 1.48882644E9
				},
				"tags": {
					"description": "The tags that should be associated with the note. Each tag has a unique id and a name - you can either include the name of a new or existing tag, or the id of an existing tag",
					"type": "array",
					"items": { "$ref": "#/definitions/OpsNoteTagBase" }
				}
			}
		},
		"AlertPaginationResponse": {
			"type": "object",
			"properties": {
				"total": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"searchId": {
					"readOnly": true,
					"type": "string"
				},
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/Alert" }
				}
			}
		},
		"DeviceGroupSDTHistoryPaginationResponse": {
			"type": "object",
			"properties": {
				"total": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"searchId": {
					"readOnly": true,
					"type": "string"
				},
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/SDTHistory" }
				}
			}
		},
		"NOCItemBase": {
			"type": "object",
			"required": [ "type" ],
			"properties": { "type": { "type": "string" } },
			"discriminator": "type"
		},
		"AlertThresholdReport": {
			"allOf": [
				{ "$ref": "#/definitions/ReportBase" },
				{
					"type": "object",
					"properties": {
						"sortedBy": {
							"description": "host | datasource | datapoint\nhost: displayed thresholds will be sorted by device\ndatasource: displayed thresholds will be sorted by datasource instance\ndatapoint: displayed thresholds will be sorted by datapoint (metric)",
							"type": "string"
						},
						"dataSourceInstanceName": {
							"description": "The name of the datasource instance to be included in the report, where the syntax should be dataSourceDisplayName-InstanceName. If you\u0027re referencing a single instance datasource, you can just specify dataSourceDisplayName. Glob expressions supported",
							"type": "string"
						},
						"columns": {
							"description": "The columns that will be displayed in the report. You should specify the columns in the order in which you\u0027d like them to be displayed",
							"type": "array",
							"items": { "$ref": "#/definitions/DynamicColumn" }
						},
						"dataPoint": {
							"description": "The datapoint to be included in the report. Glob expressions supported",
							"type": "string"
						},
						"deviceDisplayName": {
							"description": "The display name of the device(s) to be included in the report. Glob expressions supported",
							"type": "string"
						},
						"excludeGlobal": {
							"description": "true: only variations from the global thresholds will be displayed\nfalse: all thresholds will be displayed, including global thresholds an custom group and instance level thresholds\nthe default value is true",
							"type": "boolean"
						},
						"groupFullPath": {
							"description": "The full path of the group whose member devices you are going to include in the report. Glob expressions supported",
							"type": "string"
						}
					}
				}
			],
			"x-discriminator-value": "alert threshold"
		},
		"AwsEcsServiceDetailsCollectorAttribute": {
			"allOf": [
				{ "$ref": "#/definitions/CollectorAttribute" },
				{
					"type": "object",
					"properties": {
						"period": {
							"format": "int32",
							"type": "integer"
						}
					}
				}
			],
			"x-discriminator-value": "awsecsservicedetails"
		},
		"DeviceInstances": {
			"type": "object",
			"required": [ "instanceIds" ],
			"properties": {
				"instanceIds": {
					"description": "the ids of the instances, separated by commas",
					"type": "string",
					"example": "1,2,3,4,5"
				}
			}
		},
		"Assignment": {
			"type": "object",
			"properties": {
				"groupName": {
					"description": "The name of the group that discovered devices should be added into",
					"type": "string",
					"example": "qapr"
				},
				"tagValue": { "type": "string" },
				"action": {
					"description": "Whether or not specified devices should be included or excluded",
					"type": "string",
					"example": "Include"
				},
				"disableAlerting": {
					"description": "Whether or not alerting should be disabled for discovered devices",
					"type": "boolean",
					"example": false
				},
				"tagKey": { "type": "string" },
				"group": {
					"format": "int32",
					"description": "The ID of the group that discovered devices should be added into",
					"type": "integer",
					"example": 1.0
				}
			}
		},
		"BatchScriptCollectorAttribute": {
			"allOf": [
				{ "$ref": "#/definitions/CollectorAttribute" },
				{
					"type": "object",
					"properties": {
						"groovyScript": { "type": "string" },
						"scriptType": { "type": "string" },
						"windowsScript": { "type": "string" },
						"linuxCmdline": { "type": "string" },
						"linuxScript": { "type": "string" },
						"windowsCmdline": { "type": "string" }
					}
				}
			],
			"x-discriminator-value": "batchscript"
		},
		"WebsiteLocation": {
			"type": "object",
			"properties": {
				"all": {
					"type": "boolean",
					"example": "true"
				},
				"collectorIds": {
					"type": "array",
					"items": {
						"format": "int32",
						"type": "integer"
					}
				},
				"collectors": {
					"type": "array",
					"items": { "$ref": "#/definitions/WebsiteCollectorInfo" }
				},
				"smgIds": {
					"type": "array",
					"items": {
						"format": "int32",
						"type": "integer"
					},
					"example": "[1, 2, 4, 3, 5, 6]"
				}
			}
		},
		"WebsiteSLAWidget": {
			"allOf": [
				{ "$ref": "#/definitions/Widget" },
				{
					"type": "object",
					"required": [ "items" ],
					"properties": {
						"daysInWeek": {
							"description": "The days that SLA should be computed for, separated by commas. 1\u003dSunday, 2\u003dMonday, 3\u003dTuesday, 4\u003dWednesday, 5\u003dThursday, 6\u003dFriday, 7\u003dSaturday",
							"type": "string"
						},
						"timezone": {
							"description": "The specific timezone for the widget",
							"type": "string"
						},
						"periodInOneDay": {
							"description": "The period during the selected days that the SLA should be computed for. * \u003d all day, or a time range can be specified in the format of \"hh:mm TO hh:mm\", e.g. \"01:15 TO 17:15\"",
							"type": "string"
						},
						"items": {
							"description": "The websites that should be used to compute the SLA",
							"type": "array",
							"items": { "$ref": "#/definitions/WebsiteItemConfig" }
						},
						"colorThresholds": {
							"description": "The threshold of color changes",
							"type": "array",
							"items": { "$ref": "#/definitions/ColorThreshold" }
						}
					}
				}
			],
			"x-discriminator-value": "websitesla"
		},
		"ScriptNetscan": {
			"allOf": [
				{ "$ref": "#/definitions/Netscan" },
				{
					"type": "object",
					"required": [ "scriptType" ],
					"properties": {
						"scriptPath": {
							"description": "The script path for an external script",
							"type": "string",
							"example": "C://scripts"
						},
						"defaultGroupFullPath": {
							"description": "The full path of the default group to add discovered devices to",
							"type": "string",
							"example": "lm/prod/servers"
						},
						"defaultGroup": {
							"format": "int32",
							"description": "The ID of the default group to add discovered devices to",
							"type": "integer",
							"example": 1.0
						},
						"groovyScript": {
							"description": "For embedded script scans, the groovy script contents",
							"type": "string",
							"example": "testing"
						},
						"linuxScriptParams": { "type": "string" },
						"scriptType": {
							"description": "For script scans, the type of script. Options are embeded and external",
							"type": "string",
							"example": "embeded"
						},
						"groovyScriptParams": {
							"description": "For embedded script scans, the groovy script parameters",
							"type": "string",
							"example": "prod\u003dtrue"
						},
						"windowsScript": { "type": "string" },
						"windowsScriptParams": { "type": "string" },
						"scriptParams": {
							"description": "The parameters for an external script",
							"type": "string",
							"example": "prod\u003dtrue"
						},
						"linuxScript": { "type": "string" }
					}
				}
			],
			"x-discriminator-value": "script"
		},
		"TableWidgetRow": {
			"type": "object",
			"required": [ "deviceId" ],
			"properties": {
				"instances": {
					"readOnly": true,
					"type": "array",
					"items": { "$ref": "#/definitions/TableWidgetInstanceCell" }
				},
				"groupId": {
					"format": "int32",
					"type": "integer"
				},
				"label": { "type": "string" },
				"deviceId": {
					"format": "int32",
					"type": "integer"
				},
				"deviceDisplayName": {
					"readOnly": true,
					"type": "string"
				},
				"groupFullPath": {
					"readOnly": true,
					"type": "string"
				}
			}
		},
		"DeviceDatasourceInstancePaginationResponse": {
			"type": "object",
			"properties": {
				"total": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"searchId": {
					"readOnly": true,
					"type": "string"
				},
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/DeviceDataSourceInstance" }
				}
			}
		},
		"DeviceSDT": {
			"allOf": [
				{ "$ref": "#/definitions/SDT" },
				{
					"type": "object",
					"properties": {
						"deviceId": {
							"format": "int32",
							"description": "The id of the device that the SDT will be associated with",
							"type": "integer"
						},
						"deviceDisplayName": {
							"description": "The name of the device that this SDT will be associated with",
							"type": "string"
						}
					}
				}
			],
			"x-discriminator-value": "devicesdt"
		},
		"AlertRulePaginationResponse": {
			"type": "object",
			"properties": {
				"total": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"searchId": {
					"readOnly": true,
					"type": "string"
				},
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/AlertRule" }
				}
			}
		},
		"CollectorGroup": {
			"type": "object",
			"required": [ "name" ],
			"properties": {
				"autoBalance": {
					"description": "if the collector is autoBalance set as true or false",
					"type": "string"
				},
				"customProperties": {
					"description": "The custom properties defined for the Collector group",
					"type": "array",
					"items": { "$ref": "#/definitions/NameAndValue" }
				},
				"userPermission": {
					"description": "The permission level of the user that made the API request",
					"readOnly": true,
					"type": "string"
				},
				"numOfCollectors": {
					"format": "int32",
					"description": "The number of Collectors that belong to the group",
					"readOnly": true,
					"type": "integer"
				},
				"name": {
					"description": "The name of the Collector Group",
					"type": "string",
					"example": "Collector (Network Devices)"
				},
				"autoBalanceInstanceCountThreshold": {
					"format": "int32",
					"description": "threshold for instance count strategy to check if a collector has high load",
					"type": "integer"
				},
				"autoBalanceStrategy": {
					"description": "the auto balance strategy ",
					"type": "string"
				},
				"description": {
					"description": "The description of the Collector Group",
					"type": "string",
					"example": "Group for collectors dedicated to Network Devices"
				},
				"createOn": {
					"format": "int64",
					"description": "The time at which the group was created, in epoch format",
					"readOnly": true,
					"type": "integer"
				},
				"id": {
					"format": "int32",
					"description": "The id of the Collector Group",
					"readOnly": true,
					"type": "integer"
				}
			}
		},
		"WebsiteOverallStatusWidget": {
			"allOf": [
				{ "$ref": "#/definitions/Widget" },
				{
					"type": "object",
					"required": [ "items" ],
					"properties": {
						"items": {
							"type": "array",
							"items": { "$ref": "#/definitions/WebsiteGroupData" }
						}
					}
				}
			],
			"x-discriminator-value": "websiteoverallstatus"
		},
		"DeviceDatasourceInstanceConfigPaginationResponse": {
			"type": "object",
			"properties": {
				"total": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"searchId": {
					"readOnly": true,
					"type": "string"
				},
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/DeviceDataSourceInstanceConfig" }
				}
			}
		},
		"DeviceDatasourcePaginationResponse": {
			"type": "object",
			"properties": {
				"total": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"searchId": {
					"readOnly": true,
					"type": "string"
				},
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/DeviceDataSource" }
				}
			}
		},
		"RecipientGroupPaginationResponse": {
			"type": "object",
			"properties": {
				"total": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"searchId": {
					"readOnly": true,
					"type": "string"
				},
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/RecipientGroup" }
				}
			}
		},
		"AwsEC2ReservedInstanceCoverageCollectorAttribute": {
			"allOf": [
				{ "$ref": "#/definitions/CollectorAttribute" },
				{
					"type": "object",
					"properties": {
						"period": {
							"format": "int32",
							"type": "integer"
						}
					}
				}
			],
			"x-discriminator-value": "awsec2reservedinstancecoverage"
		},
		"DeviceInstanceData": {
			"type": "object",
			"properties": {
				"instanceId": {
					"readOnly": true,
					"type": "string"
				},
				"values": {
					"readOnly": true,
					"type": "array",
					"items": {
						"type": "array",
						"items": { "type": "object" }
					}
				},
				"errMsg": {
					"readOnly": true,
					"type": "string"
				},
				"time": {
					"readOnly": true,
					"type": "array",
					"items": {
						"format": "int64",
						"type": "integer"
					}
				},
				"nextPageParams": {
					"readOnly": true,
					"type": "string"
				},
				"dataSourceName": {
					"readOnly": true,
					"type": "string"
				}
			}
		},
		"WebsiteOverviewReport": {
			"allOf": [
				{ "$ref": "#/definitions/ReportBase" },
				{
					"type": "object",
					"required": [ "itemsType" ],
					"properties": {
						"includeTypes": {
							"description": "The information that should be included in the report. Options include 1: availability, 2: alerts, 3: graphs",
							"type": "array",
							"items": {
								"format": "int32",
								"type": "integer"
							}
						},
						"exclude100Availability": {
							"description": "Whether or not websites with 100% availability should be ignored",
							"type": "boolean"
						},
						"displayType": {
							"format": "int32",
							"description": "1 | 2\n1: Display overall locations\n2: Display overall and individual locations",
							"type": "integer"
						},
						"excludeSDT": {
							"description": "Whether or not SDTs periods should be considered for the website\u0027s availability",
							"type": "boolean"
						},
						"dateRange": {
							"description": "The Time Range configured for the report: Last 2 hours | Last 24 hours | Last calendar day | Last 7 days | Last 14 days | Last 30 days | Last calendar month | Last 365 days | Any custom date range in this format: YYYY-MM-dd hh:mm TO YYYY-MM-dd hh:mm",
							"type": "string"
						},
						"itemsType": {
							"description": "The type of entities specified in the servicesVal field. Acceptable values are: website, group",
							"type": "string"
						},
						"items": {
							"description": "The websites OR website groups (full path) selected for the report, where multiple entities are separated by commas",
							"type": "string"
						}
					}
				}
			],
			"x-discriminator-value": "website service overview"
		},
		"Chain": {
			"type": "object",
			"required": [ "stages", "type" ],
			"properties": {
				"period": { "$ref": "#/definitions/Period" },
				"stages": {
					"type": "array",
					"items": {
						"type": "array",
						"items": { "$ref": "#/definitions/Recipient" }
					}
				},
				"type": {
					"description": "single",
					"type": "string"
				}
			}
		},
		"GraphVirtualDataPoint": {
			"type": "object",
			"properties": {
				"rpn": { "type": "string" },
				"name": { "type": "string" }
			}
		},
		"WebsiteGraphWidget": {
			"allOf": [
				{ "$ref": "#/definitions/Widget" },
				{
					"type": "object",
					"required": [ "checkpointId" ],
					"properties": {
						"websiteName": {
							"description": "The name of the website this graph is associated with",
							"readOnly": true,
							"type": "string"
						},
						"geoInfo": {
							"description": "The checkpoint location this graph is associated with",
							"readOnly": true,
							"type": "string"
						},
						"checkpointId": {
							"format": "int32",
							"description": "The id of the checkpoint this graph is associated with",
							"type": "integer"
						},
						"graph": {
							"description": "The name of the graph that was added as a widget",
							"type": "string"
						}
					}
				}
			],
			"x-discriminator-value": "sgraph"
		},
		"WebCheck": {
			"allOf": [
				{ "$ref": "#/definitions/Website" },
				{
					"type": "object",
					"required": [ "domain" ],
					"properties": {
						"schema": {
							"description": "The scheme or protocol associated with the URL to check. Acceptable values are: http, https",
							"type": "string",
							"example": "https"
						},
						"triggerSSLExpirationAlert": {
							"description": "Whether or not SSL expiration alerts should be triggered",
							"type": "boolean",
							"example": false
						},
						"triggerSSLStatusAlert": {
							"description": "Whether or not SSL status alerts should be triggered",
							"type": "boolean",
							"example": false
						},
						"domain": {
							"description": "The domain of the service. This is the base URL of the service",
							"type": "string",
							"example": "www.ebay.com"
						},
						"pageLoadAlertTimeInMS": {
							"format": "int64",
							"description": "The time in milliseconds that the page must load within for each step to avoid triggering an alert",
							"type": "integer",
							"example": 30000.0
						},
						"steps": {
							"description": "An object comprising one or more steps, see the table below for the properties included in each step",
							"type": "array",
							"items": { "$ref": "#/definitions/WebCheckStep" }
						},
						"ignoreSSL": {
							"description": "Whether or not SSL should be ignored, the default value is true",
							"type": "boolean",
							"example": "true"
						},
						"alertExpr": {
							"description": "The threshold (in days) for triggering SSL certification alerts",
							"type": "string",
							"example": "\u003c 200 100 50"
						}
					}
				}
			],
			"x-discriminator-value": "webcheck"
		},
		"AlertFilters": {
			"type": "object",
			"properties": {
				"severity": {
					"description": "Displayed alerts must have a severity that satisfies this criteria. Multiple severities are separated by commas",
					"type": "string"
				},
				"sdted": {
					"description": "Displayed alerts must have an SDT status that meets this criteria",
					"type": "string"
				},
				"chain": {
					"description": "Displayed alerts must be routed to an escalation chain that satisfies this filter. Glob is accepted, and * and an empty string both match all escalation chains",
					"type": "string"
				},
				"instance": {
					"description": "Displayed alerts must be associated with instances that meet this filter criteria. Glob is accepted, and * and an empty string both match all instances",
					"type": "string"
				},
				"dataPoint": {
					"description": "Displayed alerts must be associated with datapoints that meet this filter criteria. Glob is accepted, and * and an empty string both match all datapoints",
					"type": "string"
				},
				"host": {
					"description": "Displayed alerts must be associated with devices that meet this filter criteria. Glob is accepted, and * and an empty string both indicate all devices",
					"type": "string"
				},
				"rule": {
					"description": "Displayed alerts must match a rule that satisfies this filter. Glob is accepted, and * and an empty string both match all rules",
					"type": "string"
				},
				"keyword": {
					"description": "The key word for free search",
					"type": "string"
				},
				"dataSource": {
					"description": "Displayed alerts must be associated with datasources that meet this filter criteria. Glob is accepted, and * and an empty string both indicate all datasources",
					"type": "string"
				},
				"acked": {
					"description": "Displayed alerts must have an acknowledgement status that satisfies this criteria",
					"type": "string"
				},
				"cleared": {
					"description": "Displayed alerts must be active if cleared\u003dno,  display alerts must be closed if cleared\u003dyes, and must have cleared in the past 7 days if cleared\u003dall",
					"type": "string"
				},
				"group": {
					"description": "Displayed alerts must be associated with groups that meet this filter criteria. Glob is accepted, and * and an empty string both indicate all groups",
					"type": "string"
				}
			}
		},
		"NetflowGroupGraphWidget": {
			"allOf": [
				{ "$ref": "#/definitions/Widget" },
				{
					"type": "object",
					"properties": {
						"deviceGroupId": {
							"format": "int32",
							"type": "integer"
						},
						"deviceGroupName": {
							"readOnly": true,
							"type": "string"
						}
					}
				}
			],
			"x-discriminator-value": "groupnetflowgraph"
		},
		"SlaMetric": {
			"type": "object",
			"properties": {
				"websiteName": { "type": "string" },
				"groupName": { "type": "string" },
				"excludeSDT": { "type": "boolean" }
			}
		},
		"LogFile": {
			"type": "object",
			"properties": {
				"path": {
					"description": "The path of the log file to monitor",
					"type": "string"
				},
				"excludes": {
					"description": "The regex or plain text to look for in the file and not trigger alert if found",
					"type": "array",
					"items": { "type": "string" }
				},
				"useGlob": {
					"description": "Whether or not glob is used in the path",
					"type": "boolean"
				},
				"encoding": {
					"description": "The file encoding: default | auto | UTF-8 | UTF-16",
					"type": "string"
				},
				"matches": {
					"type": "array",
					"items": { "$ref": "#/definitions/MatchPattern" }
				}
			}
		},
		"GcpComputeServiceLimitsCollectorAttributeV2": {
			"allOf": [
				{ "$ref": "#/definitions/CollectorAttribute" },
				{
					"type": "object",
					"properties": {
						"period": {
							"format": "int32",
							"type": "integer"
						}
					}
				}
			]
		},
		"SDKScriptDiscoveryMethod": {
			"allOf": [
				{ "$ref": "#/definitions/AutoDiscoveryMethod" },
				{
					"type": "object",
					"required": [ "groovyScript", "sdkName", "sdkVersion" ],
					"properties": {
						"groovyScript": { "type": "string" },
						"sdkVersion": { "type": "string" },
						"sdkName": { "type": "string" }
					}
				}
			],
			"x-discriminator-value": "ad_sdkscript"
		},
		"RowData": {
			"type": "object",
			"properties": {
				"cells": {
					"readOnly": true,
					"type": "array",
					"items": { "$ref": "#/definitions/CellData" }
				},
				"deviceId": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"deviceDisplayName": {
					"readOnly": true,
					"type": "string"
				}
			}
		},
		"OpsNoteDeviceGroupScope": {
			"allOf": [
				{ "$ref": "#/definitions/OpsNoteScope" },
				{
					"type": "object",
					"properties": {
						"fullPath": { "type": "string" },
						"groupId": {
							"format": "int32",
							"type": "integer"
						}
					}
				}
			],
			"x-discriminator-value": "devicegroup"
		},
		"AlertTrendsReport": {
			"allOf": [
				{ "$ref": "#/definitions/ReportBase" },
				{
					"type": "object",
					"required": [ "metrics" ],
					"properties": {
						"dateRange": {
							"description": "The Time Range configured for the report: Last 2 hours | Last 24 hours | Last calendar day | Last 7 days | Last 14 days | Last 30 days | Last calendar month | Last 365 days | Any custom date range in this format: YYYY-MM-dd hh:mm TO YYYY-MM-dd hh:mm",
							"type": "string"
						},
						"metrics": {
							"description": "The devices and groups that will be included in the report, where each device/group should be represented with two fields: itemType and itemVal",
							"type": "array",
							"items": { "$ref": "#/definitions/AlertTrendsMetric" }
						}
					}
				}
			],
			"x-discriminator-value": "alert trends"
		},
		"WebsiteCheckpointRawData": {
			"type": "object",
			"properties": {
				"values": {
					"readOnly": true,
					"type": "array",
					"items": {
						"type": "array",
						"items": { "type": "object" }
					}
				},
				"time": {
					"readOnly": true,
					"type": "array",
					"items": {
						"format": "int64",
						"type": "integer"
					}
				},
				"nextPageParams": {
					"readOnly": true,
					"type": "string"
				}
			}
		},
		"OpenMetricDiscoveryMethod": {
			"allOf": [
				{ "$ref": "#/definitions/AutoDiscoveryMethod" },
				{
					"type": "object",
					"required": [ "followRedirect", "headers", "instanceLabel", "metricName", "url" ],
					"properties": {
						"headers": { "type": "string" },
						"metricName": { "type": "string" },
						"readTimeout": {
							"format": "int32",
							"type": "integer"
						},
						"followRedirect": { "type": "boolean" },
						"connectTimeout": {
							"format": "int32",
							"type": "integer"
						},
						"groupLabel": { "type": "string" },
						"instanceLabel": { "type": "string" },
						"instancePropertyTags": { "type": "string" },
						"url": { "type": "string" }
					}
				}
			]
		},
		"AwsServiceLimitsFromTrustedAdvisorCollectorAttribute": {
			"allOf": [
				{ "$ref": "#/definitions/CollectorAttribute" },
				{
					"type": "object",
					"properties": {
						"period": {
							"format": "int32",
							"type": "integer"
						},
						"awsServiceName": { "type": "string" }
					}
				}
			],
			"x-discriminator-value": "awsservicelimitsfromtrustedadvisor"
		},
		"AwsDynamodbCollectorAttribute": {
			"allOf": [
				{ "$ref": "#/definitions/CollectorAttribute" },
				{
					"type": "object",
					"properties": {
						"awsRangeValue": { "type": "string" },
						"awsQueryRangeValue": { "type": "string" },
						"awsDynamodbAttrType": { "type": "string" },
						"awsQueryRangeOp": { "type": "string" },
						"awsKeyValue": { "type": "string" },
						"awsAttributeName": { "type": "string" },
						"awsQueryIndexType": { "type": "string" },
						"awsQueryIndexName": { "type": "string" },
						"awsQueryKeyValue": { "type": "string" }
					}
				}
			],
			"x-discriminator-value": "awsdynamodb"
		},
		"InternalCollectorAttribute": {
			"allOf": [
				{ "$ref": "#/definitions/CollectorAttribute" },
				{
					"type": "object",
					"properties": {}
				}
			],
			"x-discriminator-value": "internal"
		},
		"Usage": {
			"type": "object",
			"properties": {
				"numOfStoppedAzureDevices": {
					"format": "int32",
					"description": "Number of stopped Azure resources",
					"readOnly": true,
					"type": "integer"
				},
				"numOfServices": {
					"format": "int32",
					"description": "Number of services (created via LM Service Insight)",
					"readOnly": true,
					"type": "integer"
				},
				"numOfTerminatedAzureDevices": {
					"format": "int32",
					"description": "Number of terminated Azure resources",
					"readOnly": true,
					"type": "integer"
				},
				"numberOfStandardDevices": {
					"format": "int32",
					"description": "Number of standard devices",
					"readOnly": true,
					"type": "integer"
				},
				"numOfStoppedGcpDevices": {
					"format": "int32",
					"description": "Number of stopped GCP resources not monitored with a local Collector",
					"readOnly": true,
					"type": "integer"
				},
				"numOfCombinedGcpDevices": {
					"format": "int32",
					"description": "Number of GCP resources monitored with a local Collector",
					"readOnly": true,
					"type": "integer"
				},
				"numOfAWSDevices": {
					"format": "int32",
					"description": "Number of AWS resources not monitored with a local Collector",
					"readOnly": true,
					"type": "integer"
				},
				"numberOfKubernetesDevices": {
					"format": "int32",
					"description": "Number of monitored Kubernetes Nodes, Pods, and Services",
					"readOnly": true,
					"type": "integer"
				},
				"numOfGcpDevices": {
					"format": "int32",
					"description": "Number of GCP resources",
					"readOnly": true,
					"type": "integer"
				},
				"numOfAzureDevices": {
					"format": "int32",
					"description": "Number of Azure resources not monitored with a local Collector",
					"readOnly": true,
					"type": "integer"
				},
				"numOfCombinedAzureDevices": {
					"format": "int32",
					"description": "Number of Azure resources monitored with a local Collector",
					"readOnly": true,
					"type": "integer"
				},
				"numOfTerminatedAWSDevices": {
					"format": "int32",
					"description": "Number of terminated AWS resources",
					"readOnly": true,
					"type": "integer"
				},
				"numOfTerminatedGcpCloudDevices": {
					"format": "int32",
					"description": "Number of terminated GCP resources",
					"readOnly": true,
					"type": "integer"
				},
				"numOfStoppedAWSDevices": {
					"format": "int32",
					"description": "Number of stopped AWS resources",
					"readOnly": true,
					"type": "integer"
				},
				"numberOfDevices": {
					"format": "int32",
					"description": "Sum of numOfStandardDevices, numOfCombinedAWSDevices, numOfCombinedAzureDevices, and numOfCombinedGCPDevices",
					"readOnly": true,
					"type": "integer"
				},
				"numOfConfigSourceDevices": {
					"format": "int32",
					"description": "Number of devices with active ConfigSources",
					"readOnly": true,
					"type": "integer"
				},
				"numOfWebsites": {
					"format": "int32",
					"description": "Number of websites",
					"readOnly": true,
					"type": "integer"
				},
				"numOfCombinedAWSDevices": {
					"format": "int32",
					"description": "Number of AWS resources monitored with a local Collector",
					"readOnly": true,
					"type": "integer"
				}
			}
		},
		"SaasNetScan": {
			"allOf": [
				{ "$ref": "#/definitions/Netscan" },
				{
					"type": "object",
					"properties": {
						"bearerToken": {
							"readOnly": true,
							"type": "string"
						},
						"saasService": {
							"readOnly": true,
							"type": "string"
						},
						"secretKey": {
							"readOnly": true,
							"type": "string"
						},
						"accessKey": {
							"readOnly": true,
							"type": "string"
						},
						"rootName": {
							"readOnly": true,
							"type": "string"
						},
						"groupId": {
							"format": "int32",
							"readOnly": true,
							"type": "integer"
						}
					}
				}
			]
		},
		"DeviceDataSourceInstanceGroup": {
			"type": "object",
			"required": [ "name" ],
			"properties": {
				"deviceDataSourceId": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"name": {
					"description": "Name of the datasource instance group",
					"type": "string",
					"example": "Ping Checks at HQ"
				},
				"description": {
					"description": "The description of the datasource instance group",
					"type": "string",
					"example": "Test the availability of HQ"
				},
				"createOn": {
					"format": "int64",
					"readOnly": true,
					"type": "integer"
				},
				"id": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"deviceId": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"deviceDisplayName": {
					"readOnly": true,
					"type": "string"
				}
			}
		},
		"TableWidgetInstanceCell": {
			"type": "object",
			"required": [ "instanceId" ],
			"properties": {
				"validationStatusCode": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"dataPointName": {
					"readOnly": true,
					"type": "string"
				},
				"instanceId": {
					"format": "int32",
					"type": "integer"
				},
				"dataPointId": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"instanceName": {
					"readOnly": true,
					"type": "string"
				}
			}
		},
		"GaugeDataPoint": {
			"type": "object",
			"required": [ "deviceDisplayName", "deviceGroupFullPath", "instanceName" ],
			"properties": {
				"rpn": { "type": "string" },
				"dataSourceId": {
					"format": "int32",
					"type": "integer"
				},
				"dataPointName": { "type": "string" },
				"dataPointId": {
					"format": "int32",
					"type": "integer"
				},
				"instanceName": { "type": "string" },
				"dataSourceFullName": { "type": "string" },
				"dataSeries": { "type": "string" },
				"aggregateFunction": { "type": "string" },
				"deviceGroupFullPath": { "type": "string" },
				"deviceDisplayName": { "type": "string" }
			}
		},
		"DeviceDataSourceInstanceData": {
			"type": "object",
			"properties": {
				"values": {
					"readOnly": true,
					"type": "array",
					"items": {
						"type": "array",
						"items": { "type": "object" }
					}
				},
				"time": {
					"readOnly": true,
					"type": "array",
					"items": {
						"format": "int64",
						"type": "integer"
					}
				},
				"nextPageParams": {
					"readOnly": true,
					"type": "string"
				},
				"dataSourceName": {
					"readOnly": true,
					"type": "string"
				}
			}
		},
		"RolePaginationResponse": {
			"type": "object",
			"properties": {
				"total": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"searchId": {
					"readOnly": true,
					"type": "string"
				},
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/Role" }
				}
			}
		},
		"AwsEcsServiceDiscoveryMethod": {
			"allOf": [
				{ "$ref": "#/definitions/AutoDiscoveryMethod" },
				{
					"type": "object",
					"properties": {}
				}
			],
			"x-discriminator-value": "ad_awsecsservice"
		},
		"CellData": {
			"type": "object",
			"properties": {
				"alertStatus": {
					"readOnly": true,
					"type": "string"
				},
				"forecastDay": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"instanceId": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"instanceName": {
					"readOnly": true,
					"type": "string"
				},
				"alertSeverity": { "type": "string" },
				"daysUntilAlertList": {
					"type": "array",
					"items": { "$ref": "#/definitions/DaysUntilAlert" }
				},
				"value": {
					"format": "double",
					"readOnly": true,
					"type": "number"
				}
			}
		},
		"ServiceSDT": {
			"allOf": [
				{ "$ref": "#/definitions/SDT" },
				{
					"type": "object",
					"properties": {
						"deviceId": {
							"format": "int32",
							"type": "integer"
						},
						"deviceDisplayName": { "type": "string" }
					}
				}
			],
			"x-discriminator-value": "servicesdt"
		},
		"SLAReport": {
			"allOf": [
				{ "$ref": "#/definitions/ReportBase" },
				{
					"type": "object",
					"required": [ "metrics" ],
					"properties": {
						"dateRange": {
							"description": "The Time Range configured for the report: Last 2 hours | Last 24 hours | Last calendar day | Last 7 days | Last 14 days | Last 30 days | Last calendar month | Last 365 days | Any custom date range in this format: YYYY-MM-dd hh:mm TO YYYY-MM-dd hh:mm",
							"type": "string"
						},
						"timezone": {
							"description": "The specific timezone for the report",
							"type": "string"
						},
						"displayWithAvailability": {
							"description": "If true, only devices with less than 100% availability will be displayed in the report",
							"type": "boolean"
						},
						"columns": {
							"description": "The columns displayed in the report",
							"type": "array",
							"items": { "$ref": "#/definitions/DynamicColumn" }
						},
						"displaySummary": {
							"description": "If true, the SLA summary (total %) will be displayed",
							"type": "boolean"
						},
						"dayInOneWeek": {
							"description": "The days of the week that the SLA report should take into account, where multiple values are separated by commas and * refers to all days of the week",
							"type": "string"
						},
						"periodInOneDay": {
							"description": "The hours of each selected day that the SLA report should take into account, where * refers to all hours",
							"type": "string"
						},
						"metrics": {
							"description": "The datapoints and corresponding SLA thresholds that will be included in the report, where each metric includes seven fields: groupName, deviceName, dataSourceFullName, dataSourceId, instances, metric and threshold. Threshold should comprise of an operator and a number separated by a space, where valid operators are \u003e, \u003c, !\u003d, \u003d, \u003e\u003d and \u003c\u003d",
							"type": "array",
							"items": { "$ref": "#/definitions/SlaMetric" }
						},
						"unmonitoredTime": {
							"format": "int32",
							"description": "0|1|2 - How the time we have no data for the device should be counted, where 1 \u003d ignore no data (subtract from total time), 2 \u003d count as violation (subtract from uptime), 3 \u003d count as available (add to uptime)",
							"type": "integer"
						}
					}
				}
			],
			"x-discriminator-value": "service level agreement"
		},
		"WebsiteNOCItem": {
			"allOf": [
				{ "$ref": "#/definitions/NOCItemBase" },
				{
					"type": "object",
					"required": [ "name", "websiteGroupName", "websiteName" ],
					"properties": {
						"websiteName": { "type": "string" },
						"name": { "type": "string" },
						"websiteGroupName": { "type": "string" },
						"groupBy": { "type": "string" }
					}
				}
			],
			"x-discriminator-value": "website"
		},
		"DeviceDataSourceInstanceConfigDiff": {
			"type": "object",
			"properties": {
				"rowNo": {
					"format": "int32",
					"type": "integer"
				},
				"type": { "type": "string" },
				"content": { "type": "string" }
			}
		},
		"RestAppliesToFunctionPaginationResponse": {
			"type": "object",
			"properties": {
				"total": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"searchId": {
					"readOnly": true,
					"type": "string"
				},
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/AppliesToFunction" }
				}
			}
		},
		"BigNumberInfo": {
			"type": "object",
			"required": [ "bigNumberItems", "dataPoints" ],
			"properties": {
				"virtualDataPoints": {
					"description": "The virtual datapoints included in the widget. Note that a virtual datapoint must be referenced in the bigNumberItems object in order to be displayed",
					"type": "array",
					"items": { "$ref": "#/definitions/VirtualDataPoint" }
				},
				"counters": {
					"description": "The counter is used for saving applyTo expression, it\u0027s mainly used for count device",
					"type": "array",
					"items": { "$ref": "#/definitions/Counter" }
				},
				"dataPoints": {
					"description": "The datapoints included in the widget. Note that a datapoint must be referenced in the bigNumberItems object in order to be displayed",
					"type": "array",
					"items": { "$ref": "#/definitions/BigNumberDataPoint" }
				},
				"bigNumberItems": {
					"description": "The datapoints and virtual datapoints whose values should be displayed in the big number widget",
					"type": "array",
					"items": { "$ref": "#/definitions/BigNumberItem" }
				}
			}
		},
		"NOCWidget": {
			"allOf": [
				{ "$ref": "#/definitions/Widget" },
				{
					"type": "object",
					"required": [ "items" ],
					"properties": {
						"ackChecked": {
							"description": "Whether or not acknowledgements are displayed in the NOC widget, the default value is true",
							"type": "boolean"
						},
						"displayErrorAlert": {
							"description": "Whether or not error alerts are displayed in the NOC widget, the default value is true",
							"type": "boolean"
						},
						"displayColumn": {
							"format": "int32",
							"description": "The maximum number columns displayed in the NOC widget",
							"type": "integer"
						},
						"displayWarnAlert": {
							"description": "Whether or not warning alerts are displayed in the NOC widget, the default value is true",
							"type": "boolean"
						},
						"displayCriticalAlert": {
							"description": "Whether or not critical alerts are displayed in the NOC widget, the default value is true",
							"type": "boolean"
						},
						"sortBy": {
							"description": "How NOC items are sorted",
							"type": "string"
						},
						"sdtChecked": {
							"description": "Whether or not SDTs are displayed in the NOC widget, the default value is true",
							"type": "boolean"
						},
						"items": {
							"description": "The NOC items",
							"type": "array",
							"items": { "$ref": "#/definitions/NOCItemBase" }
						}
					}
				}
			],
			"x-discriminator-value": "noc"
		},
		"AlertAck": {
			"type": "object",
			"required": [ "ackComment" ],
			"properties": {
				"ackComment": {
					"description": "your comment on the alert",
					"type": "string",
					"example": "looking into this alert"
				}
			}
		},
		"OpsNotePaginationResponse": {
			"type": "object",
			"properties": {
				"total": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"searchId": {
					"readOnly": true,
					"type": "string"
				},
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/OpsNote" }
				}
			}
		},
		"Counter": {
			"type": "object",
			"properties": {
				"name": { "type": "string" },
				"appliesTo": { "type": "string" }
			}
		},
		"CloudWatchAutoDiscoveryMethod": {
			"allOf": [
				{ "$ref": "#/definitions/AutoDiscoveryMethod" },
				{
					"type": "object",
					"required": [ "clusterDimension", "namespace", "nodeDimension" ],
					"properties": {
						"clusterDimension": { "type": "string" },
						"nodeDimension": { "type": "string" },
						"namespace": { "type": "string" }
					}
				}
			],
			"x-discriminator-value": "ad_cloudwatch"
		},
		"ColorThreshold": {
			"type": "object",
			"required": [ "level", "relation", "threshold" ],
			"properties": {
				"level": {
					"format": "int32",
					"type": "integer"
				},
				"threshold": {
					"format": "double",
					"type": "number"
				},
				"relation": { "type": "string" }
			}
		},
		"NetAppCollectorAttribute": {
			"allOf": [
				{ "$ref": "#/definitions/CollectorAttribute" },
				{
					"type": "object",
					"properties": {
						"netAppType": { "type": "string" },
						"ip": {
							"readOnly": true,
							"type": "string"
						},
						"netAppInstance": { "type": "string" },
						"netAppXMLBulkLocator": { "type": "string" },
						"netAppXML": { "type": "string" },
						"netAppAPI": { "type": "string" },
						"params": { "type": "object" },
						"netAppAggregate": { "type": "string" },
						"netAppXMLIndex": { "type": "string" },
						"netAppXMLInstance": { "type": "string" },
						"netAppIndex": { "type": "string" },
						"netAppXMLBulk": { "type": "string" },
						"netAppObject": { "type": "string" },
						"netAppXMLLocator": { "type": "string" }
					}
				}
			],
			"x-discriminator-value": "netapp"
		},
		"GcpAtomEventSource": {
			"allOf": [
				{ "$ref": "#/definitions/EventSource" },
				{
					"type": "object",
					"properties": {
						"schedule": {
							"format": "int32",
							"description": "The polling interval for the EventSource",
							"type": "integer"
						}
					}
				}
			],
			"x-discriminator-value": "gcpatom"
		},
		"EC2NetscanPolicyCredential": {
			"type": "object",
			"properties": {
				"deviceGroupId": {
					"format": "int32",
					"description": "The ID of the ResourceGroup that credentials should be inherited from, for this scan",
					"type": "integer",
					"example": 1.0
				},
				"custom": {
					"description": "Custom credentials that should be used for this scan",
					"additionalProperties": { "type": "string" },
					"type": "object",
					"example": "[{\"snmp.community\":\"test\"}]"
				},
				"deviceGroupName": {
					"description": "The name of the ResourceGroup that credentials should be inherited from, for this scan",
					"type": "string",
					"example": "Network Devices"
				}
			}
		},
		"APIToken": {
			"type": "object",
			"properties": {
				"accessId": {
					"description": "The access Id associated with the API Tokens",
					"readOnly": true,
					"type": "string"
				},
				"adminName": {
					"description": "The name of the user associated with the API Tokens",
					"readOnly": true,
					"type": "string"
				},
				"note": {
					"description": "The note associated with the API Tokens",
					"type": "string",
					"example": "John Doe\u0027s API Token"
				},
				"lastUsedOn": {
					"format": "int64",
					"description": "The epoch at which the API Tokens were last used",
					"readOnly": true,
					"type": "integer"
				},
				"accessKey": {
					"description": "The secret key associated with the API Tokens",
					"readOnly": true,
					"type": "string"
				},
				"createdBy": {
					"description": "The user who is the API Tokens created by",
					"readOnly": true,
					"type": "string"
				},
				"roles": {
					"uniqueItems": true,
					"description": "The roles assigned to the user that is associated with the API Tokens",
					"readOnly": true,
					"type": "array",
					"items": { "type": "string" }
				},
				"adminId": {
					"format": "int32",
					"description": "The id of the user associated with the API Tokens",
					"readOnly": true,
					"type": "integer"
				},
				"id": {
					"format": "int32",
					"description": "The id of the API Token",
					"readOnly": true,
					"type": "integer"
				},
				"createdOn": {
					"format": "int64",
					"description": "The epoch at which the API Tokens were created",
					"readOnly": true,
					"type": "integer"
				},
				"status": {
					"format": "int32",
					"description": "1 | 2 - Whether or not the API Tokens are enabled, where 2 \u003d enabled",
					"type": "integer",
					"example": 2.0
				}
			}
		},
		"DeviceDataSourceSDTHistoryPaginationResponse": {
			"type": "object",
			"properties": {
				"total": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"searchId": {
					"readOnly": true,
					"type": "string"
				},
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/SDTHistory" }
				}
			}
		},
		"AwsServiceRegionDiscoveryMethod": {
			"allOf": [
				{ "$ref": "#/definitions/AutoDiscoveryMethod" },
				{
					"type": "object",
					"required": [ "awsServiceName" ],
					"properties": { "awsServiceName": { "type": "string" } }
				}
			],
			"x-discriminator-value": "ad_awsserviceregion"
		},
		"TableWidgetForecastConfiguration": {
			"type": "object",
			"properties": {
				"severity": {
					"description": "\tThe minimum alert severity the forecasting should include, one of warn | error | critical",
					"readOnly": true,
					"type": "string"
				},
				"confidence": {
					"format": "int32",
					"description": "The percent confidence that should be required for a forecasted alert.",
					"readOnly": true,
					"type": "integer"
				},
				"timeRange": {
					"description": "The training data time range (the data on which forecasting is calculated). Options are Last 7 days, Last 14 days, Last 30 days, Last calendar month, Last 365 days or a custom time range",
					"readOnly": true,
					"type": "string"
				},
				"algorithm": {
					"description": "Forecast method for the widget :Linear | ARIMA",
					"readOnly": true,
					"type": "string"
				}
			}
		},
		"UserFilter": {
			"type": "object",
			"properties": {
				"apiOnlyUser": {
					"description": "If the user is API only user. Acceptable values are: all, yes, no",
					"type": "string"
				},
				"firstName": {
					"description": "The first name of the user",
					"type": "string"
				},
				"lastName": {
					"description": "The last name of the user",
					"type": "string"
				},
				"enable2fa": {
					"description": "Whether does the user enabled 2FA. Acceptable values are: all, yes, no",
					"type": "string"
				},
				"roleAssignment": {
					"description": "Which roles is the user belongs to",
					"type": "string"
				},
				"email": {
					"description": "The emails of the user",
					"type": "string"
				},
				"status": {
					"description": "The user status. Acceptable values are: all, active, suspended",
					"type": "string"
				},
				"username": {
					"description": "The username of the user",
					"type": "string"
				}
			}
		},
		"Recipient": {
			"type": "object",
			"required": [ "method", "type" ],
			"properties": {
				"method": {
					"description": "Admin | Arbitrary, where Admin \u003d a user, and Arbitrary \u003d an arbitrary email",
					"type": "string",
					"example": "EMAIL"
				},
				"contact": { "type": "string" },
				"type": {
					"description": "email | sms | voice, where type must be email if method \u003d arbitrary",
					"type": "string",
					"example": "Admin"
				},
				"addr": {
					"description": "the user name if method \u003d admin, or the email address if method \u003d arbitrary",
					"type": "string",
					"example": "john.doe@logicmonitor.com"
				}
			}
		},
		"DeviceClusterAlertConfig": {
			"type": "object",
			"properties": {
				"countBy": {
					"description": "host | instance - Whether the cluster alert is based on an alert count across devices or instances",
					"type": "string",
					"example": "host"
				},
				"dataPointName": {
					"description": "The name of the dataPoint you want to base the cluster alert on",
					"readOnly": true,
					"type": "string",
					"example": "InMbps"
				},
				"dataSourceId": {
					"format": "int32",
					"description": "The id of the dataSource you want to base the cluster alert on",
					"type": "integer",
					"example": 396.0
				},
				"dataPointId": {
					"format": "int32",
					"description": "The id of the dataPoint you want to base the cluster alert on",
					"readOnly": true,
					"type": "integer",
					"example": 2016.0
				},
				"minAlertLevel": {
					"format": "int32",
					"description": "The alert level that must be present for the devices or instances to trigger the cluster alert. Acceptable values are: 2, 3, 4",
					"type": "integer",
					"example": 4.0
				},
				"dataSourceDisplayName": {
					"description": "The display name of the dataSource you want to base the cluster alert on",
					"type": "string",
					"example": "Interfaces (64 bit)-"
				},
				"disableAlerting": {
					"description": "Whether or not alerting will be disabled",
					"type": "boolean",
					"example": false
				},
				"id": {
					"format": "int32",
					"description": "The id of the cluster alert configuration",
					"readOnly": true,
					"type": "integer"
				},
				"suppressIndAlert": {
					"description": "Whether or not alerting will be suppressed for individual alerts, the default value is true",
					"type": "boolean",
					"example": "true"
				},
				"thresholdType": {
					"description": "whether the alert expression should be evaluated as a total number of devices or instances (absolute) or as a percentage of devices or instances (percentage). Acceptable values are: absolute, percentage",
					"type": "string",
					"example": "absolute"
				},
				"dataPointDescription": {
					"description": "The description of the dataPoint you want to base the cluster alert on",
					"readOnly": true,
					"type": "string",
					"example": "Inbound throughput, in megabits per second.\n\nBest choice for reports, etc."
				},
				"alertExpr": {
					"description": "The expression that indicates the number of objects (devices or instances) that need to be in alert to trigger the cluster alert. E.g. \u003e 5",
					"type": "string",
					"example": "\u003e\u003d2"
				}
			}
		},
		"SNMPILP": {
			"type": "object",
			"required": [ "OID", "name" ],
			"properties": {
				"method": { "type": "string" },
				"name": { "type": "string" },
				"OID": { "type": "string" }
			}
		},
		"DeviceGroupDataSourceDataPointConfig": {
			"type": "object",
			"required": [ "alertExpr", "dataPointId", "dataPointName" ],
			"properties": {
				"globalAlertExpr": {
					"readOnly": true,
					"type": "string"
				},
				"dataPointName": { "type": "string" },
				"dataPointId": {
					"format": "int32",
					"type": "integer"
				},
				"disableAlerting": { "type": "boolean" },
				"alertExprNote": { "type": "string" },
				"alertExpr": { "type": "string" },
				"dataPointDescription": {
					"readOnly": true,
					"type": "string"
				}
			}
		},
		"VirtualDataPoint": {
			"type": "object",
			"properties": {
				"rpn": { "type": "string" },
				"name": { "type": "string" }
			}
		},
		"NetflowGroupWidget": {
			"allOf": [
				{ "$ref": "#/definitions/Widget" },
				{
					"type": "object",
					"required": [ "deviceGroupId" ],
					"properties": {
						"rowFilters": { "type": "string" },
						"deviceGroupId": {
							"format": "int32",
							"type": "integer"
						},
						"dataType": { "type": "string" },
						"netflowFilter": { "$ref": "#/definitions/NetflowFilters" },
						"deviceGroupName": {
							"readOnly": true,
							"type": "string"
						}
					}
				}
			],
			"x-discriminator-value": "groupnetflow"
		},
		"ESXAutoDiscoveryMethod": {
			"allOf": [
				{ "$ref": "#/definitions/AutoDiscoveryMethod" },
				{
					"type": "object",
					"required": [ "entity" ],
					"properties": { "entity": { "type": "string" } }
				}
			],
			"x-discriminator-value": "ad_esx"
		},
		"CollectorAutoDiscoveryMethod": {
			"allOf": [
				{ "$ref": "#/definitions/AutoDiscoveryMethod" },
				{
					"type": "object",
					"required": [ "collectorId" ],
					"properties": { "collectorId": { "type": "string" } }
				}
			],
			"x-discriminator-value": "ad_collector"
		},
		"GCPNetscan": {
			"allOf": [
				{ "$ref": "#/definitions/Netscan" },
				{
					"type": "object",
					"properties": {
						"serviceAccountKey": {
							"readOnly": true,
							"type": "string"
						},
						"gcpService": {
							"readOnly": true,
							"type": "string"
						},
						"rootName": {
							"readOnly": true,
							"type": "string"
						},
						"groupId": {
							"format": "int32",
							"readOnly": true,
							"type": "integer"
						},
						"gcpRegion": {
							"readOnly": true,
							"type": "string"
						},
						"projectId": {
							"readOnly": true,
							"type": "string"
						}
					}
				}
			],
			"x-discriminator-value": "gcp"
		},
		"DeviceGroupDataSourceAlertConfig": {
			"type": "object",
			"properties": {
				"datasourceType": {
					"readOnly": true,
					"type": "string"
				},
				"dpConfig": {
					"readOnly": true,
					"type": "array",
					"items": { "$ref": "#/definitions/DeviceGroupDataSourceDataPointConfig" }
				}
			}
		},
		"XENCollectorAttribute": {
			"allOf": [
				{ "$ref": "#/definitions/CollectorAttribute" },
				{
					"type": "object",
					"properties": {
						"counters": {
							"type": "array",
							"items": { "$ref": "#/definitions/DataSourceAttribute" }
						},
						"xenEntity": { "type": "string" }
					}
				}
			],
			"x-discriminator-value": "xen"
		},
		"AwsLBTargetGroupDiscoveryMethod": {
			"allOf": [
				{ "$ref": "#/definitions/AutoDiscoveryMethod" },
				{
					"type": "object",
					"properties": {}
				}
			],
			"x-discriminator-value": "ad_awslbtargetgroups"
		},
		"AlertReport": {
			"allOf": [
				{ "$ref": "#/definitions/ReportBase" },
				{
					"type": "object",
					"properties": {
						"activeOnly": {
							"description": "true: only alerts that are still alerting (i.e. haven\u0027t yet cleared) will be displayed in the report\nfalse: active alerts and cleared alerts will both be displayed in the report",
							"type": "boolean"
						},
						"sortedBy": {
							"description": "count | host | dataPoint | level | startOn | ackedOn. How displayed alerts will be sorted in the report. Note that if summaryOnly is set to true, you are limited to sortedBy\u003d count | host | dataPoint. If summaryOnly is set to false, you cannot set sortedBy \u003d count",
							"type": "string"
						},
						"chain": {
							"description": "All alerts displayed in the report must have been routed to the Escalation Chains specified in this filter",
							"type": "string"
						},
						"dateRange": {
							"description": "The Time Range configured for the report. Options include: Last 2 hours | Last 24 hours | Last calendar day | Last 7 days | Last 14 days | Last 30 days | Last calendar month | Last 365 days | Any custom date range in this format: YYYY-MM-dd hh:mm TO YYYY-MM-dd hh:mm",
							"type": "string"
						},
						"level": {
							"description": "all | error | critical\nall: alerts of all severity levels will be displayed if they match the filter criteria\nerror: only error and critical alerts that match the filter criteria will be displayed\ncritical: only critical alerts that match the filter criteria will be displayed",
							"type": "string"
						},
						"timing": {
							"description": "overlap | start - Any alerts active during the specified dateRange will be displayed in the report if time\u003doverlap. If time\u003dstart, only alerts that started during the specified dateRange will be displayed in the report",
							"type": "string"
						},
						"columns": {
							"description": "The columns that will be displayed in the report. You should specify the columns in the order in which you\u0027d like them to be displayed. All column names need to be included in this object, but each column should have an associated isHidden field that indicates whether it is displayed or not. NOTE that if summaryOnly is set to true you can only include these columns: Alerts, Group, Device, Instance, Datapoint. If summaryOnly is set to false you can include these columns: Severity, Group, Device, Instance, Datapoint, Thresholds, Value, Began, End, Rule, Chain, Acked, Acked By, Acked On, Notes, In SDT",
							"type": "array",
							"items": { "$ref": "#/definitions/DynamicColumn" }
						},
						"dataPoint": {
							"description": "The group filter used to determine which alerts will appear in the report. Glob expression supported",
							"type": "string"
						},
						"sdtFilter": {
							"description": "all | sdt | nonsdt\nall: alerts that are in SDT and that aren\u0027t in SDT that meet the report criteria will be displayed\nsdt: only alerts that are in SDT and that meet the report criteria will be displayed\nnonsdt: only alerts that aren\u0027t in SDT and that meet the report criteria will be displayed",
							"type": "string"
						},
						"rule": {
							"description": "All alerts displayed in the report must have been routed to the Rules specified in this filter",
							"type": "string"
						},
						"ackFilter": {
							"description": "all | acked | nonacked\nall: both acknowledged and non-acknowledged alerts that meet the report criteria will be displayed\nacked: only acknowledged alerts that meet the report criteria will be displayed\nnonacked: only non-acknowledged alerts that meet the report criteria will be displayed",
							"type": "string"
						},
						"deviceDisplayName": {
							"description": "The device filter used to determine which alerts will appear in the report. Glob expressions supported",
							"type": "string"
						},
						"summaryOnly": {
							"description": "true: a column will be added to the report detailing the number of times each alert occurred\nfalse: the number of times each alert occurred will not be displayed in the report",
							"type": "boolean"
						},
						"dataSourceInstanceName": {
							"description": "The instance filter used to determine which alerts will appear in the report. Glob expressions supported",
							"type": "string"
						},
						"dataSource": {
							"description": "All alerts displayed in the report must have been triggered for the Datasources specified in this filter",
							"type": "string"
						},
						"groupFullPath": {
							"description": "The group filter used to determine which alerts will appear in the report. Glob expressions supported",
							"type": "string"
						},
						"includePreexist": {
							"description": "true: alerts that started prior to the specified dateRange but that meet all other criteria will be displayed in the report\nfalse: only alerts that started during the specified dateRange will be displayed in the report\nthe default value is true",
							"type": "boolean"
						}
					}
				}
			],
			"x-discriminator-value": "alert"
		},
		"EC2ScheduledEventAutoDiscoveryMethod": {
			"allOf": [
				{ "$ref": "#/definitions/AutoDiscoveryMethod" },
				{
					"type": "object",
					"properties": {}
				}
			],
			"x-discriminator-value": "ad_awsec2scheduledevents"
		},
		"RestSchedule": {
			"type": "object",
			"properties": {
				"cron": {
					"description": "The cron schedule for when the scan should be run",
					"type": "string",
					"example": "12 * * * *"
				},
				"recipients": {
					"description": "The recipients that should receive the notification of the scan finish",
					"type": "array",
					"items": { "type": "string" },
					"example": "[\"sarah@logicmonitor.com\" ]"
				},
				"timezone": {
					"description": "The timezone for the schedule",
					"type": "string",
					"example": "America/Los_Angeles"
				},
				"type": {
					"description": "The type of schedule. Possible values are manual (no schedule), hourly, daily, weekly, monthly",
					"type": "string",
					"example": "manual"
				},
				"notify": {
					"description": "Whether or not an email should be sent when the scan finishes",
					"type": "boolean",
					"example": false
				}
			}
		},
		"WebCheckStep": {
			"type": "object",
			"properties": {
				"schema": { "type": "string" },
				"respType": { "type": "string" },
				"HTTPHeaders": { "type": "string" },
				"auth": { "$ref": "#/definitions/Authentication" },
				"matchType": {
					"type": "string",
					"example": "plain"
				},
				"description": { "type": "string" },
				"type": {
					"readOnly": true,
					"type": "string",
					"example": "config"
				},
				"timeout": {
					"format": "int32",
					"type": "integer"
				},
				"useDefaultRoot": {
					"type": "boolean",
					"example": "true"
				},
				"path": { "type": "string" },
				"HTTPMethod": {
					"type": "string",
					"example": "GET"
				},
				"enable": { "type": "boolean" },
				"HTTPVersion": {
					"type": "string",
					"example": "1.1"
				},
				"keyword": { "type": "string" },
				"respScript": { "type": "string" },
				"label": { "type": "string" },
				"url": {
					"type": "string",
					"example": "/"
				},
				"invertMatch": {
					"type": "boolean",
					"example": false
				},
				"reqScript": { "type": "string" },
				"HTTPBody": { "type": "string" },
				"followRedirection": {
					"type": "boolean",
					"example": "true"
				},
				"postDataEditType": {
					"type": "string",
					"example": "raw"
				},
				"name": { "type": "string" },
				"requireAuth": {
					"type": "boolean",
					"example": false
				},
				"reqType": { "type": "string" },
				"fullpageLoad": {
					"type": "boolean",
					"example": false
				},
				"statusCode": { "type": "string" }
			}
		},
		"DeviceClusterAlertDefSDT": {
			"allOf": [
				{ "$ref": "#/definitions/SDT" },
				{
					"type": "object",
					"required": [ "deviceClusterAlertDefId" ],
					"properties": {
						"deviceClusterAlertDefId": {
							"format": "int32",
							"type": "integer"
						},
						"deviceGroupId": {
							"format": "int32",
							"readOnly": true,
							"type": "integer"
						},
						"dataSourceName": {
							"readOnly": true,
							"type": "string"
						},
						"deviceGroupFullPath": {
							"readOnly": true,
							"type": "string"
						}
					}
				}
			],
			"x-discriminator-value": "deviceclusteralertdefsdt"
		},
		"MongoCollectorAttribute": {
			"allOf": [
				{ "$ref": "#/definitions/CollectorAttribute" },
				{
					"type": "object",
					"properties": {
						"database": { "type": "string" },
						"port": { "type": "string" },
						"query": { "type": "string" },
						"collection": { "type": "string" }
					}
				}
			],
			"x-discriminator-value": "mongo"
		},
		"DashboardData": {
			"type": "object",
			"properties": {
				"userPermission": {
					"readOnly": true,
					"type": "string"
				},
				"name": {
					"readOnly": true,
					"type": "string"
				},
				"sharable": {
					"readOnly": true,
					"type": "boolean"
				},
				"id": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				}
			}
		},
		"DeviceDataSourceInstanceConfigAlert": {
			"type": "object",
			"properties": {
				"alertLevel": {
					"format": "int32",
					"type": "integer"
				},
				"id": { "type": "string" },
				"alertId": { "type": "string" },
				"alertSummary": { "type": "string" },
				"timestamp": {
					"format": "int64",
					"type": "integer"
				}
			}
		},
		"PingCheck": {
			"allOf": [
				{ "$ref": "#/definitions/Website" },
				{
					"type": "object",
					"required": [ "host" ],
					"properties": {
						"percentPktsNotReceiveInTime": {
							"format": "int32",
							"description": "The percentage of packets that should be returned in the time period specified by timeoutInMSPktsNotReceive for each ping check",
							"type": "integer"
						},
						"count": {
							"format": "int32",
							"description": "The number of packets to send",
							"type": "integer"
						},
						"host": {
							"description": "The URL to check, without the scheme or protocol (e.g http or https)\nE.g. if the URL is \"http://www.google.com, then the host\u003d\"www.google.com\"",
							"type": "string"
						},
						"timeoutInMSPktsNotReceive": {
							"format": "int64",
							"description": "The time period that the percentage of packets specified by percentPktsNotReceiveInTime must be returned in for each ping check",
							"type": "integer"
						}
					}
				}
			],
			"x-discriminator-value": "pingcheck"
		},
		"GlobMatchToggle": {
			"type": "object",
			"properties": {
				"isGlob": { "type": "boolean" },
				"value": { "type": "string" }
			}
		},
		"RoleReport": {
			"allOf": [
				{ "$ref": "#/definitions/ReportBase" },
				{
					"type": "object",
					"properties": {
						"columns": {
							"description": "The columns displayed in the report",
							"type": "array",
							"items": { "$ref": "#/definitions/DynamicColumn" }
						},
						"displayFormat": {
							"description": "The display format for the report. Acceptable values are: list, detail",
							"type": "string"
						}
					}
				}
			],
			"x-discriminator-value": "role"
		},
		"Debug": {
			"type": "object",
			"properties": {
				"output": {
					"description": "The value of the debug command",
					"readOnly": true,
					"type": "string"
				},
				"cmdline": {
					"description": "The debug command to execute",
					"type": "string"
				},
				"cmdContext": {
					"description": "The session prefix name",
					"type": "string"
				},
				"sessionId": {
					"description": "The session id",
					"readOnly": true,
					"type": "string"
				}
			}
		},
		"RestIPMIEventSource": {
			"allOf": [
				{ "$ref": "#/definitions/EventSource" },
				{
					"type": "object",
					"properties": {
						"checkInterval": {
							"format": "int32",
							"type": "integer"
						}
					}
				}
			]
		},
		"CollectorVersionPaginationResponse": {
			"type": "object",
			"properties": {
				"total": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"searchId": {
					"readOnly": true,
					"type": "string"
				},
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/CollectorVersion" }
				}
			}
		},
		"JDBCAutoDiscoveryMethod": {
			"allOf": [
				{ "$ref": "#/definitions/AutoDiscoveryMethod" },
				{
					"type": "object",
					"required": [ "ports", "query", "type", "url" ],
					"properties": {
						"query": { "type": "string" },
						"ports": { "type": "string" },
						"type": { "type": "string" },
						"separator": { "type": "string" },
						"url": { "type": "string" },
						"sid": { "type": "string" }
					}
				}
			],
			"x-discriminator-value": "ad_jdbc"
		},
		"SiteMonitorCheckPointPaginationResponse": {
			"type": "object",
			"properties": {
				"total": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"searchId": {
					"readOnly": true,
					"type": "string"
				},
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/SiteMonitorCheckpoint" }
				}
			}
		},
		"DeviceSLAWidget": {
			"allOf": [
				{ "$ref": "#/definitions/Widget" },
				{
					"type": "object",
					"required": [ "metrics" ],
					"properties": {
						"daysInWeek": {
							"description": "The days that SLA should be computed for, separated by commas. 1\u003dSunday, 2\u003dMonday, 3\u003dTuesday, 4\u003dWednesday, 5\u003dThursday, 6\u003dFriday, 7\u003dSaturday.",
							"type": "string"
						},
						"displayType": {
							"format": "int32",
							"description": "Whether or not selected metrics should be combined into one number (displayType:0) or should be displayed individually, up to four metrics (displayType:1)",
							"type": "integer"
						},
						"topX": {
							"format": "int32",
							"description": "Top list size for each point, 1 means aggregate",
							"type": "integer"
						},
						"timezone": {
							"description": "The specific timezone for the widget",
							"type": "string"
						},
						"bottomLabel": {
							"description": "The services that should be used to compute the SLA, where each service should include serviceGroup and service",
							"type": "string"
						},
						"periodInOneDay": {
							"description": "The period during the selected days that the SLA should be computed for. * \u003d all day, or a time range can be specified in the format of \"hh:mm TO hh:mm\", e.g. \"01:15 TO 17:15\"",
							"type": "string"
						},
						"metrics": {
							"description": "The metrics (datapoints) that should be used to compute the SLA, where each service should include groupName (can be *), deviceName (can be *), dataSourceId or dataSourceFullName, instances (can be *), metric (datapoint), threshold, and exclusionSDTType (empty string means SDT periods will not be excluded, \"group\" means SDT periods at the ResourceGroup level will be excluded, and \"device\" means SDT periods at the device level will be excluded)",
							"type": "array",
							"items": { "$ref": "#/definitions/SlaMetric" }
						},
						"unmonitoredTimeType": {
							"format": "int32",
							"description": "How no data should be treated: 0 \u003d unmonitored time will be ignored \u0026 subtracted from the total possible time, 1 \u003d unmonitored time will be subtracted from uptime and counted as a violation, 2 \u003d unmonitored time will be added to uptime and counted as available",
							"type": "integer"
						},
						"colorThresholds": {
							"description": "The threshold of color changes",
							"type": "array",
							"items": { "$ref": "#/definitions/ColorThreshold" }
						}
					}
				}
			],
			"x-discriminator-value": "devicesla"
		},
		"NetflowPort": {
			"x-discriminator-value": "port",
			"type": "object",
			"properties": {
				"percentUsage": {
					"format": "double",
					"readOnly": true,
					"type": "number"
				},
				"port": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"dataType": {
					"readOnly": true,
					"type": "string"
				},
				"usage": {
					"format": "double",
					"readOnly": true,
					"type": "number"
				},
				"description": {
					"readOnly": true,
					"type": "string"
				}
			}
		},
		"GroupNetFlowRecord": {
			"allOf": [
				{ "$ref": "#/definitions/NetflowDataBase" },
				{
					"type": "object",
					"properties": {
						"srcIP": {
							"readOnly": true,
							"type": "string"
						},
						"percentUsage": {
							"format": "double",
							"readOnly": true,
							"type": "number"
						},
						"lastEpochInSec": {
							"format": "int64",
							"readOnly": true,
							"type": "integer"
						},
						"ifOut": {
							"format": "int64",
							"readOnly": true,
							"type": "integer"
						},
						"usage": {
							"format": "double",
							"readOnly": true,
							"type": "number"
						},
						"dstDNS": {
							"readOnly": true,
							"type": "string"
						},
						"srcPort": {
							"format": "int32",
							"readOnly": true,
							"type": "integer"
						},
						"deviceDisplayName": { "type": "string" },
						"ifInDisplayName": { "type": "string" },
						"firstEpochInSec": {
							"format": "int64",
							"readOnly": true,
							"type": "integer"
						},
						"protocol": {
							"readOnly": true,
							"type": "string"
						},
						"dstPort": {
							"format": "int32",
							"readOnly": true,
							"type": "integer"
						},
						"ifIn": {
							"format": "int64",
							"readOnly": true,
							"type": "integer"
						},
						"sourceMBytes": {
							"format": "double",
							"readOnly": true,
							"type": "number"
						},
						"srcDNS": {
							"readOnly": true,
							"type": "string"
						},
						"destinationMBytes": {
							"format": "double",
							"readOnly": true,
							"type": "number"
						},
						"dstIP": {
							"readOnly": true,
							"type": "string"
						},
						"ifOutDisplayName": { "type": "string" }
					}
				}
			],
			"x-discriminator-value": "groupflowrecord"
		},
		"NormalGraphWidget": {
			"allOf": [
				{ "$ref": "#/definitions/Widget" },
				{
					"type": "object",
					"required": [ "dsiId", "graphId" ],
					"properties": {
						"graphName": {
							"description": "The id of the datasource graph this widget was pinned from",
							"readOnly": true,
							"type": "string"
						},
						"hostName": {
							"description": "The display name of the device the graph was pinned from",
							"readOnly": true,
							"type": "string"
						},
						"hId": {
							"format": "int32",
							"description": "The id of the device the graph was pinned from",
							"type": "integer"
						},
						"dsiId": {
							"format": "int32",
							"description": "The id of the datasource instance the graph was pinned from",
							"type": "integer"
						},
						"dsName": {
							"description": "The name (not display name) of the datasource the graph is associated with",
							"readOnly": true,
							"type": "string"
						},
						"graphId": {
							"format": "int32",
							"description": "The id of the datasource graph this widget was pinned from",
							"type": "integer"
						},
						"dsiName": {
							"description": "The name of the instance the graph was pinned from",
							"readOnly": true,
							"type": "string"
						}
					}
				}
			],
			"x-discriminator-value": "ngraph"
		},
		"NMapDDR": {
			"type": "object",
			"properties": {
				"changeName": { "type": "string" },
				"assignment": {
					"description": "Information about how discovered devices are included in or excluded from monitoring. Assignment objects can be created for different types of discovered devices",
					"type": "array",
					"items": { "$ref": "#/definitions/Assignment" }
				}
			}
		},
		"NetflowBandwidth": {
			"allOf": [
				{ "$ref": "#/definitions/NetflowDataBase" },
				{
					"type": "object",
					"properties": {
						"receive": {
							"format": "double",
							"type": "number"
						},
						"usage": {
							"format": "double",
							"type": "number"
						},
						"send": {
							"format": "double",
							"type": "number"
						},
						"deviceDisplayName": { "type": "string" }
					}
				}
			],
			"x-discriminator-value": "bandwidth"
		},
		"XENAutoDiscoveryMethod": {
			"allOf": [
				{ "$ref": "#/definitions/AutoDiscoveryMethod" },
				{
					"type": "object",
					"required": [ "entity" ],
					"properties": { "entity": { "type": "string" } }
				}
			],
			"x-discriminator-value": "ad_xen"
		},
		"RawDataValues": {
			"type": "object",
			"properties": {
				"values": {
					"readOnly": true,
					"type": "array",
					"items": {
						"type": "array",
						"items": { "type": "object" }
					}
				},
				"time": {
					"readOnly": true,
					"type": "array",
					"items": {
						"format": "int64",
						"type": "integer"
					}
				},
				"nextPageParams": {
					"readOnly": true,
					"type": "string"
				}
			}
		},
		"AzureResourceHealthCollectorAttribute": {
			"allOf": [
				{ "$ref": "#/definitions/CollectorAttribute" },
				{
					"type": "object",
					"properties": {
						"period": {
							"format": "int32",
							"type": "integer"
						}
					}
				}
			],
			"x-discriminator-value": "azureresourcehealth"
		},
		"NameAndValue": {
			"type": "object",
			"required": [ "name", "value" ],
			"properties": {
				"name": {
					"description": "The name of a property",
					"type": "string",
					"example": "addr"
				},
				"value": {
					"description": "The value of a property",
					"type": "string",
					"example": "127.0.0.1"
				}
			}
		},
		"AutoDiscoveryConfiguration": {
			"type": "object",
			"required": [ "method" ],
			"properties": {
				"persistentInstance": { "type": "boolean" },
				"scheduleInterval": {
					"format": "int32",
					"type": "integer"
				},
				"deleteInactiveInstance": { "type": "boolean" },
				"method": { "$ref": "#/definitions/AutoDiscoveryMethod" },
				"instanceAutoGroupMethod": { "type": "string" },
				"instanceAutoGroupMethodParams": { "type": "string" },
				"filters": {
					"type": "array",
					"items": { "$ref": "#/definitions/AutoDiscoveryFilter" }
				},
				"disableInstance": { "type": "boolean" },
				"dataSourceName": {
					"readOnly": true,
					"type": "string"
				}
			}
		},
		"ApiPerfMetrics": {
			"type": "object",
			"properties": {
				"summary": {
					"description": "api\u0027s summary defined in swagger.json",
					"readOnly": true,
					"type": "string",
					"example": "get alert list"
				},
				"totalWaitingRequests": {
					"format": "int64",
					"description": "total waiting requests",
					"readOnly": true,
					"type": "integer",
					"example": 10.0
				},
				"totNanoTime": {
					"format": "int64",
					"description": "total time taken to process requests",
					"readOnly": true,
					"type": "integer",
					"example": 10.0
				},
				"totalProcessedRequests": {
					"format": "int64",
					"description": "total processed requests",
					"readOnly": true,
					"type": "integer",
					"example": 10.0
				},
				"totalRequests": {
					"format": "int64",
					"description": "total requests",
					"readOnly": true,
					"type": "integer",
					"example": 10.0
				},
				"api": {
					"description": "api name",
					"readOnly": true,
					"type": "string",
					"example": "10"
				},
				"maxNanoTime": {
					"format": "int64",
					"description": "Max time taken to process a request",
					"readOnly": true,
					"type": "integer",
					"example": 10.0
				},
				"tags": {
					"description": "api tags",
					"readOnly": true,
					"type": "array",
					"items": { "type": "string" },
					"example": "Devices, ResourceGroups"
				}
			}
		},
		"AwsExternalId": {
			"type": "object",
			"properties": {
				"createdAt": { "type": "string" },
				"externalId": { "type": "string" }
			}
		},
		"IPMICollectorAttribute": {
			"allOf": [
				{ "$ref": "#/definitions/CollectorAttribute" },
				{
					"type": "object",
					"properties": { "ipmiSensor": { "type": "string" } }
				}
			],
			"x-discriminator-value": "ipmi"
		},
		"GcpStackDriverCollectorAttributeV2": {
			"allOf": [
				{ "$ref": "#/definitions/CollectorAttribute" },
				{
					"type": "object",
					"properties": {
						"period": {
							"format": "int32",
							"type": "integer"
						}
					}
				}
			]
		},
		"AlertRule": {
			"type": "object",
			"required": [ "escalatingChainId", "name", "priority" ],
			"properties": {
				"datapoint": {
					"description": "The datapoint the alert rule is configured to match",
					"type": "string",
					"example": "*"
				},
				"instance": {
					"description": "The instance the alert rule is configured to match",
					"type": "string",
					"example": "*"
				},
				"devices": {
					"uniqueItems": true,
					"description": "The device names and service names the alert rule is configured to match",
					"type": "array",
					"items": { "type": "string" },
					"example": "[\"Cisco Router\"]"
				},
				"escalatingChainId": {
					"format": "int32",
					"description": "The id of the escalation chain associated with the alert rule",
					"type": "integer",
					"example": 12.0
				},
				"priority": {
					"format": "int32",
					"description": "The priority associated with the alert rule",
					"type": "integer",
					"example": 100.0
				},
				"suppressAlertAckSdt": {
					"description": "Whether or not status notifications for acknowledgements and SDTs should be sent to the alert rule",
					"type": "boolean",
					"example": true
				},
				"datasource": {
					"description": "The datasource the alert rule is configured to match",
					"type": "string",
					"example": "Port-"
				},
				"suppressAlertClear": {
					"description": "Whether or not alert clear notifications should be sent to the alert rule",
					"type": "boolean",
					"example": true
				},
				"name": {
					"description": "The name of the alert rule",
					"type": "string",
					"example": "Warning"
				},
				"id": {
					"format": "int32",
					"description": "The Id of the alert rule",
					"readOnly": true,
					"type": "integer"
				},
				"levelStr": {
					"description": "The alert severity levels the alert rule is configured to match. Acceptable values are: All, Warn, Error, Critical",
					"type": "string",
					"example": "Warn"
				},
				"deviceGroups": {
					"uniqueItems": true,
					"description": "The ResourceGroups and service groups the alert rule is configured to match",
					"type": "array",
					"items": { "type": "string" },
					"example": "[ \"Devices by Type\"]"
				},
				"escalatingChain": {
					"description": "The escalation chain associated with the alert rule",
					"readOnly": true,
					"type": "object"
				},
				"escalationInterval": {
					"format": "int32",
					"description": "The escalation interval associated with the alert rule, in minutes",
					"type": "integer",
					"example": 15.0
				}
			}
		},
		"SDKScriptCollectorAttribute": {
			"allOf": [
				{ "$ref": "#/definitions/CollectorAttribute" },
				{
					"type": "object",
					"required": [ "groovyScript", "sdkName", "sdkVersion" ],
					"properties": {
						"groovyScript": { "type": "string" },
						"sdkVersion": { "type": "string" },
						"sdkName": { "type": "string" }
					}
				}
			],
			"x-discriminator-value": "sdkscript"
		},
		"PerfmonCounter": {
			"type": "object",
			"properties": {
				"name": { "type": "string" },
				"type": { "type": "string" },
				"value": { "type": "string" }
			}
		},
		"ReportGroupPaginationResponse": {
			"type": "object",
			"properties": {
				"total": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"searchId": {
					"readOnly": true,
					"type": "string"
				},
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/ReportGroup" }
				}
			}
		},
		"HostInventoryMetric": {
			"type": "object",
			"required": [ "dataSourceId" ],
			"properties": {
				"dataSourceId": {
					"format": "int32",
					"type": "integer"
				},
				"instances": { "type": "string" },
				"dataSourceFullName": { "type": "string" }
			}
		},
		"HostCpuReport": {
			"allOf": [
				{ "$ref": "#/definitions/ReportBase" },
				{
					"type": "object",
					"required": [ "hostsVal" ],
					"properties": {
						"dateRange": {
							"description": "The Time Range configured for the report: Last 2 hours | Last 24 hours | Last calendar day | Last 7 days | Last 14 days | Last 30 days | Last calendar month | Last 365 days | Any custom date range in this format: YYYY-MM-dd hh:mm TO YYYY-MM-dd hh:mm",
							"type": "string"
						},
						"hostsVal": {
							"description": "The groups selected for the report, where multiple devices are separated by commas",
							"type": "string"
						},
						"top10Only": {
							"description": "true | false\nfalse: CPU metrics will be displayed for all selected devices or groups\ntrue: CPU metrics will only be displayed for the top ten device or groups",
							"type": "boolean"
						},
						"displayGraphs": {
							"description": "true | false. Whether or not CPU graphs should be displayed at the end of the report",
							"type": "boolean"
						}
					}
				}
			],
			"x-discriminator-value": "host cpu"
		},
		"DataSource": {
			"type": "object",
			"required": [ "collectInterval", "collectMethod", "collectorAttribute", "id", "name" ],
			"properties": {
				"collectorAttribute": { "$ref": "#/definitions/CollectorAttribute" },
				"autoDiscoveryConfig": { "$ref": "#/definitions/AutoDiscoveryConfiguration" },
				"eriDiscoveryConfig": { "$ref": "#/definitions/ScriptERIDiscoveryAttributeV2" },
				"displayName": { "type": "string" },
				"description": {
					"description": "The description for the LMModule",
					"type": "string"
				},
				"appliesTo": {
					"description": "The Applies To for the LMModule",
					"type": "string"
				},
				"enableAutoDiscovery": { "type": "boolean" },
				"technology": {
					"description": "The Technical Notes for the LMModule",
					"type": "string"
				},
				"version": {
					"format": "int64",
					"readOnly": true,
					"type": "integer"
				},
				"tags": {
					"description": "The Tags for the LMModule",
					"type": "string"
				},
				"auditVersion": {
					"format": "int64",
					"readOnly": true,
					"type": "integer"
				},
				"hasMultiInstances": {
					"readOnly": true,
					"type": "boolean"
				},
				"collectMethod": { "type": "string" },
				"eriDiscoveryInterval": {
					"format": "int32",
					"type": "integer"
				},
				"enableEriDiscovery": { "type": "boolean" },
				"collectInterval": {
					"format": "int32",
					"type": "integer"
				},
				"name": { "type": "string" },
				"dataPoints": {
					"type": "array",
					"items": { "$ref": "#/definitions/DataPoint" }
				},
				"id": {
					"format": "int32",
					"description": "The ID of the LMModule",
					"readOnly": true,
					"type": "integer"
				},
				"group": {
					"description": "The group the LMModule is in",
					"type": "string"
				}
			}
		},
		"WidgetToken": {
			"type": "object",
			"properties": {
				"inheritList": {
					"type": "array",
					"items": { "$ref": "#/definitions/WidgetTokenInheritance" }
				},
				"name": {
					"description": "This is the name of the parent group of devices, if there is one established",
					"type": "string",
					"example": "Default ResourceGroup"
				},
				"type": {
					"readOnly": true,
					"type": "string"
				},
				"value": {
					"description": "this is the name of the child group of devices, if there is one",
					"type": "string",
					"example": "Devices by Type/Network"
				}
			}
		},
		"WebsiteCheckPoint": {
			"type": "object",
			"properties": {
				"geoInfo": {
					"readOnly": true,
					"type": "string"
				},
				"id": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"smgId": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				}
			}
		},
		"WindowsEventLogEventSource": {
			"allOf": [
				{ "$ref": "#/definitions/EventSource" },
				{
					"type": "object",
					"properties": {}
				}
			],
			"x-discriminator-value": "wineventlog"
		},
		"BasicAuthentication": {
			"allOf": [
				{ "$ref": "#/definitions/Authentication" },
				{
					"type": "object",
					"properties": {}
				}
			],
			"x-discriminator-value": "basic"
		},
		"NetflowGroupWidgetData": {
			"allOf": [
				{ "$ref": "#/definitions/WidgetData" },
				{
					"type": "object",
					"properties": {
						"total": {
							"format": "int32",
							"readOnly": true,
							"type": "integer"
						},
						"items": {
							"readOnly": true,
							"type": "array",
							"items": { "$ref": "#/definitions/NetflowDataBase" }
						}
					}
				}
			],
			"x-discriminator-value": "groupnetflow"
		},
		"AzureNetscan": {
			"allOf": [
				{ "$ref": "#/definitions/Netscan" },
				{
					"type": "object",
					"properties": {
						"clientId": {
							"readOnly": true,
							"type": "string"
						},
						"secretKey": {
							"readOnly": true,
							"type": "string"
						},
						"subscriptionIds": {
							"readOnly": true,
							"type": "string"
						},
						"rootName": {
							"readOnly": true,
							"type": "string"
						},
						"groupId": {
							"format": "int32",
							"readOnly": true,
							"type": "integer"
						},
						"tenantId": {
							"readOnly": true,
							"type": "string"
						},
						"azureAZ": {
							"readOnly": true,
							"type": "string"
						},
						"azureService": {
							"readOnly": true,
							"type": "string"
						}
					}
				}
			],
			"x-discriminator-value": "azure"
		},
		"OpsNoteDeviceScope": {
			"allOf": [
				{ "$ref": "#/definitions/OpsNoteScope" },
				{
					"type": "object",
					"properties": {
						"fullPath": { "type": "string" },
						"groupId": {
							"format": "int32",
							"type": "integer"
						},
						"deviceId": {
							"format": "int32",
							"type": "integer",
							"example": 56.0
						},
						"deviceName": { "type": "string" }
					}
				}
			],
			"x-discriminator-value": "device"
		},
		"DeviceDataSourceInstanceAlertSettingPaginationResponse": {
			"type": "object",
			"properties": {
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/DeviceDataSourceInstanceAlertSetting" }
				}
			}
		},
		"StatsDGraphDisplay": {
			"type": "object",
			"properties": {
				"color": { "type": "string" },
				"legend": { "type": "string" },
				"type": { "type": "string" },
				"option": { "type": "string" }
			}
		},
		"DeviceBatchJobSDT": {
			"allOf": [
				{ "$ref": "#/definitions/SDT" },
				{
					"type": "object",
					"properties": {
						"deviceBatchJobId": {
							"format": "int32",
							"description": "The id of the device batchjob that the SDT will be associated with",
							"type": "integer"
						},
						"batchJobName": {
							"description": "The name of the batchjob that the SDT will apply to",
							"type": "string"
						},
						"deviceId": {
							"format": "int32",
							"description": "The id of the device associated with the batchjob that the SDT will apply to",
							"type": "integer"
						},
						"deviceDisplayName": {
							"description": "The display name of the device associated with the batchjob that the SDT will apply to",
							"type": "string"
						}
					}
				}
			],
			"x-discriminator-value": "devicebatchjobsdt"
		},
		"DeviceGroupAlertThresholdInfo": {
			"type": "object",
			"properties": {
				"userPermission": {
					"readOnly": true,
					"type": "string"
				},
				"groupId": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"alertEnabled": {
					"readOnly": true,
					"type": "boolean"
				},
				"groupFullPath": {
					"readOnly": true,
					"type": "string"
				},
				"alertExpr": {
					"readOnly": true,
					"type": "string"
				}
			}
		},
		"AwsBillingReportCollectorAttribute": {
			"allOf": [
				{ "$ref": "#/definitions/CollectorAttribute" },
				{
					"type": "object",
					"properties": {}
				}
			],
			"x-discriminator-value": "awsbillingreport"
		},
		"AzureSubscriptionDiscoveryMethod": {
			"allOf": [
				{ "$ref": "#/definitions/AutoDiscoveryMethod" },
				{
					"type": "object",
					"properties": {}
				}
			],
			"x-discriminator-value": "ad_azuresubscription"
		},
		"ServiceAlert": {
			"allOf": [
				{ "$ref": "#/definitions/Widget" },
				{
					"type": "object",
					"required": [ "deviceId" ],
					"properties": {
						"deviceId": {
							"format": "int32",
							"type": "integer"
						},
						"deviceDisplayName": {
							"readOnly": true,
							"type": "string"
						}
					}
				}
			]
		},
		"GraphPlot": {
			"allOf": [
				{ "$ref": "#/definitions/WidgetData" },
				{
					"type": "object",
					"properties": {
						"missinglines": {
							"readOnly": true,
							"type": "array",
							"items": { "type": "string" }
						},
						"timeScale": {
							"readOnly": true,
							"type": "string"
						},
						"instances": {
							"uniqueItems": true,
							"readOnly": true,
							"type": "array",
							"items": {
								"format": "int32",
								"type": "integer"
							}
						},
						"timestamps": {
							"readOnly": true,
							"type": "array",
							"items": {
								"format": "int64",
								"type": "integer"
							}
						},
						"minValue": {
							"readOnly": true,
							"type": "object"
						},
						"startTime": {
							"format": "int64",
							"readOnly": true,
							"type": "integer"
						},
						"id": {
							"format": "int32",
							"readOnly": true,
							"type": "integer"
						},
						"rigid": {
							"readOnly": true,
							"type": "boolean"
						},
						"lines": {
							"readOnly": true,
							"type": "array",
							"items": { "$ref": "#/definitions/GraphPlotLine" }
						},
						"height": {
							"format": "int32",
							"readOnly": true,
							"type": "integer"
						},
						"endTZOffset": {
							"format": "int32",
							"readOnly": true,
							"type": "integer"
						},
						"base1024": {
							"readOnly": true,
							"type": "boolean"
						},
						"dsName": {
							"readOnly": true,
							"type": "string"
						},
						"maxValue": {
							"readOnly": true,
							"type": "object"
						},
						"displayPrio": {
							"format": "int32",
							"readOnly": true,
							"type": "integer"
						},
						"timeZoneId": {
							"readOnly": true,
							"type": "string"
						},
						"timeZone": {
							"readOnly": true,
							"type": "string"
						},
						"startTZOffset": {
							"format": "int32",
							"readOnly": true,
							"type": "integer"
						},
						"xAxisName": {
							"readOnly": true,
							"type": "string"
						},
						"width": {
							"format": "int32",
							"readOnly": true,
							"type": "integer"
						},
						"name": {
							"readOnly": true,
							"type": "string"
						},
						"verticalLabel": {
							"readOnly": true,
							"type": "string"
						},
						"step": {
							"format": "int64",
							"readOnly": true,
							"type": "integer"
						},
						"endTime": {
							"format": "int64",
							"readOnly": true,
							"type": "integer"
						},
						"scopes": {
							"readOnly": true,
							"type": "array",
							"items": { "$ref": "#/definitions/GraphOpsNoteScope" }
						},
						"base": {
							"format": "int64",
							"readOnly": true,
							"type": "integer"
						},
						"exportFileName": {
							"readOnly": true,
							"type": "string"
						}
					}
				}
			],
			"x-discriminator-value": "graph"
		},
		"UnmonitoredDevicePaginationResponse": {
			"type": "object",
			"properties": {
				"total": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"searchId": {
					"readOnly": true,
					"type": "string"
				},
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/UnmonitoredDevices" }
				}
			}
		},
		"PieChartInfo": {
			"type": "object",
			"required": [ "pieChartItems" ],
			"properties": {
				"maxSlicesCanBeShown": {
					"format": "int32",
					"description": "The maximum number of slices you\u0027d like displayed in the pie chart",
					"type": "integer"
				},
				"virtualDataPoints": {
					"description": "The virtual datapoints added to the widget. Note that virtual datapoints must be included in the pieChartItems object to be displayed in the widget",
					"type": "array",
					"items": { "$ref": "#/definitions/VirtualDataPoint" }
				},
				"showLabelsAndLinesOnPC": {
					"description": "Whether or not labels and lines should be displayed on the pie chart",
					"type": "boolean"
				},
				"counters": {
					"description": "The counter is used for saving applyTo expression, it\u0027s mainly used for count device",
					"type": "array",
					"items": { "$ref": "#/definitions/Counter" }
				},
				"dataPoints": {
					"description": "The datapoints added to the widget. Note that datapoints must be included in the pieChartItems object to be displayed in the widget",
					"type": "array",
					"items": { "$ref": "#/definitions/PieChartDataPoint" }
				},
				"hideZeroPercentSlices": {
					"description": "Whether items at 0% should be hidden",
					"type": "boolean"
				},
				"groupRemainingAsOthers": {
					"description": "If the number of slices exceeds the maxSlicesCanBeShown, this value indicates whether the remaining slices should be grouped together",
					"type": "boolean"
				},
				"pieChartItems": {
					"description": "The datapoints and virtual datapoints that will be displayed in the pie chart",
					"type": "array",
					"items": { "$ref": "#/definitions/PieChartItem" }
				},
				"title": {
					"description": "The title that will be displayed above the pie chart",
					"type": "string"
				}
			}
		},
		"AwsRssEventSource": {
			"allOf": [
				{ "$ref": "#/definitions/EventSource" },
				{
					"type": "object",
					"properties": {
						"schedule": {
							"format": "int32",
							"description": "The polling interval for the EventSource",
							"type": "integer"
						}
					}
				}
			],
			"x-discriminator-value": "awsrss"
		},
		"DynamicColumn": {
			"type": "object",
			"properties": {
				"name": { "type": "string" },
				"isHidden": { "type": "boolean" }
			}
		},
		"StatsDGraph": {
			"type": "object",
			"properties": {
				"minValue": {
					"format": "double",
					"type": "number"
				},
				"maxValue": {
					"format": "double",
					"type": "number"
				},
				"namespace": { "type": "string" },
				"verticalLabel": { "type": "string" },
				"metrics": {
					"type": "array",
					"items": { "$ref": "#/definitions/StatsDMetricDefinition" }
				},
				"scaleUnit": {
					"format": "int32",
					"type": "integer"
				}
			}
		},
		"BigNumberDataPoint": {
			"type": "object",
			"required": [ "deviceDisplayName", "deviceGroupFullPath", "instanceName", "name" ],
			"properties": {
				"dataSourceId": {
					"format": "int32",
					"type": "integer"
				},
				"dataPointName": { "type": "string" },
				"dataPointId": {
					"format": "int32",
					"type": "integer"
				},
				"instanceName": { "type": "string" },
				"dataSourceFullName": { "type": "string" },
				"name": { "type": "string" },
				"aggregateFunction": { "type": "string" },
				"deviceGroupFullPath": { "type": "string" },
				"deviceDisplayName": { "type": "string" }
			}
		},
		"EchoEventSource": {
			"allOf": [
				{ "$ref": "#/definitions/EventSource" },
				{
					"type": "object",
					"properties": {}
				}
			],
			"x-discriminator-value": "echo"
		},
		"DeviceGroupSDT": {
			"allOf": [
				{ "$ref": "#/definitions/SDT" },
				{
					"type": "object",
					"properties": {
						"dataSourceId": {
							"format": "int32",
							"description": "The id of the datasource that this SDT will be associated with, for the specified group. dataSourceId 0 indicates all datasources",
							"type": "integer"
						},
						"deviceGroupId": {
							"format": "int32",
							"description": "The id of the ResourceGroup that the SDT will be associated with",
							"type": "integer"
						},
						"dataSourceName": {
							"description": "The name of the datasource that this SDT will be associated with, for the specified group. dataSourceName \"All\" indicates all datasources",
							"type": "string"
						},
						"deviceGroupFullPath": {
							"description": "The full path of the ResourceGroup that this SDT will be associated with",
							"type": "string"
						}
					}
				}
			],
			"x-discriminator-value": "devicegroupsdt"
		},
		"GcpBillingDiscoveryMethod": {
			"allOf": [
				{ "$ref": "#/definitions/AutoDiscoveryMethod" },
				{
					"type": "object",
					"required": [ "gcpBillingType" ],
					"properties": { "gcpBillingType": { "type": "string" } }
				}
			]
		},
		"AlertForecastingReport": {
			"allOf": [
				{ "$ref": "#/definitions/ReportBase" },
				{
					"type": "object",
					"required": [ "confidenceLevel", "hostsValType", "metrics" ],
					"properties": {
						"sortedBy": {
							"format": "int32",
							"description": "The sort option for the alert forecast report",
							"type": "integer"
						},
						"confidenceLevel": {
							"format": "int32",
							"description": "The confidence level when do forecasting",
							"type": "integer"
						},
						"hostsValType": {
							"description": "The type of the resource selection. Acceptable values are: host, group",
							"type": "string"
						},
						"dateRange": {
							"description": "The Time Range configured for the report: Last 2 hours | Last 24 hours | Last calendar day | Last 7 days | Last 14 days | Last 30 days | Last calendar month | Last 365 days | Any custom date range in this format: YYYY-MM-dd hh:mm TO YYYY-MM-dd hh:mm",
							"type": "string"
						},
						"hostsVal": {
							"description": "The group or device name selected for the report",
							"type": "string"
						},
						"top10Only": {
							"description": "true | false\nfalse: CPU metrics will be displayed for all selected devices or groups\ntrue: CPU metrics will only be displayed for the top ten device or groups",
							"type": "boolean"
						},
						"columns": {
							"description": "The columns displayed in the report",
							"type": "array",
							"items": { "$ref": "#/definitions/DynamicColumn" }
						},
						"metrics": {
							"description": "The datapoints that needs to do forecasting",
							"type": "array",
							"items": { "$ref": "#/definitions/Metric" }
						},
						"algorithm": {
							"description": "Forecast method for the report. Acceptable values are: Linear, ARIMA",
							"type": "string"
						}
					}
				}
			],
			"x-discriminator-value": "alert forecasting"
		},
		"PortPaginationResponse": {
			"type": "object",
			"properties": {
				"total": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"searchId": {
					"readOnly": true,
					"type": "string"
				},
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/NetflowPort" }
				}
			}
		},
		"AckCollectorDown": {
			"type": "object",
			"properties": {
				"comment": {
					"type": "string",
					"example": "Collector Down Acknowledged"
				}
			}
		},
		"AzureRedisCacheDiscoveryMethod": {
			"allOf": [
				{ "$ref": "#/definitions/AutoDiscoveryMethod" },
				{
					"type": "object",
					"properties": {}
				}
			],
			"x-discriminator-value": "ad_azurerediscache"
		},
		"WidgetTokenInheritance": {
			"type": "object",
			"properties": {
				"fullpath": {
					"readOnly": true,
					"type": "string"
				},
				"value": {
					"readOnly": true,
					"type": "string"
				}
			}
		},
		"OpsNoteWebsiteGroupScope": {
			"allOf": [
				{ "$ref": "#/definitions/OpsNoteScope" },
				{
					"type": "object",
					"properties": {
						"fullPath": { "type": "string" },
						"groupId": {
							"format": "int32",
							"type": "integer"
						}
					}
				}
			],
			"x-discriminator-value": "websitegroup"
		},
		"CustomReport": {
			"allOf": [
				{ "$ref": "#/definitions/ReportBase" },
				{
					"type": "object",
					"properties": {
						"macros": {
							"type": "array",
							"items": { "$ref": "#/definitions/Macro" }
						},
						"dateRange": { "type": "string" }
					}
				}
			],
			"x-discriminator-value": "word template"
		},
		"WebsiteSLAWidgetData": {
			"allOf": [
				{ "$ref": "#/definitions/WidgetData" },
				{
					"type": "object",
					"properties": {
						"availability": {
							"format": "double",
							"readOnly": true,
							"type": "number"
						},
						"colorLevel": {
							"format": "int32",
							"readOnly": true,
							"type": "integer"
						}
					}
				}
			],
			"x-discriminator-value": "websitesla"
		},
		"BigNumberData": {
			"type": "object",
			"required": [ "useCommaSeparators" ],
			"properties": {
				"useCommaSeparators": { "type": "boolean" },
				"bottomLabel": {
					"readOnly": true,
					"type": "string"
				},
				"errorMessage": {
					"readOnly": true,
					"type": "string"
				},
				"rounding": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"position": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"value": {
					"format": "double",
					"readOnly": true,
					"type": "number"
				},
				"rightLabel": {
					"readOnly": true,
					"type": "string"
				},
				"colorLevel": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				}
			}
		},
		"AzureBillingCollectorAttribute": {
			"allOf": [
				{ "$ref": "#/definitions/CollectorAttribute" },
				{
					"type": "object",
					"properties": {}
				}
			],
			"x-discriminator-value": "azurebilling"
		},
		"Dashboard": {
			"type": "object",
			"required": [ "name" ],
			"properties": {
				"owner": {
					"description": "This field will be empty unless the dashboard is a private dashboard, in which case the owner will be listed",
					"type": "string"
				},
				"template": {
					"description": "The template which is used for import dashboard",
					"type": "object"
				},
				"userPermission": {
					"description": "The permission of the user that made the API call",
					"readOnly": true,
					"type": "string"
				},
				"groupId": {
					"format": "int32",
					"description": "The id of the group the dashboard belongs to",
					"type": "integer",
					"example": 1.0
				},
				"fullName": {
					"description": "Full name of the dashboard, including group path",
					"readOnly": true,
					"type": "string",
					"example": "a new group//Collector Health/"
				},
				"description": {
					"description": "The description of the dashboard",
					"type": "string",
					"example": "Windows Servers Performance"
				},
				"sharable": {
					"description": "Whether or not the dashboard is sharable. This value will always be true unless the dashboard is a private dashboard",
					"type": "boolean",
					"example": true
				},
				"widgetsConfig": {
					"description": "Information about widget configuration used by the UI",
					"type": "object"
				},
				"groupName": {
					"description": "The name of group where created dashboard will reside",
					"type": "string",
					"example": "Server Dashboard"
				},
				"widgetTokens": {
					"description": "If useDynamicWidget\u003dtrue, this field must at least contain tokens defaultDeviceGroup and defaultServiceGroup",
					"type": "array",
					"items": { "$ref": "#/definitions/WidgetToken" },
					"example": "\"widgetTokens\":[{\"name\":\"defaultDeviceGroup\",\"value\":\"*\"},{\"name\":\"defaultServiceGroup\",\"value\":\"*\"}]"
				},
				"name": {
					"description": "The name of the dashboard",
					"type": "string",
					"example": "Default ResourceGroup"
				},
				"id": {
					"format": "int32",
					"description": "The Id of the dashboard",
					"readOnly": true,
					"type": "integer"
				},
				"groupFullPath": {
					"description": "The full path (excluding root group) of the group the dashboard belongs to",
					"readOnly": true,
					"type": "string"
				}
			}
		},
		"TableWidgetData": {
			"allOf": [
				{ "$ref": "#/definitions/WidgetData" },
				{
					"type": "object",
					"properties": {
						"columnHeaders": {
							"readOnly": true,
							"type": "array",
							"items": { "$ref": "#/definitions/ColumnHeader" }
						},
						"rows": {
							"readOnly": true,
							"type": "array",
							"items": { "$ref": "#/definitions/RowData" }
						}
					}
				}
			],
			"x-discriminator-value": "table"
		},
		"PortAutoDiscoveryMethod": {
			"allOf": [
				{ "$ref": "#/definitions/AutoDiscoveryMethod" },
				{
					"type": "object",
					"required": [ "ports" ],
					"properties": {
						"ports": { "type": "string" },
						"timeout": {
							"format": "int32",
							"type": "integer"
						}
					}
				}
			],
			"x-discriminator-value": "ad_port"
		},
		"AwsEC2ScheduledEventsCollectorAttribute": {
			"allOf": [
				{ "$ref": "#/definitions/CollectorAttribute" },
				{
					"type": "object",
					"properties": {
						"period": {
							"format": "int32",
							"type": "integer"
						}
					}
				}
			],
			"x-discriminator-value": "awsec2scheduledevents"
		},
		"DeviceSLAWidgetData": {
			"allOf": [
				{ "$ref": "#/definitions/WidgetData" },
				{
					"type": "object",
					"properties": {
						"resultList": {
							"readOnly": true,
							"type": "array",
							"items": { "$ref": "#/definitions/ResultItem" }
						}
					}
				}
			],
			"x-discriminator-value": "devicesla"
		},
		"PingCollectorAttribute": {
			"allOf": [
				{ "$ref": "#/definitions/CollectorAttribute" },
				{
					"type": "object",
					"properties": {
						"ip": { "type": "string" },
						"sendPkts": {
							"format": "int32",
							"type": "integer"
						}
					}
				}
			],
			"x-discriminator-value": "ping"
		},
		"Ec2Netscan": {
			"allOf": [
				{ "$ref": "#/definitions/Netscan" },
				{
					"type": "object",
					"required": [ "accessibility", "credentials" ],
					"properties": {
						"ddr": { "$ref": "#/definitions/Ec2DDR" },
						"credentials": {
							"description": "The credentials to be used for the scan",
							"$ref": "#/definitions/EC2NetscanPolicyCredential"
						},
						"accessibility": {
							"description": "Which IP the EC2 instance should be monitored with for nec2 scans: private or public",
							"type": "string",
							"example": "private"
						},
						"deadOperation": {
							"description": "How dead EC2 instances should be handled for nec2 scans. Must be Manually",
							"type": "string",
							"example": "MANUALLY"
						},
						"ports": { "$ref": "#/definitions/NetscanPorts" }
					}
				}
			],
			"x-discriminator-value": "nec2"
		},
		"TextWidget": {
			"allOf": [
				{ "$ref": "#/definitions/Widget" },
				{
					"type": "object",
					"required": [ "content" ],
					"properties": {
						"content": {
							"description": "The html content that the text widget should display",
							"type": "string"
						}
					}
				}
			],
			"x-discriminator-value": "text"
		},
		"AzureVMServiceLimitsCollectorAttribute": {
			"allOf": [
				{ "$ref": "#/definitions/CollectorAttribute" },
				{
					"type": "object",
					"properties": {
						"period": {
							"format": "int32",
							"type": "integer"
						}
					}
				}
			],
			"x-discriminator-value": "azurevmservicelimits"
		},
		"WebsiteOverviewWidget": {
			"allOf": [
				{ "$ref": "#/definitions/Widget" },
				{
					"type": "object",
					"required": [ "graph" ],
					"properties": {
						"websiteName": {
							"readOnly": true,
							"type": "string"
						},
						"websiteId": {
							"format": "int32",
							"type": "integer"
						},
						"geoInfo": {
							"readOnly": true,
							"type": "string"
						},
						"graph": { "type": "string" }
					}
				}
			],
			"x-discriminator-value": "websiteoverview"
		},
		"GoogleMapWidgetData": {
			"allOf": [
				{ "$ref": "#/definitions/WidgetData" },
				{
					"type": "object",
					"properties": {
						"items": {
							"readOnly": true,
							"type": "array",
							"items": { "$ref": "#/definitions/MapItemInfo" }
						}
					}
				}
			],
			"x-discriminator-value": "gmap"
		},
		"ApiTokenPaginationResponse": {
			"type": "object",
			"properties": {
				"total": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"searchId": {
					"readOnly": true,
					"type": "string"
				},
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/APIToken" }
				}
			}
		},
		"DeviceDataSourceAssociated": {
			"type": "object",
			"properties": {
				"instance": {
					"type": "array",
					"items": { "$ref": "#/definitions/DeviceDataSourceAssociatedInstance" }
				},
				"displayName": { "type": "string" },
				"name": { "type": "string" },
				"hasMore": {
					"format": "int32",
					"type": "integer"
				},
				"description": { "type": "string" },
				"id": {
					"format": "int32",
					"type": "integer"
				},
				"hasActiveInstance": { "type": "boolean" }
			}
		},
		"OverviewGraphDataPoint": {
			"type": "object",
			"properties": {
				"aggregateMethod": { "type": "string" },
				"dataPointName": { "type": "string" },
				"dataPointId": {
					"format": "int32",
					"type": "integer"
				},
				"consolidateFunc": {
					"format": "int32",
					"type": "integer"
				}
			}
		},
		"AzureNetworkServiceLimitsCollectorAttribute": {
			"allOf": [
				{ "$ref": "#/definitions/CollectorAttribute" },
				{
					"type": "object",
					"properties": {
						"period": {
							"format": "int32",
							"type": "integer"
						}
					}
				}
			],
			"x-discriminator-value": "azurenetworkservicelimits"
		},
		"ScriptERIDiscoveryAttributeV2": {
			"type": "object",
			"required": [ "name" ],
			"properties": {
				"winScript": { "type": "string" },
				"groovyScript": { "type": "string" },
				"name": { "type": "string" },
				"type": { "type": "string" },
				"linuxCmdline": { "type": "string" },
				"linuxScript": { "type": "string" },
				"winCmdline": { "type": "string" }
			}
		},
		"NetflowWidgetData": {
			"allOf": [
				{ "$ref": "#/definitions/WidgetData" },
				{
					"type": "object",
					"properties": {
						"total": {
							"format": "int32",
							"readOnly": true,
							"type": "integer"
						},
						"items": {
							"readOnly": true,
							"type": "array",
							"items": { "$ref": "#/definitions/NetflowDataBase" }
						}
					}
				}
			],
			"x-discriminator-value": "netflow"
		},
		"DeviceDataSourceInstance": {
			"type": "object",
			"required": [ "displayName", "wildValue" ],
			"properties": {
				"isUNCInstance": {
					"description": "Whether or not UNC Monitoring enabled for device",
					"type": "boolean",
					"example": true
				},
				"stopMonitoring": {
					"description": "Whether or not monitoring is disabled for the instance",
					"type": "boolean",
					"example": true
				},
				"deviceDataSourceId": {
					"format": "int32",
					"description": "The id of the unique device-datasource the instance is associated with",
					"readOnly": true,
					"type": "integer"
				},
				"displayName": {
					"description": "The instance alias. This is the descriptive name of the instance, and should be unique for the device/datasource combination",
					"type": "string",
					"example": "Ping"
				},
				"wildValue2": {
					"description": "Only used for two dimensional active discovery. When used, during Active Discovery runs, the token ##WILDVALUE## is replaces with the value of ALIAS and the token ##WILDVALUE2## is replaced with the value of the second part alias. This value must be unique for the device/datasource/WILDVALUE combination",
					"type": "string",
					"example": "1"
				},
				"groupId": {
					"format": "int32",
					"description": "The id of the instance group associated with the datasource instance",
					"type": "integer",
					"example": 211.0
				},
				"description": {
					"description": "The description of the datasource instance",
					"type": "string",
					"example": "Ping Test"
				},
				"disableAlerting": {
					"description": "Whether or not alerting is disabled for the instance",
					"type": "boolean",
					"example": true
				},
				"deviceId": {
					"format": "int32",
					"description": "The id of the device the datasource instance is associated with",
					"readOnly": true,
					"type": "integer"
				},
				"deviceDisplayName": {
					"description": "The display name of the device the datasource instance is associated with",
					"readOnly": true,
					"type": "string"
				},
				"systemProperties": {
					"description": "Any instance level system properties assigned to the instance",
					"type": "array",
					"items": { "$ref": "#/definitions/NameAndValue" }
				},
				"autoProperties": {
					"description": "Any instance level auto properties assigned to the instance",
					"type": "array",
					"items": { "$ref": "#/definitions/NameAndValue" }
				},
				"dataSourceId": {
					"format": "int32",
					"description": "The id of the datasource definition that the instance represents",
					"readOnly": true,
					"type": "integer"
				},
				"groupName": {
					"description": "The name of the instance group associated with the datasource instance",
					"readOnly": true,
					"type": "string"
				},
				"customProperties": {
					"description": "Any instance level properties assigned to the instance",
					"type": "array",
					"items": { "$ref": "#/definitions/NameAndValue" }
				},
				"lockDescription": {
					"description": "Whether or not Active Discovery is enabled, and thus whether or not the instance description is editable",
					"type": "boolean",
					"example": true
				},
				"name": {
					"description": "The name of the datasource instance, in the format of: datasourceName-instanceAlias",
					"readOnly": true,
					"type": "string"
				},
				"id": {
					"format": "int32",
					"description": "The Id of the datasource instance",
					"readOnly": true,
					"type": "integer"
				},
				"wildValue": {
					"description": "The variable part of the instance, used to query data from a device. For example, variable part of the SNMP OID tree. This value must be unique for the device/datasource combination, unless two-dimensional active discovery is used",
					"type": "string",
					"example": "1"
				},
				"dataSourceType": {
					"description": "The type of LogicModule, e.g. DS (datasource)",
					"readOnly": true,
					"type": "string"
				}
			}
		},
		"AwsSqsCollectorAttribute": {
			"allOf": [
				{ "$ref": "#/definitions/CollectorAttribute" },
				{
					"type": "object",
					"properties": {
						"awsSqsMessageSize": {
							"format": "int32",
							"type": "integer"
						},
						"awsSqsMessageNum": {
							"format": "int32",
							"type": "integer"
						}
					}
				}
			],
			"x-discriminator-value": "awssqs"
		},
		"IPMIAutoDiscoveryMethod": {
			"allOf": [
				{ "$ref": "#/definitions/AutoDiscoveryMethod" },
				{
					"type": "object",
					"properties": { "method": { "type": "string" } }
				}
			],
			"x-discriminator-value": "ad_ipmi"
		},
		"PieChartWidgetData": {
			"allOf": [
				{ "$ref": "#/definitions/WidgetData" },
				{
					"type": "object",
					"properties": {
						"maxSlicesCanBeShown": {
							"format": "int32",
							"readOnly": true,
							"type": "integer"
						},
						"data": {
							"readOnly": true,
							"type": "array",
							"items": { "$ref": "#/definitions/PieChartData" }
						},
						"hideZeroPercentSlices": { "type": "boolean" },
						"groupRemainingAsOthers": {
							"readOnly": true,
							"type": "boolean"
						}
					}
				}
			],
			"x-discriminator-value": "piechart"
		},
		"ReportPaginationResponse": {
			"type": "object",
			"properties": {
				"total": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"searchId": {
					"readOnly": true,
					"type": "string"
				},
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/ReportBase" }
				}
			}
		},
		"EventSource": {
			"type": "object",
			"required": [ "alertEffectiveIval", "id", "name" ],
			"properties": {
				"suppressDuplicatesES": {
					"description": "Whether or not duplicate alerts should be suppressed at eventsource level",
					"type": "boolean"
				},
				"alertSubjectTemplate": {
					"description": "The alert message subject for the EventSource",
					"type": "string"
				},
				"alertLevel": {
					"description": "The default alert level: warn | error |critical",
					"type": "string"
				},
				"description": {
					"description": "The description for the LMModule",
					"type": "string"
				},
				"appliesTo": {
					"description": "The Applies To for the LMModule",
					"type": "string"
				},
				"technology": {
					"description": "The Technical Notes for the LMModule",
					"type": "string"
				},
				"filters": {
					"description": "The filters for the EventSource",
					"type": "array",
					"items": { "$ref": "#/definitions/RestEventSourceFilter" }
				},
				"version": {
					"format": "int64",
					"description": "The epoch time of the last update to the EventSource",
					"readOnly": true,
					"type": "integer"
				},
				"collector": {
					"description": "The EventSource type: logfile | snmptrap | syslog | wineventlog | scriptevent",
					"type": "string"
				},
				"tags": {
					"description": "The Tags for the LMModule",
					"type": "string"
				},
				"alertBodyTemplate": {
					"description": "The alert message body for the EventSource",
					"type": "string"
				},
				"name": {
					"description": "The name of the EventSource",
					"type": "string"
				},
				"clearAfterAck": {
					"description": "Whether or not the alert should clear after acknowledgement",
					"type": "boolean"
				},
				"id": {
					"format": "int32",
					"description": "The ID of the LMModule",
					"readOnly": true,
					"type": "integer"
				},
				"alertEffectiveIval": {
					"format": "int32",
					"description": "The time in minutes after which the alert should clear",
					"type": "integer"
				},
				"group": {
					"description": "The group the LMModule is in",
					"type": "string"
				}
			},
			"discriminator": "collector"
		},
		"SiteMonitorCheckpoint": {
			"type": "object",
			"required": [ "description" ],
			"properties": {
				"geoInfo": {
					"readOnly": true,
					"type": "string"
				},
				"displayPrio": {
					"format": "int32",
					"type": "integer"
				},
				"name": {
					"readOnly": true,
					"type": "string"
				},
				"isEnabledInRoot": {
					"readOnly": true,
					"type": "boolean"
				},
				"description": { "type": "string" },
				"id": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				}
			}
		},
		"DatasourcePaginationResponse": {
			"type": "object",
			"properties": {
				"total": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"searchId": {
					"readOnly": true,
					"type": "string"
				},
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/DataSource" }
				}
			}
		},
		"DynamicTableWidgetColumn": {
			"type": "object",
			"required": [ "columnName", "dataPointId" ],
			"properties": {
				"rpn": {
					"description": "The expression in this field will be performed on the datapoint. The Column name should be referenced as the datapoint",
					"type": "string"
				},
				"dataPointName": {
					"description": "The name of the datapoint",
					"readOnly": true,
					"type": "string"
				},
				"displayType": {
					"description": "The display type, it includes three options: raw|percent|colorBar",
					"type": "string"
				},
				"minValue": {
					"format": "double",
					"description": "The minimum value of the table widget",
					"type": "number"
				},
				"dataPointId": {
					"format": "int32",
					"description": "The id of the datapoint",
					"type": "integer"
				},
				"unitLabel": {
					"description": "The unit label",
					"type": "string"
				},
				"maxValue": {
					"format": "double",
					"description": "The maximum value of the table widget",
					"type": "number"
				},
				"colorThresholds": {
					"description": "The threshold of color changes",
					"type": "array",
					"items": { "$ref": "#/definitions/ColorThreshold" }
				},
				"columnName": {
					"description": "The name for the column",
					"type": "string"
				},
				"enableForecast": {
					"description": "Whether or not forecasting is enabled",
					"type": "boolean"
				},
				"roundingDecimal": {
					"format": "int32",
					"description": "The number of decimal points to round the value to. Options are 0, 1 and 2",
					"type": "integer"
				}
			}
		},
		"AwsEC2ReservedInstanceCollectorAttribute": {
			"allOf": [
				{ "$ref": "#/definitions/CollectorAttribute" },
				{
					"type": "object",
					"properties": {
						"period": {
							"format": "int32",
							"type": "integer"
						}
					}
				}
			],
			"x-discriminator-value": "awsec2reservedinstance"
		},
		"GraphPlotLine": {
			"type": "object",
			"properties": {
				"colorName": {
					"readOnly": true,
					"type": "string"
				},
				"std": {
					"readOnly": true,
					"type": "object"
				},
				"visible": {
					"readOnly": true,
					"type": "boolean"
				},
				"color": {
					"readOnly": true,
					"type": "string"
				},
				"data": {
					"readOnly": true,
					"type": "array",
					"items": { "type": "object" }
				},
				"max": {
					"readOnly": true,
					"type": "object"
				},
				"legend": {
					"readOnly": true,
					"type": "string"
				},
				"description": {
					"readOnly": true,
					"type": "string"
				},
				"label": {
					"readOnly": true,
					"type": "string"
				},
				"type": {
					"readOnly": true,
					"type": "string"
				},
				"min": {
					"readOnly": true,
					"type": "object"
				},
				"avg": {
					"readOnly": true,
					"type": "object"
				},
				"decimal": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"useYMax": {
					"readOnly": true,
					"type": "boolean"
				}
			}
		},
		"DeviceDatasourceInstanceGroupPaginationResponse": {
			"type": "object",
			"properties": {
				"total": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"searchId": {
					"readOnly": true,
					"type": "string"
				},
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/DeviceDataSourceInstanceGroup" }
				}
			}
		},
		"HostMetricsReport": {
			"allOf": [
				{ "$ref": "#/definitions/ReportBase" },
				{
					"type": "object",
					"required": [ "hostsValType", "isBase1024", "metrics", "rowFormat", "sortedBy", "top10Only" ],
					"properties": {
						"sortedBy": {
							"description": "host | instance | metric\nhost: Information displayed in the report will be sorted by device\ninstance: Information displayed in the report will be sorted by instance\nmetric: Information displayed in the report will be sorted by datapoint (metric)",
							"type": "string"
						},
						"hostsValType": {
							"description": "host | group. The type of entities specified in the hostsVal field",
							"type": "string"
						},
						"dateRange": {
							"description": "The Time Range configured for the report: Last 2 hours | Last 24 hours | Last calendar day | Last 7 days | Last 14 days | Last 30 days | Last calendar month | Last 365 days | Any custom date range in this format: YYYY-MM-dd hh:mm TO YYYY-MM-dd hh:mm",
							"type": "string"
						},
						"hostsVal": {
							"description": "The name of the devices OR groups selected for the report, where multiple entities are separated by commas. Glob expressions are supported",
							"type": "string"
						},
						"top10Only": {
							"description": "true | false\nfalse: Metrics will be displayed for all selected devices or groups\ntrue: Metrics will only be displayed for the top ten device or groups",
							"type": "boolean"
						},
						"columns": {
							"description": "The columns that will be displayed in the report. You should specify the columns in the order in which you\u0027d like them to be displayed. All column names need to be included in this object, but each column should have an associated isHidden field that indicates whether it is displayed or not",
							"type": "array",
							"items": { "$ref": "#/definitions/DynamicColumn" }
						},
						"isBase1024": {
							"description": "true | false\nfalse: Scale the number using using default 1000 \ntrue: Scale the number using 1024",
							"type": "boolean"
						},
						"rowFormat": {
							"format": "int32",
							"description": "0 | 1 | 2 | 3\n0: Text only - metrics will be displayed in a tabular format.\n1: One graph per device - metrics will be displayed in a tabular format and one graph will be displayed per device.\n2: One graph per instance - metrics will be displayed in a tabular format and one graph will be displayed per instance.\n3: One graph per datapoint - metrics will be displayed in a tabular format and one graph will be displayed per datapoint.",
							"type": "integer"
						},
						"metrics": {
							"description": "The datapoint or calculation on a datapoint that will be included in the report, where each datapoint/calculation is specified by three fields: dataSourceId, instances (glob is okay) and metric (no glob)",
							"type": "array",
							"items": { "$ref": "#/definitions/Metric" }
						}
					}
				}
			],
			"x-discriminator-value": "host metric trends"
		},
		"WebsiteSDTHistoryPaginationResponse": {
			"type": "object",
			"properties": {
				"total": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"searchId": {
					"readOnly": true,
					"type": "string"
				},
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/SDTHistory" }
				}
			}
		},
		"TableWidget": {
			"allOf": [
				{ "$ref": "#/definitions/Widget" },
				{
					"type": "object",
					"required": [ "columns", "rows" ],
					"properties": {
						"columns": {
							"type": "array",
							"items": { "$ref": "#/definitions/TableWidgetColumn" }
						},
						"forecast": { "$ref": "#/definitions/TableWidgetForecastConfiguration" },
						"rows": {
							"type": "array",
							"items": { "$ref": "#/definitions/TableWidgetRow" }
						}
					}
				}
			],
			"x-discriminator-value": "table"
		},
		"NMapNetscan": {
			"allOf": [
				{ "$ref": "#/definitions/Netscan" },
				{
					"type": "object",
					"required": [ "ports", "subnet" ],
					"properties": {
						"subnet": {
							"description": "The subnet to scan for nmap scans",
							"type": "string",
							"example": "10.35.41.1-10.35.41.254"
						},
						"ddr": {
							"description": "Information related to including / excluding discovered devices in / from monitoring",
							"$ref": "#/definitions/NMapDDR"
						},
						"credentials": {
							"description": "The credentials to be used for the scan",
							"$ref": "#/definitions/NMapNetscanPolicyCredential",
							"example": "2"
						},
						"exclude": {
							"description": "The subnet to exclude from scanning from nmap scans",
							"type": "string",
							"example": "10.35.41.1-10.35.41.254"
						},
						"ports": {
							"description": "The ports that should be used in the Netscan",
							"$ref": "#/definitions/NetscanPorts"
						}
					}
				}
			],
			"x-discriminator-value": "nmap"
		},
		"WebsiteItemConfig": {
			"type": "object",
			"required": [ "website", "websiteGroup" ],
			"properties": {
				"website": { "type": "string" },
				"excludeSDT": { "type": "boolean" },
				"websiteGroup": { "type": "string" }
			}
		},
		"DataSourceOverviewGraph": {
			"type": "object",
			"properties": {
				"base1024": { "type": "boolean" },
				"timeScale": { "type": "string" },
				"maxValue": { "type": "object" },
				"displayPrio": {
					"format": "int32",
					"type": "integer"
				},
				"aggregated": { "type": "boolean" },
				"title": { "type": "string" },
				"virtualDataPoints": {
					"type": "array",
					"items": { "$ref": "#/definitions/GraphVirtualDataPoint" }
				},
				"minValue": { "type": "object" },
				"name": { "type": "string" },
				"width": {
					"format": "int32",
					"type": "integer"
				},
				"dataPoints": {
					"type": "array",
					"items": { "$ref": "#/definitions/OverviewGraphDataPoint" }
				},
				"verticalLabel": { "type": "string" },
				"id": {
					"format": "int32",
					"type": "integer"
				},
				"rigid": { "type": "boolean" },
				"lines": {
					"type": "array",
					"items": { "$ref": "#/definitions/GraphLine" }
				},
				"height": {
					"format": "int32",
					"type": "integer"
				}
			}
		},
		"TableWidgetDataPoint": {
			"type": "object",
			"required": [ "dataPointId", "dataSourceId" ],
			"properties": {
				"dataSourceId": {
					"format": "int32",
					"type": "integer"
				},
				"dataPointName": { "type": "string" },
				"dataPointId": {
					"format": "int32",
					"type": "integer"
				},
				"dataSourceFullName": { "type": "string" },
				"isMultiple": { "type": "boolean" }
			}
		},
		"JMXCollectorAttribute": {
			"allOf": [
				{ "$ref": "#/definitions/CollectorAttribute" },
				{
					"type": "object",
					"properties": {
						"queryUrl": { "type": "string" },
						"ip": {
							"readOnly": true,
							"type": "string"
						}
					}
				}
			],
			"x-discriminator-value": "jmx"
		},
		"AwsEc2ServiceLimitsCollectorAttribute": {
			"allOf": [
				{ "$ref": "#/definitions/CollectorAttribute" },
				{
					"type": "object",
					"properties": {
						"period": {
							"format": "int32",
							"type": "integer"
						}
					}
				}
			],
			"x-discriminator-value": "awsec2servicelimits"
		},
		"WMICollectorAttribute": {
			"allOf": [
				{ "$ref": "#/definitions/CollectorAttribute" },
				{
					"type": "object",
					"properties": {
						"methodInputs": { "type": "string" },
						"ip": {
							"readOnly": true,
							"type": "string"
						},
						"namespace": { "type": "string" },
						"methodName": { "type": "string" },
						"targetPath": { "type": "string" },
						"queryClass": { "type": "string" },
						"queryIndex": { "type": "string" },
						"queryValue": { "type": "string" },
						"type": { "type": "string" }
					}
				}
			],
			"x-discriminator-value": "wmi"
		},
		"OpsNoteScope": {
			"type": "object",
			"required": [ "type" ],
			"properties": {
				"type": {
					"type": "string",
					"example": "device"
				}
			},
			"discriminator": "type"
		},
		"NetflowApplication": {
			"allOf": [
				{ "$ref": "#/definitions/NetflowDataBase" },
				{
					"type": "object",
					"properties": {
						"firstEpochInSec": {
							"format": "int64",
							"readOnly": true,
							"type": "integer"
						},
						"protocol": {
							"readOnly": true,
							"type": "string"
						},
						"sourceMBytes": {
							"format": "double",
							"readOnly": true,
							"type": "number"
						},
						"percentUsage": {
							"format": "double",
							"readOnly": true,
							"type": "number"
						},
						"port": {
							"format": "int32",
							"readOnly": true,
							"type": "integer"
						},
						"lastEpochInSec": {
							"format": "int64",
							"readOnly": true,
							"type": "integer"
						},
						"destinationMBytes": {
							"format": "double",
							"readOnly": true,
							"type": "number"
						},
						"IP": {
							"readOnly": true,
							"type": "string"
						},
						"usage": {
							"format": "double",
							"readOnly": true,
							"type": "number"
						},
						"dns": {
							"readOnly": true,
							"type": "string"
						},
						"flowCount": {
							"format": "int64",
							"readOnly": true,
							"type": "integer"
						},
						"clientCount": {
							"format": "int32",
							"readOnly": true,
							"type": "integer"
						}
					}
				}
			],
			"x-discriminator-value": "application"
		},
		"DataPumpCollectorAttribute": {
			"allOf": [
				{ "$ref": "#/definitions/CollectorAttribute" },
				{
					"type": "object",
					"properties": {}
				}
			],
			"x-discriminator-value": "datapump"
		},
		"HttpAutoDiscoveryMethod": {
			"allOf": [
				{ "$ref": "#/definitions/AutoDiscoveryMethod" },
				{
					"type": "object",
					"required": [ "caseSensitive", "followRedirect", "ports", "regex", "uri", "useSSL" ],
					"properties": {
						"regex": { "type": "string" },
						"caseSensitive": { "type": "boolean" },
						"followRedirect": { "type": "boolean" },
						"ports": { "type": "string" },
						"uri": { "type": "string" },
						"useSSL": { "type": "boolean" }
					}
				}
			],
			"x-discriminator-value": "ad_http"
		},
		"DaysUntilAlert": {
			"type": "object",
			"properties": {
				"severity": { "type": "string" },
				"forecastDay": {
					"format": "int32",
					"type": "integer"
				},
				"forecastPeriodInDays": {
					"format": "int32",
					"type": "integer"
				},
				"isWaitingForecastResults": { "type": "boolean" }
			}
		},
		"MongoAutoDiscoveryMethod": {
			"allOf": [
				{ "$ref": "#/definitions/AutoDiscoveryMethod" },
				{
					"type": "object",
					"required": [ "listDB", "ports" ],
					"properties": {
						"listDB": { "type": "boolean" },
						"ports": { "type": "string" }
					}
				}
			],
			"x-discriminator-value": "ad_mongo"
		},
		"BatchJobExecutionItem": {
			"type": "object",
			"properties": {
				"startedOnLocal": {
					"readOnly": true,
					"type": "string"
				},
				"finishedOnLocal": {
					"readOnly": true,
					"type": "string"
				},
				"userData": {
					"readOnly": true,
					"type": "string"
				},
				"stdout": {
					"readOnly": true,
					"type": "string"
				},
				"bjName": {
					"readOnly": true,
					"type": "string"
				},
				"alertLevel": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"deviceBatchJobId": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"stderr": {
					"readOnly": true,
					"type": "string"
				},
				"deviceDisplayName": {
					"readOnly": true,
					"type": "string"
				},
				"cmdline": {
					"readOnly": true,
					"type": "string"
				},
				"exitCode": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"id": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"executionNo": {
					"format": "int64",
					"readOnly": true,
					"type": "integer"
				},
				"finishedOn": {
					"format": "int64",
					"readOnly": true,
					"type": "integer"
				},
				"startedOn": {
					"format": "int64",
					"readOnly": true,
					"type": "integer"
				}
			}
		},
		"ReportGroup": {
			"type": "object",
			"properties": {
				"matchedReportCount": {
					"format": "int32",
					"type": "integer"
				},
				"userPermission": { "type": "string" },
				"name": { "type": "string" },
				"description": { "type": "string" },
				"id": {
					"format": "int32",
					"type": "integer"
				},
				"reportsCount": {
					"format": "int32",
					"type": "integer"
				}
			}
		},
		"ColumnHeader": {
			"type": "object",
			"properties": {
				"needForecast": {
					"readOnly": true,
					"type": "boolean"
				},
				"displayType": {
					"readOnly": true,
					"type": "string"
				},
				"unitLabel": {
					"readOnly": true,
					"type": "string"
				},
				"name": {
					"readOnly": true,
					"type": "string"
				}
			}
		},
		"LogFileEventSource": {
			"allOf": [
				{ "$ref": "#/definitions/EventSource" },
				{
					"type": "object",
					"properties": {
						"logFiles": {
							"type": "array",
							"items": { "$ref": "#/definitions/LogFile" }
						}
					}
				}
			],
			"x-discriminator-value": "logfile"
		},
		"DeviceGroupDatasourcePaginationResponse": {
			"type": "object",
			"properties": {
				"total": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"searchId": {
					"readOnly": true,
					"type": "string"
				},
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/DeviceGroupDataSource" }
				}
			}
		},
		"GenerateReportRequest": {
			"type": "object",
			"properties": {
				"withAdminId": {
					"format": "int32",
					"description": "Generate the report with the admin. 0 mean current user",
					"readOnly": true,
					"type": "integer"
				},
				"reportId": {
					"format": "int32",
					"description": "The id of the report to run",
					"readOnly": true,
					"type": "integer",
					"example": 998.0
				},
				"receiveEmails": {
					"description": "The email addresses that LogicMonitor should send the report to, separated by commas",
					"type": "string",
					"example": "bob@logicmonitor.com"
				}
			}
		},
		"SNMPCollectorAttribute": {
			"allOf": [
				{ "$ref": "#/definitions/CollectorAttribute" },
				{
					"type": "object",
					"properties": {
						"ip": {
							"readOnly": true,
							"type": "string"
						}
					}
				}
			],
			"x-discriminator-value": "snmp"
		},
		"Alert": {
			"type": "object",
			"properties": {
				"resourceId": {
					"format": "int32",
					"description": "The device specific LogicModule Id",
					"readOnly": true,
					"type": "integer"
				},
				"instanceName": {
					"description": "The name of the instance in alert",
					"readOnly": true,
					"type": "string"
				},
				"monitorObjectId": {
					"format": "int32",
					"description": "The id of the object that the alert is associated with",
					"readOnly": true,
					"type": "integer"
				},
				"endEpoch": {
					"format": "int64",
					"description": "The time (in epoch format) that the alert ended",
					"readOnly": true,
					"type": "integer"
				},
				"rule": {
					"description": "The rule the alert matches",
					"readOnly": true,
					"type": "string"
				},
				"threshold": {
					"description": "The threshold associated with the object in alert",
					"readOnly": true,
					"type": "string"
				},
				"type": {
					"description": "The type of alert",
					"readOnly": true,
					"type": "string"
				},
				"startEpoch": {
					"format": "int64",
					"description": "The time (in epoch format) that the alert started",
					"readOnly": true,
					"type": "integer"
				},
				"enableAnomalyAlertGeneration": { "type": "string" },
				"internalId": {
					"description": "The internal id for the alert",
					"readOnly": true,
					"type": "string"
				},
				"ackComment": {
					"description": "The comment submitted with the acknowledgement",
					"readOnly": true,
					"type": "string"
				},
				"monitorObjectName": {
					"description": "The name of the object that the alert is associated with",
					"readOnly": true,
					"type": "string"
				},
				"dataPointName": {
					"description": "The name of the datapoint in alert",
					"readOnly": true,
					"type": "string"
				},
				"instanceId": {
					"format": "int32",
					"description": "The id of the instance in alert",
					"readOnly": true,
					"type": "integer"
				},
				"dataPointId": {
					"format": "int32",
					"description": "The id of the datapoint in alert",
					"readOnly": true,
					"type": "integer"
				},
				"nextRecipient": {
					"format": "int32",
					"description": "The next recipient in the escalation chain for this alert",
					"readOnly": true,
					"type": "integer"
				},
				"id": {
					"description": "The alert id",
					"readOnly": true,
					"type": "string"
				},
				"detailMessage": {
					"description": "The alert message, if needMessage\u003dtrue is included in the query parameters",
					"readOnly": true,
					"type": "object"
				},
				"ruleId": {
					"format": "int32",
					"description": "The id of the rule the alert matches",
					"readOnly": true,
					"type": "integer"
				},
				"alertValue": {
					"description": "The value that triggered the alert",
					"readOnly": true,
					"type": "string"
				},
				"ackedBy": {
					"description": "The user that acknowledged the alert",
					"readOnly": true,
					"type": "string"
				},
				"severity": {
					"format": "int32",
					"description": "The alert severity, where 2\u003dwarning, 3\u003derror and 4\u003dcritical",
					"readOnly": true,
					"type": "integer"
				},
				"sdted": {
					"description": "Whether or not the alert was triggered during an SDT",
					"readOnly": true,
					"type": "boolean"
				},
				"ackedEpoch": {
					"format": "int64",
					"description": "The time (in epoch format) that the alert was acknowledged",
					"readOnly": true,
					"type": "integer"
				},
				"chain": {
					"description": "The escalation chain the alert was routed to",
					"readOnly": true,
					"type": "string"
				},
				"SDT": {
					"description": "The active SDT, if one exists",
					"readOnly": true,
					"type": "object"
				},
				"subChainId": {
					"format": "int32",
					"description": "The id of the sub time based chain",
					"readOnly": true,
					"type": "integer"
				},
				"enableAnomalyAlertSuppression": { "type": "string" },
				"receivedList": {
					"description": "The recipients that have received the alert",
					"readOnly": true,
					"type": "string"
				},
				"serviceMembers": {
					"description": "Service member name and value",
					"readOnly": true,
					"type": "object"
				},
				"monitorObjectType": {
					"readOnly": true,
					"type": "string"
				},
				"customColumns": {
					"description": "The property or token values that should display with the alert details. Note that if referencing tokens, you\u0027ll need to URL encode the # symbol.",
					"readOnly": true,
					"type": "object"
				},
				"acked": {
					"description": "Whether or not the alert has been acknowledged",
					"readOnly": true,
					"type": "boolean"
				},
				"resourceTemplateType": {
					"description": "The type of the logicmodule in alert",
					"readOnly": true,
					"type": "string"
				},
				"clearValue": {
					"description": "The value that cleared the alert",
					"readOnly": true,
					"type": "string"
				},
				"instanceDescription": {
					"description": "The description of the instance in alert",
					"readOnly": true,
					"type": "string"
				},
				"monitorObjectGroups": {
					"description": "Information about the groups the object is a member of",
					"readOnly": true,
					"type": "object"
				},
				"chainId": {
					"format": "int32",
					"description": "The id of the escalation chain the alert was routed to",
					"readOnly": true,
					"type": "integer"
				},
				"resourceTemplateId": {
					"format": "int32",
					"description": "The id of the datasource in alert",
					"readOnly": true,
					"type": "integer"
				},
				"cleared": {
					"description": "Whether or not the alert has cleared",
					"readOnly": true,
					"type": "boolean"
				},
				"resourceTemplateName": {
					"description": "The name of the datasource in alert",
					"readOnly": true,
					"type": "string"
				}
			}
		},
		"AWSNetscan": {
			"allOf": [
				{ "$ref": "#/definitions/Netscan" },
				{
					"type": "object",
					"properties": {
						"accessId": {
							"readOnly": true,
							"type": "string"
						},
						"accountId": {
							"readOnly": true,
							"type": "string"
						},
						"assumedRoleArn": {
							"readOnly": true,
							"type": "string"
						},
						"secretKey": {
							"readOnly": true,
							"type": "string"
						},
						"rootName": {
							"readOnly": true,
							"type": "string"
						},
						"groupId": {
							"format": "int32",
							"readOnly": true,
							"type": "integer"
						},
						"awsAZ": {
							"readOnly": true,
							"type": "string"
						},
						"externalId": {
							"readOnly": true,
							"type": "string"
						},
						"awsService": {
							"readOnly": true,
							"type": "string"
						}
					}
				}
			],
			"x-discriminator-value": "aws"
		},
		"NetflowDataBase": {
			"type": "object",
			"properties": {
				"dataType": {
					"readOnly": true,
					"type": "string"
				}
			},
			"discriminator": "dataType"
		},
		"WebResource": {
			"type": "object",
			"required": [ "URL", "type" ],
			"properties": {
				"type": {
					"description": "html | iframe",
					"type": "string"
				},
				"URL": {
					"description": "If type \u003d html this should be a url, if type \u003d iframe this should be an iframe",
					"type": "string"
				}
			}
		},
		"MemcachedCollectorAttribute": {
			"allOf": [
				{ "$ref": "#/definitions/CollectorAttribute" },
				{
					"type": "object",
					"properties": {
						"port": { "type": "string" },
						"ip": { "type": "string" }
					}
				}
			],
			"x-discriminator-value": "memcached"
		},
		"DataPoint": {
			"type": "object",
			"required": [ "name" ],
			"properties": {
				"alertForNoData": {
					"format": "int32",
					"type": "integer"
				},
				"maxValue": { "type": "string" },
				"dataType": {
					"format": "int32",
					"type": "integer"
				},
				"postProcessorMethod": { "type": "string" },
				"postProcessorParam": { "type": "string" },
				"maxDigits": {
					"format": "int32",
					"type": "integer"
				},
				"rawDataFieldName": { "type": "string" },
				"description": { "type": "string" },
				"alertClearTransitionInterval": {
					"format": "int32",
					"type": "integer"
				},
				"userParam3": { "type": "string" },
				"userParam2": { "type": "string" },
				"type": {
					"format": "int32",
					"type": "integer"
				},
				"alertExprNote": { "type": "string" },
				"dataSourceId": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"minValue": { "type": "string" },
				"alertBody": { "type": "string" },
				"userParam1": { "type": "string" },
				"name": { "type": "string" },
				"alertSubject": { "type": "string" },
				"id": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"alertTransitionInterval": {
					"format": "int32",
					"type": "integer"
				},
				"alertExpr": { "type": "string" }
			}
		},
		"PerfmonCollectorAttribute": {
			"allOf": [
				{ "$ref": "#/definitions/CollectorAttribute" },
				{
					"type": "object",
					"properties": {
						"counters": {
							"type": "array",
							"items": { "$ref": "#/definitions/PerfmonCounter" }
						}
					}
				}
			],
			"x-discriminator-value": "perfmon"
		},
		"DeviceNOCItem": {
			"allOf": [
				{ "$ref": "#/definitions/NOCItemBase" },
				{
					"type": "object",
					"required": [ "dataPointName", "dataSourceDisplayName", "deviceDisplayName", "deviceGroupFullPath", "instanceName", "name" ],
					"properties": {
						"dataPointName": { "type": "string" },
						"instanceName": { "type": "string" },
						"name": { "type": "string" },
						"dataSourceDisplayName": { "type": "string" },
						"groupBy": { "type": "string" },
						"deviceGroupFullPath": { "type": "string" },
						"deviceDisplayName": { "type": "string" }
					}
				}
			],
			"x-discriminator-value": "device"
		},
		"CollectorAttribute": {
			"type": "object",
			"required": [ "name" ],
			"properties": { "name": { "type": "string" } },
			"discriminator": "name"
		},
		"GaugeWidget": {
			"allOf": [
				{ "$ref": "#/definitions/Widget" },
				{
					"type": "object",
					"required": [ "dataPoint" ],
					"properties": {
						"minValue": {
							"format": "double",
							"description": "The minimum value of the gauge widget, displayed on the left side of the gauge",
							"type": "number"
						},
						"displayType": {
							"format": "int32",
							"description": "Display as \"Raw Value\" or \"Percent\"",
							"type": "integer"
						},
						"peakTimeRange": {
							"description": "The time range over which the peak value is determined",
							"type": "string"
						},
						"legend": {
							"description": "The legend for the widget, displayed underneath the gauge",
							"type": "string"
						},
						"maxValue": {
							"format": "double",
							"description": "The maximum value of the gauge widget, displayed on the right side of the gauge",
							"type": "number"
						},
						"showPeak": {
							"description": "Whether or not the peak value is displayed on the gauge widget",
							"type": "boolean"
						},
						"dataPoint": {
							"description": "The datapoint whose value is displayed in the gauge widget",
							"$ref": "#/definitions/GaugeDataPoint"
						},
						"displayUnit": {
							"description": "The unit for the raw value",
							"type": "string"
						},
						"colorThresholds": {
							"description": "The threshold of Gauge color changes",
							"type": "array",
							"items": { "$ref": "#/definitions/ColorThreshold" }
						}
					}
				}
			],
			"x-discriminator-value": "gauge"
		},
		"InheritanceProp": {
			"type": "object",
			"properties": {
				"fullpath": {
					"readOnly": true,
					"type": "string"
				},
				"id": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"type": {
					"readOnly": true,
					"type": "string"
				},
				"value": {
					"readOnly": true,
					"type": "string"
				}
			}
		},
		"NetflowReport": {
			"allOf": [
				{ "$ref": "#/definitions/ReportBase" },
				{
					"type": "object",
					"required": [ "hostsVal" ],
					"properties": {
						"dateRange": {
							"description": "The Time Range configured for the report: Last 2 hours | Last 24 hours | Last calendar day | Last 7 days | Last 14 days | Last 30 days | Last calendar month | Last 365 days | Any custom date range in this format: YYYY-MM-dd hh:mm TO YYYY-MM-dd hh:mm",
							"type": "string"
						},
						"hostsVal": {
							"description": "The devices OR groups (full path) selected for the report, where multiple entities are separated by commas. Glob is accepted",
							"type": "string"
						},
						"includeDNSMappings": {
							"description": "Whether include DNS mappings or not",
							"type": "boolean"
						}
					}
				}
			],
			"x-discriminator-value": "netflow device metric"
		},
		"HostInventoryReport": {
			"allOf": [
				{ "$ref": "#/definitions/ReportBase" },
				{
					"type": "object",
					"required": [ "properties" ],
					"properties": {
						"sortedBy": {
							"description": "Specify a property that is included in the \u0027properties\u0027 list that should be used to sort the devices/groups displayed in the report",
							"type": "string"
						},
						"hostsValType": {
							"description": "host | group. The type of entities specified in the hostsVal field",
							"type": "string"
						},
						"hostsVal": {
							"description": "The devices OR groups (full path) selected for the report, where multiple entities are separated by commas",
							"type": "string"
						},
						"metrics": {
							"description": "The instances will be included in the report",
							"type": "array",
							"items": { "$ref": "#/definitions/HostInventoryMetric" }
						},
						"properties": {
							"description": "The properties that should be displayed in the report",
							"type": "array",
							"items": { "type": "string" }
						}
					}
				}
			],
			"x-discriminator-value": "host inventory"
		},
		"GcpBillingCollectorAttributeV2": {
			"allOf": [
				{ "$ref": "#/definitions/CollectorAttribute" },
				{
					"type": "object",
					"properties": {}
				}
			]
		},
		"DeviceDataSourceAssociatedInstance": {
			"type": "object",
			"properties": {
				"name": { "type": "string" },
				"alias": { "type": "string" },
				"id": {
					"format": "int32",
					"type": "integer"
				}
			}
		},
		"AwsCloudWatchCollectorAttribute": {
			"allOf": [
				{ "$ref": "#/definitions/CollectorAttribute" },
				{
					"type": "object",
					"properties": {
						"period": {
							"format": "int32",
							"type": "integer"
						}
					}
				}
			],
			"x-discriminator-value": "awscloudwatch"
		},
		"MapItemInfo": {
			"type": "object",
			"properties": {
				"alertStatus": {
					"readOnly": true,
					"type": "string"
				},
				"displayName": {
					"readOnly": true,
					"type": "string"
				},
				"formattedLocation": {
					"readOnly": true,
					"type": "string"
				},
				"latitude": {
					"readOnly": true,
					"type": "string"
				},
				"description": {
					"readOnly": true,
					"type": "string"
				},
				"type": {
					"readOnly": true,
					"type": "string"
				},
				"sdtStatus": {
					"readOnly": true,
					"type": "string"
				},
				"activeStatus": {
					"readOnly": true,
					"type": "string"
				},
				"name": {
					"readOnly": true,
					"type": "string"
				},
				"subType": {
					"readOnly": true,
					"type": "string"
				},
				"location": {
					"readOnly": true,
					"type": "string"
				},
				"id": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"longitude": {
					"readOnly": true,
					"type": "string"
				}
			}
		},
		"CollectorSDT": {
			"allOf": [
				{ "$ref": "#/definitions/SDT" },
				{
					"type": "object",
					"required": [ "collectorId" ],
					"properties": {
						"collectorDescription": {
							"description": "The description of the collector that the SDT will be associated with",
							"readOnly": true,
							"type": "string"
						},
						"collectorId": {
							"format": "int32",
							"description": "The id of the collector that the SDT will be associated with",
							"type": "integer"
						}
					}
				}
			],
			"x-discriminator-value": "collectorsdt"
		},
		"AwsEC2ReservedInstanceCoverageDiscoveryMethod": {
			"allOf": [
				{ "$ref": "#/definitions/AutoDiscoveryMethod" },
				{
					"type": "object",
					"properties": {}
				}
			],
			"x-discriminator-value": "ad_awsec2reservedinstancecoverage"
		},
		"DeviceDataSourceInstanceSDT": {
			"allOf": [
				{ "$ref": "#/definitions/SDT" },
				{
					"type": "object",
					"properties": {
						"dataSourceInstanceId": {
							"format": "int32",
							"description": "The id of the datasource instance that the SDT will be associated with",
							"type": "integer"
						},
						"dataSourceInstanceName": {
							"description": "The name of the datasource instance that the SDT will be associated with",
							"type": "string"
						},
						"deviceId": {
							"format": "int32",
							"description": "The id of the device that the SDT will be associated with",
							"type": "integer"
						},
						"deviceDisplayName": {
							"description": "The name of the device that the SDT will be associated with",
							"type": "string"
						}
					}
				}
			]
		},
		"GraphLine": {
			"type": "object",
			"properties": {
				"colorName": { "type": "string" },
				"dataPointName": { "type": "string" },
				"dataPointId": {
					"format": "int32",
					"type": "integer"
				},
				"legend": { "type": "string" },
				"isVirtualDataPoint": { "type": "boolean" },
				"type": {
					"format": "int32",
					"type": "integer"
				}
			}
		},
		"HostGroupInventoryReport": {
			"allOf": [
				{ "$ref": "#/definitions/ReportBase" },
				{
					"type": "object",
					"required": [ "properties" ],
					"properties": {
						"sortedBy": { "type": "string" },
						"hostGroups": { "type": "string" },
						"includeSubGroups": { "type": "boolean" },
						"properties": {
							"type": "array",
							"items": { "type": "string" }
						}
					}
				}
			],
			"x-discriminator-value": "host group inventory"
		},
		"BatchJobWidgetData": {
			"allOf": [
				{ "$ref": "#/definitions/WidgetData" },
				{
					"type": "object",
					"properties": {
						"items": {
							"readOnly": true,
							"type": "array",
							"items": { "$ref": "#/definitions/BatchJobExecutionItem" }
						}
					}
				}
			],
			"x-discriminator-value": "batchjob"
		},
		"AwsAutoScalingServiceLimitsCollectorAttribute": {
			"allOf": [
				{ "$ref": "#/definitions/CollectorAttribute" },
				{
					"type": "object",
					"properties": {
						"period": {
							"format": "int32",
							"type": "integer"
						}
					}
				}
			],
			"x-discriminator-value": "awsautoscalingservicelimits"
		},
		"RecipientGroup": {
			"type": "object",
			"required": [ "groupName" ],
			"properties": {
				"groupName": {
					"description": "The name of the recipient group",
					"type": "string",
					"example": "Tier 1 Helpdesk"
				},
				"recipients": {
					"description": "The recipients in the group",
					"type": "array",
					"items": { "$ref": "#/definitions/Recipient" }
				},
				"description": {
					"description": "The description of the recipient group",
					"type": "string",
					"example": "Tier 1 Helpdesk"
				},
				"id": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				}
			}
		},
		"DashboardGroupPaginationResponse": {
			"type": "object",
			"properties": {
				"total": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"searchId": {
					"readOnly": true,
					"type": "string"
				},
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/DashboardGroup" }
				}
			}
		},
		"AzureAccountTestResult": {
			"type": "object",
			"properties": {
				"noPermissionServices": {
					"readOnly": true,
					"type": "object"
				},
				"detailLink": {
					"readOnly": true,
					"type": "object"
				}
			}
		},
		"EntityProperty": {
			"type": "object",
			"properties": {
				"inheritList": {
					"type": "array",
					"items": { "$ref": "#/definitions/InheritanceProp" }
				},
				"name": {
					"readOnly": true,
					"type": "string"
				},
				"type": {
					"readOnly": true,
					"type": "string"
				},
				"value": {
					"readOnly": true,
					"type": "string"
				}
			}
		},
		"DynamicTableWidgetRow": {
			"type": "object",
			"properties": {
				"instanceName": {
					"description": "The instances for each column of the row",
					"readOnly": true,
					"type": "string"
				},
				"label": {
					"description": "The label for the row",
					"type": "string"
				},
				"deviceDisplayName": {
					"description": "The display name of the device selected for the row",
					"readOnly": true,
					"type": "string"
				},
				"groupFullPath": {
					"description": "The full path of the group selected for the row",
					"readOnly": true,
					"type": "string"
				}
			}
		},
		"LocationData": {
			"type": "object",
			"properties": {
				"geoInfo": {
					"readOnly": true,
					"type": "string"
				},
				"selected": { "type": "boolean" },
				"smgId": {
					"format": "int32",
					"type": "integer"
				}
			}
		},
		"Ec2DDR": {
			"type": "object",
			"properties": {
				"changeName": { "type": "string" },
				"assignment": {
					"type": "array",
					"items": { "$ref": "#/definitions/Assignment" }
				}
			}
		},
		"DashboardReport": {
			"allOf": [
				{ "$ref": "#/definitions/ReportBase" },
				{
					"type": "object",
					"required": [ "dashboardId", "dateRange" ],
					"properties": {
						"dashboardId": {
							"format": "int32",
							"description": "The id of the source dashboard for the report",
							"type": "integer"
						},
						"dateRange": {
							"description": "The Time Range configured for the report: Last 2 hours | Last 24 hours | Last calendar day | Last 7 days | Last 14 days | Last 30 days | Last calendar month | Last 365 days | Any custom date range in this format: YYYY-MM-dd hh:mm TO YYYY-MM-dd hh:mm",
							"type": "string"
						},
						"displayName": {
							"description": "The name of the dashboard report",
							"type": "string"
						},
						"displayLink": {
							"description": "Whether need to display a link to the real dashboard",
							"type": "boolean"
						},
						"dashboardGroupFullPath": {
							"description": "The full path name of the group of the source dashboard",
							"readOnly": true,
							"type": "string"
						},
						"dashboardName": {
							"description": "The name of the source dashboard for the report",
							"readOnly": true,
							"type": "string"
						}
					}
				}
			],
			"x-discriminator-value": "dashboard"
		},
		"AlertWidgetData": {
			"allOf": [
				{ "$ref": "#/definitions/WidgetData" },
				{
					"type": "object",
					"properties": {
						"total": {
							"format": "int32",
							"readOnly": true,
							"type": "integer"
						},
						"searchId": {
							"readOnly": true,
							"type": "string"
						},
						"items": {
							"readOnly": true,
							"type": "array",
							"items": { "$ref": "#/definitions/Alert" }
						}
					}
				}
			],
			"x-discriminator-value": "alert"
		},
		"CIMAutoDiscoveryMethod": {
			"allOf": [
				{ "$ref": "#/definitions/AutoDiscoveryMethod" },
				{
					"type": "object",
					"required": [ "cimClass", "namespace", "property" ],
					"properties": {
						"cimClass": { "type": "string" },
						"property": { "type": "string" },
						"namespace": { "type": "string" }
					}
				}
			],
			"x-discriminator-value": "ad_cim"
		},
		"NextUpgradeInfo": {
			"type": "object",
			"properties": {
				"upgradeTime": {
					"readOnly": true,
					"type": "string"
				},
				"stable": {
					"readOnly": true,
					"type": "boolean"
				},
				"majorVersion": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"minorVersion": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"mandatory": {
					"readOnly": true,
					"type": "boolean"
				},
				"upgradeTimeEpoch": {
					"format": "int64",
					"readOnly": true,
					"type": "integer"
				}
			}
		},
		"PieChartData": {
			"type": "object",
			"properties": {
				"colorName": {
					"readOnly": true,
					"type": "string"
				},
				"dataPointName": {
					"readOnly": true,
					"type": "string"
				},
				"legend": {
					"readOnly": true,
					"type": "string"
				},
				"value": {
					"format": "double",
					"readOnly": true,
					"type": "number"
				}
			}
		},
		"DatasourceOverviewGraphPaginationResponse": {
			"type": "object",
			"properties": {
				"total": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"searchId": {
					"readOnly": true,
					"type": "string"
				},
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/DataSourceOverviewGraph" }
				}
			}
		},
		"ESXCollectorAttribute": {
			"allOf": [
				{ "$ref": "#/definitions/CollectorAttribute" },
				{
					"type": "object",
					"properties": {
						"counters": {
							"type": "array",
							"items": { "$ref": "#/definitions/DataSourceAttribute" }
						},
						"entity": { "type": "string" }
					}
				}
			],
			"x-discriminator-value": "esx"
		},
		"CollectorGroupPaginationResponse": {
			"type": "object",
			"properties": {
				"total": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"searchId": {
					"readOnly": true,
					"type": "string"
				},
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/CollectorGroup" }
				}
			}
		},
		"ScriptCollectorAttribute": {
			"allOf": [
				{ "$ref": "#/definitions/CollectorAttribute" },
				{
					"type": "object",
					"properties": {
						"groovyScript": { "type": "string" },
						"scriptType": { "type": "string" },
						"windowsScript": { "type": "string" },
						"linuxCmdline": { "type": "string" },
						"linuxScript": { "type": "string" },
						"windowsCmdline": { "type": "string" }
					}
				}
			],
			"x-discriminator-value": "script"
		},
		"Authentication": {
			"type": "object",
			"required": [ "password", "type", "userName" ],
			"properties": {
				"password": { "type": "string" },
				"type": {
					"type": "string",
					"example": "basic"
				},
				"userName": { "type": "string" }
			},
			"discriminator": "type"
		},
		"RestEventSourceFilter": {
			"type": "object",
			"properties": {
				"name": { "type": "string" },
				"comment": { "type": "string" },
				"id": {
					"format": "int32",
					"type": "integer"
				},
				"value": { "type": "string" },
				"operator": { "type": "string" }
			}
		},
		"NetflowGraphWidget": {
			"allOf": [
				{ "$ref": "#/definitions/Widget" },
				{
					"type": "object",
					"required": [ "deviceDisplayName" ],
					"properties": {
						"netflowFilter": { "$ref": "#/definitions/NetflowFilters" },
						"deviceId": {
							"format": "int32",
							"readOnly": true,
							"type": "integer"
						},
						"graph": { "type": "string" },
						"deviceDisplayName": { "type": "string" }
					}
				}
			],
			"x-discriminator-value": "netflowgraph"
		},
		"ItemData": {
			"type": "object",
			"properties": {
				"inSDTAndConfirmedErrorAlert": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"inSDT": {
					"readOnly": true,
					"type": "boolean"
				},
				"inSDTCriticalAlert": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"confirmedWarnAlert": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"entityId": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"type": {
					"readOnly": true,
					"type": "string"
				},
				"criticalAlert": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"resourceTemplateType": {
					"readOnly": true,
					"type": "string"
				},
				"parentId": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"errorAlert": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"confirmedCriticalAlert": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"inSDTWarnAlert": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"inSDTAndConfirmedWarnAlert": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"warnAlert": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"confirmedErrorAlert": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"name": {
					"readOnly": true,
					"type": "string"
				},
				"subType": {
					"readOnly": true,
					"type": "string"
				},
				"inSDTErrorAlert": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"inSDTAndConfirmedCriticalAlert": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				}
			}
		},
		"AwsRedShiftDiscoveryMethod": {
			"allOf": [
				{ "$ref": "#/definitions/AutoDiscoveryMethod" },
				{
					"type": "object",
					"properties": {}
				}
			],
			"x-discriminator-value": "ad_awsredshift"
		},
		"AwsAccountTestResult": {
			"type": "object",
			"properties": {
				"noPermissionServices": {
					"uniqueItems": true,
					"type": "array",
					"items": { "type": "string" }
				},
				"detailLink": { "type": "string" },
				"nonPermissionErrors": {
					"uniqueItems": true,
					"type": "array",
					"items": { "type": "string" }
				}
			}
		},
		"OpsNoteWebsiteScope": {
			"allOf": [
				{ "$ref": "#/definitions/OpsNoteScope" },
				{
					"type": "object",
					"properties": {
						"fullPath": { "type": "string" },
						"websiteName": { "type": "string" },
						"websiteId": {
							"format": "int32",
							"type": "integer",
							"example": 87.0
						},
						"groupId": {
							"format": "int32",
							"type": "integer",
							"example": 74.0
						}
					}
				}
			],
			"x-discriminator-value": "website"
		},
		"DeviceGroupData": {
			"type": "object",
			"properties": {
				"fullPath": {
					"description": "The full path of the ResourceGroup (i.e. if the group \u0027Dev\u0027 is under a parent group named \u0027Production\u0027, the fullPath would be \u0027Production/Dev\u0027",
					"readOnly": true,
					"type": "string"
				},
				"groupType": {
					"description": "The type of ResourceGroup: normal and dynamic ResourceGroups will have groupType\u003dNormal, and AWS groups will have a groupType value of AWS/SERVICE (e.g. AWS/S3)",
					"readOnly": true,
					"type": "string"
				},
				"userPermission": {
					"description": "The permissions for the ResourceGroup that are granted to the user that made this API request",
					"readOnly": true,
					"type": "string"
				},
				"gcpRegionsInfo": {
					"readOnly": true,
					"type": "string"
				},
				"description": {
					"description": "The description of the ResourceGroup",
					"readOnly": true,
					"type": "string"
				},
				"appliesTo": {
					"description": "The Applies to custom query for this group (only for dynamic groups)",
					"readOnly": true,
					"type": "string"
				},
				"awsRegionsInfo": {
					"description": "The number of instances in each AWS region (only applies to AWS groups)",
					"readOnly": true,
					"type": "string"
				},
				"numOfHosts": {
					"format": "int32",
					"description": "The number of total devices, including both AWS and normal devices, that belong to this ResourceGroup (includes normal devices in sub groups)",
					"readOnly": true,
					"type": "integer"
				},
				"name": {
					"description": "The name of the ResourceGroup",
					"readOnly": true,
					"type": "string"
				},
				"numOfDirectSubGroups": {
					"format": "int64",
					"description": "The number of sub-groups that belong only to this ResourceGroup (doesn\u0027t include groups under sub-groups)",
					"readOnly": true,
					"type": "integer"
				},
				"numOfDirectDevices": {
					"format": "int64",
					"description": "The number of AWS and normal devices that belong only to this ResourceGroup (doesn\u0027t include devices in sub-groups)",
					"readOnly": true,
					"type": "integer"
				},
				"id": {
					"format": "int32",
					"description": "The id of the ResourceGroup",
					"readOnly": true,
					"type": "integer"
				},
				"azureRegionsInfo": {
					"description": "The number of instances in each Azure region (only applies to Azure groups)",
					"readOnly": true,
					"type": "string"
				}
			}
		},
		"PropertyMatchRule": {
			"type": "object",
			"properties": {
				"underscore": { "type": "boolean" },
				"caseInsensitive": { "type": "boolean" }
			}
		},
		"DeviceGroup": {
			"type": "object",
			"required": [ "name" ],
			"properties": {
				"fullPath": {
					"description": "The full path of the ResourceGroup (i.e. if the group \u0027Dev\u0027 is under a parent group named \u0027Production\u0027, the fullPath would be \u0027Production/Dev\u0027",
					"readOnly": true,
					"type": "string"
				},
				"groupType": {
					"description": "The type of ResourceGroup: normal and dynamic ResourceGroups will have groupType\u003dNormal, and AWS groups will have a groupType value of AWS/SERVICE (e.g. AWS/S3)",
					"type": "string",
					"example": "Normal"
				},
				"numOfAWSDevices": {
					"format": "int64",
					"description": "The number of AWS devices that belong to this ResourceGroup (includes AWS devices in sub groups)",
					"readOnly": true,
					"type": "integer"
				},
				"description": {
					"description": "The description of the ResourceGroup",
					"type": "string",
					"example": "Linux Servers"
				},
				"appliesTo": {
					"description": "The Applies to custom query for this group (only for dynamic groups)",
					"type": "string",
					"example": "isLinux()"
				},
				"gcpTestResultCode": {
					"format": "int32",
					"description": "The Status code result returned by the transaction that tests the GCP credentials associated with the GCP group",
					"readOnly": true,
					"type": "integer"
				},
				"disableAlerting": {
					"description": "Indicates whether alerting is disabled (true) or enabled (false) for this ResourceGroup",
					"type": "boolean",
					"example": true
				},
				"awsRegionsInfo": {
					"description": "The number of instances in each AWS region (only applies to AWS groups)",
					"readOnly": true,
					"type": "string"
				},
				"createdOn": {
					"format": "int64",
					"description": "The time, in epoch seconds format, that the ResourceGroup was created",
					"readOnly": true,
					"type": "integer"
				},
				"hasNetflowEnabledDevices": {
					"description": "Whether if any Netflow enabled devices in this ResourceGroup",
					"readOnly": true,
					"type": "boolean"
				},
				"numOfAzureDevices": {
					"format": "int64",
					"description": "The number of Azure devices that belong to this ResourceGroup (includes Azure devices in sub groups)",
					"readOnly": true,
					"type": "integer"
				},
				"defaultCollectorDescription": {
					"description": "The description of the default collector assigned to the ResourceGroup",
					"readOnly": true,
					"type": "string"
				},
				"defaultCollectorId": {
					"format": "int32",
					"description": "The Id of the default collector assigned to the ResourceGroup",
					"type": "integer",
					"example": 1.0
				},
				"awsTestResult": {
					"description": "The String result returned by the transaction that tests the AWS credentials associated with the AWS group",
					"readOnly": true,
					"$ref": "#/definitions/AwsAccountTestResult"
				},
				"extra": {
					"description": "The extra setting for cloud group",
					"type": "object"
				},
				"numOfDirectSubGroups": {
					"format": "int64",
					"description": "The number of sub-groups that belong only to this ResourceGroup (doesn\u0027t include groups under sub-groups)",
					"readOnly": true,
					"type": "integer"
				},
				"subGroups": {
					"description": "The child ResourceGroups within this ResourceGroup",
					"readOnly": true,
					"type": "array",
					"items": { "$ref": "#/definitions/DeviceGroupData" }
				},
				"numOfDirectDevices": {
					"format": "int64",
					"description": "The number of AWS and normal devices that belong only to this ResourceGroup (doesn\u0027t include devices in sub-groups)",
					"readOnly": true,
					"type": "integer"
				},
				"id": {
					"format": "int32",
					"description": "The id of the ResourceGroup",
					"readOnly": true,
					"type": "integer"
				},
				"enableNetflow": {
					"description": "Indicates whether Netflow is enabled (true) or disabled (false) for the ResourceGroup, the default value is true",
					"type": "boolean",
					"example": "true"
				},
				"azureTestResultCode": {
					"format": "int32",
					"description": "The Status code result returned by the transaction that tests the Azure credentials associated with the Azure group",
					"readOnly": true,
					"type": "integer"
				},
				"effectiveAlertEnabled": {
					"description": "Whether or not alerting is effectively disabled for this ResourceGroup (alerting may be disabled at a higher level, e.g. parent group)",
					"readOnly": true,
					"type": "boolean"
				},
				"userPermission": {
					"description": "The permissions for the ResourceGroup that are granted to the user that made this API request",
					"readOnly": true,
					"type": "string"
				},
				"gcpRegionsInfo": {
					"readOnly": true,
					"type": "string"
				},
				"groupStatus": {
					"description": "normal | dead \nThe status of this ResourceGroup, where possible statuses are normal and dead. A group with a status of dead may indicate that one or more devices are dead within the group",
					"readOnly": true,
					"type": "string"
				},
				"numOfGcpDevices": {
					"format": "int64",
					"readOnly": true,
					"type": "integer"
				},
				"azureTestResult": {
					"description": "The String result returned by the transaction that tests the Azure credentials associated with the Azure group",
					"readOnly": true,
					"$ref": "#/definitions/AzureAccountTestResult"
				},
				"parentId": {
					"format": "int32",
					"description": "The id of the parent group for this ResourceGroup (the root ResourceGroup has an Id of 1)",
					"type": "integer",
					"example": 1.0
				},
				"awsTestResultCode": {
					"format": "int32",
					"description": "The Status code result returned by the transaction that tests the AWS credentials associated with the AWS group",
					"readOnly": true,
					"type": "integer"
				},
				"customProperties": {
					"description": "The properties associated with this ResourceGroup",
					"type": "array",
					"items": { "$ref": "#/definitions/NameAndValue" }
				},
				"numOfHosts": {
					"format": "int64",
					"description": "The number of total devices, including both AWS and normal devices, that belong to this ResourceGroup (includes normal devices in sub groups)",
					"readOnly": true,
					"type": "integer"
				},
				"name": {
					"description": "The name of the ResourceGroup",
					"type": "string",
					"example": "Linux Servers"
				},
				"gcpTestResult": {
					"description": "The result returned by the transaction that tests the GCP credentials associated with the GCP group",
					"readOnly": true,
					"$ref": "#/definitions/GcpAccountTestResult"
				},
				"azureRegionsInfo": {
					"description": "The number of instances in each Azure region (only applies to Azure groups)",
					"readOnly": true,
					"type": "string"
				}
			}
		},
		"OpsNoteTagBase": {
			"type": "object",
			"required": [ "name" ],
			"properties": {
				"updateOnInSec": {
					"format": "int64",
					"readOnly": true,
					"type": "integer"
				},
				"createdOnInSec": {
					"format": "int64",
					"readOnly": true,
					"type": "integer"
				},
				"name": {
					"description": "release",
					"type": "string"
				},
				"id": {
					"readOnly": true,
					"type": "string"
				}
			}
		},
		"GraphDisplay": {
			"type": "object",
			"properties": {
				"color": { "type": "string" },
				"legend": { "type": "string" },
				"type": { "type": "string" },
				"option": { "type": "string" }
			}
		},
		"EscalatingChain": {
			"type": "object",
			"required": [ "destinations", "name" ],
			"properties": {
				"inAlerting": {
					"readOnly": true,
					"type": "boolean"
				},
				"throttlingAlerts": {
					"format": "int32",
					"type": "integer",
					"example": 40.0
				},
				"enableThrottling": {
					"type": "boolean",
					"example": true
				},
				"destinations": {
					"type": "array",
					"items": { "$ref": "#/definitions/Chain" }
				},
				"name": {
					"type": "string",
					"example": "NOC Team"
				},
				"description": {
					"type": "string",
					"example": "For alerts escalated to the NOC Team"
				},
				"id": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"ccDestinations": {
					"type": "array",
					"items": { "$ref": "#/definitions/Recipient" }
				},
				"throttlingPeriod": {
					"format": "int32",
					"type": "integer",
					"example": 30.0
				}
			}
		},
		"ILP": {
			"type": "object",
			"required": [ "lmName", "wmiName" ],
			"properties": {
				"wmiName": { "type": "string" },
				"lmName": { "type": "string" }
			}
		},
		"GcpAccountTestResult": {
			"type": "object",
			"properties": {
				"noPermissionServices": {
					"uniqueItems": true,
					"type": "array",
					"items": { "type": "string" }
				},
				"detailLink": { "type": "string" },
				"nonPermissionErrors": {
					"uniqueItems": true,
					"type": "array",
					"items": { "type": "string" }
				}
			}
		},
		"AuditLog": {
			"type": "object",
			"properties": {
				"happenedOnLocal": {
					"description": "The date and time that the action recorded in the access log entry occured",
					"readOnly": true,
					"type": "string"
				},
				"ip": {
					"description": "The IP address that the action was performed from",
					"readOnly": true,
					"type": "string"
				},
				"happenedOn": {
					"format": "int64",
					"description": "The time, in epoch seconds, that the action recorded in the access log entry occurred",
					"readOnly": true,
					"type": "integer"
				},
				"description": {
					"description": "The description of the action recorded in the access log entry",
					"readOnly": true,
					"type": "string"
				},
				"id": {
					"description": "The Id of the access log entry",
					"readOnly": true,
					"type": "string"
				},
				"username": {
					"description": "The username associated with the user that performed the action recorded in the access log entry\t",
					"readOnly": true,
					"type": "string"
				}
			}
		},
		"DeviceDataSourceAssociatedPaginationResponse": {
			"type": "object",
			"properties": {
				"total": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"searchId": {
					"readOnly": true,
					"type": "string"
				},
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/DeviceDataSourceAssociated" }
				}
			}
		},
		"CollectorPaginationResponse": {
			"type": "object",
			"properties": {
				"total": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"searchId": {
					"readOnly": true,
					"type": "string"
				},
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/CollectorBase" }
				}
			}
		},
		"DeviceDataSource": {
			"type": "object",
			"properties": {
				"alertStatus": {
					"readOnly": true,
					"type": "string"
				},
				"autoDiscovery": {
					"readOnly": true,
					"type": "boolean"
				},
				"dataSourceDisplayName": {
					"readOnly": true,
					"type": "string"
				},
				"deviceId": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"deviceName": {
					"readOnly": true,
					"type": "string"
				},
				"createdOn": {
					"format": "int64",
					"readOnly": true,
					"type": "integer"
				},
				"collectMethod": { "type": "string" },
				"dataSourceId": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"graphs": {
					"readOnly": true,
					"type": "array",
					"items": { "$ref": "#/definitions/DeviceDatasourceGraph" }
				},
				"sdtAt": {
					"readOnly": true,
					"type": "string"
				},
				"nextAutoDiscoveryOn": {
					"format": "int64",
					"readOnly": true,
					"type": "integer"
				},
				"id": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"alertStatusPriority": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"alertDisableStatus": {
					"readOnly": true,
					"type": "string"
				},
				"dataSourceDescription": {
					"readOnly": true,
					"type": "string"
				},
				"overviewGraphs": {
					"readOnly": true,
					"type": "array",
					"items": { "$ref": "#/definitions/DeviceDatasourceGraph" }
				},
				"stopMonitoring": {
					"readOnly": true,
					"type": "boolean"
				},
				"assignedOn": {
					"format": "int64",
					"readOnly": true,
					"type": "integer"
				},
				"isMultiple": {
					"readOnly": true,
					"type": "boolean"
				},
				"instanceNumber": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"updatedOn": {
					"format": "int64",
					"readOnly": true,
					"type": "integer"
				},
				"sdtStatus": {
					"readOnly": true,
					"type": "string"
				},
				"dataSourceName": {
					"readOnly": true,
					"type": "string"
				},
				"deviceDisplayName": {
					"readOnly": true,
					"type": "string"
				},
				"monitoringInstanceNumber": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"groupsDisabledThisSource": {
					"readOnly": true,
					"type": "array",
					"items": { "$ref": "#/definitions/TreeNode" }
				},
				"groupName": {
					"readOnly": true,
					"type": "string"
				},
				"instanceAutoGroupEnabled": {
					"readOnly": true,
					"type": "boolean"
				},
				"alertingDisabledOn": {
					"readOnly": true,
					"$ref": "#/definitions/TreeNode"
				},
				"dataSourceType": {
					"readOnly": true,
					"type": "string"
				},
				"status": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				}
			}
		},
		"AzureStorageServiceLimitsCollectorAttribute": {
			"allOf": [
				{ "$ref": "#/definitions/CollectorAttribute" },
				{
					"type": "object",
					"properties": {
						"period": {
							"format": "int32",
							"type": "integer"
						}
					}
				}
			],
			"x-discriminator-value": "azurestorageservicelimits"
		},
		"ReportBase": {
			"type": "object",
			"required": [ "name", "type" ],
			"properties": {
				"lastmodifyUserId": {
					"format": "int32",
					"description": "The Id of the user that last modified the report",
					"readOnly": true,
					"type": "integer"
				},
				"delivery": {
					"description": "Whether or not the report is configured to be delivered via email. Acceptable values are: none, email",
					"type": "string",
					"example": "email"
				},
				"userPermission": {
					"description": "The permissions associated with the user who made the API call",
					"readOnly": true,
					"type": "string"
				},
				"lastGenerateOn": {
					"format": "int64",
					"description": "The time, in epoch format, that the report was last generated",
					"readOnly": true,
					"type": "integer"
				},
				"reportLinkNum": {
					"format": "int32",
					"description": "The number of links associated with the report, where each link corresponds to a generated report",
					"readOnly": true,
					"type": "integer"
				},
				"groupId": {
					"format": "int32",
					"description": "The Id of the group the report is in, where Id\u003d0 is the root report group",
					"type": "integer",
					"example": 5.0
				},
				"format": {
					"description": "The format of the report. Allowable values are: HTML, PDF, CSV, WORD",
					"type": "string",
					"example": "HTML"
				},
				"description": {
					"description": "The description of the report",
					"type": "string",
					"example": "This is a daily alerts report"
				},
				"lastGenerateSize": {
					"format": "int64",
					"description": "The size of the report, in Bytes, the last time it was generated",
					"readOnly": true,
					"type": "integer"
				},
				"customReportTypeId": {
					"format": "int32",
					"description": "The id of the custom report template, if the report is a custom report. An id of 0 indicates that the report is not a custom report",
					"readOnly": true,
					"type": "integer"
				},
				"type": {
					"description": "The report type. Acceptable values are: Alert,Alert SLA,Alert threshold,Alert trends,Host CPU,Host group inventory,Host inventory,Host metric trends,Interfaces Bandwidth,Netflow device metric,Service Level Agreement,Website Service Overview,Word template,Audit Log,Alert Forecasting,Dashboard,Website SLA,User,Role",
					"type": "string",
					"example": "Alert"
				},
				"lastGeneratePages": {
					"format": "int32",
					"description": "The number of pages in the report, the last time it was generated",
					"readOnly": true,
					"type": "integer"
				},
				"reportLinkExpire": {
					"description": "The report link Expire. Allowable values are:High Flexibility,High Security",
					"type": "string",
					"example": "HTML"
				},
				"schedule": {
					"description": "A cron schedule that indicates when the report will be delivered via email",
					"type": "string",
					"example": "0 7 * * 1"
				},
				"recipients": {
					"description": "If the report is configured to be delivered via email, this object provides the recipients that the report will be delivered to",
					"type": "array",
					"items": { "$ref": "#/definitions/ReportRecipient" }
				},
				"customReportTypeName": {
					"description": "The name of the custom report template",
					"readOnly": true,
					"type": "string"
				},
				"name": {
					"description": "The name of the report",
					"type": "string",
					"example": "Daily Alerts Report"
				},
				"enableViewAsOtherUser": {
					"description": "Whether or not other users are allowed to view the report as the user who last modified the report",
					"readOnly": true,
					"type": "boolean"
				},
				"lastmodifyUserName": {
					"description": "The username of the user that last modified the report",
					"readOnly": true,
					"type": "string"
				},
				"id": {
					"format": "int32",
					"description": "The id of the report",
					"readOnly": true,
					"type": "integer"
				},
				"scheduleTimezone": {
					"description": "The sepecific timezone for the scheduled report",
					"type": "string",
					"example": "America/Los_Angeles"
				}
			},
			"discriminator": "type"
		},
		"NetflowEndpoint": {
			"x-discriminator-value": "endpoint",
			"type": "object",
			"properties": {
				"lastSeen": {
					"format": "int64",
					"readOnly": true,
					"type": "integer"
				},
				"percentUsage": {
					"format": "double",
					"readOnly": true,
					"type": "number"
				},
				"dataType": {
					"readOnly": true,
					"type": "string"
				},
				"IP": {
					"readOnly": true,
					"type": "string"
				},
				"usage": {
					"format": "double",
					"readOnly": true,
					"type": "number"
				},
				"dns": {
					"readOnly": true,
					"type": "string"
				},
				"type": {
					"readOnly": true,
					"type": "string"
				}
			}
		},
		"Device": {
			"type": "object",
			"required": [ "displayName", "name", "preferredCollectorId" ],
			"properties": {
				"netflowCollectorGroupName": {
					"description": "The name of the Collector Group associated with the device\u0027s netflow collector",
					"readOnly": true,
					"type": "string"
				},
				"azureState": {
					"format": "int32",
					"description": "The GCP instance state (if applicable): 1 indicates that the instance is running, 2 indicates that the instance is stopped and 3 the instance is terminated.",
					"readOnly": true,
					"type": "integer"
				},
				"relatedDeviceId": {
					"format": "int32",
					"description": "The Id of the AWS EC2 instance related to this device, if one exists in the LogicMonitor account. This value defaults to -1, which indicates that there are no related devices",
					"type": "integer",
					"example": -1.0
				},
				"displayName": {
					"description": "The display name of the device",
					"type": "string",
					"example": "Cisco Router"
				},
				"link": {
					"description": "The URL link associated with the device",
					"type": "string",
					"example": "www.ciscorouter.com"
				},
				"awsState": {
					"format": "int32",
					"description": "The AWS instance state (if applicable): 1 indicates that the instance is running, 2 indicates that the instance is stopped and 3 the instance is terminated",
					"readOnly": true,
					"type": "integer"
				},
				"description": {
					"description": "The device description",
					"type": "string",
					"example": "This is a Cisco Router"
				},
				"disableAlerting": {
					"description": "Indicates whether alerting is disabled (true) or enabled (false) for this device",
					"type": "boolean",
					"example": true
				},
				"netflowCollectorGroupId": {
					"format": "int32",
					"description": "The id of the Collector Group associated with the device\u0027s netflow collector",
					"readOnly": true,
					"type": "integer"
				},
				"createdOn": {
					"format": "int64",
					"description": "The time, in epoch seconds format, that the device was added to your LogicMonitor account",
					"readOnly": true,
					"type": "integer"
				},
				"systemProperties": {
					"description": "Any system properties (aside from system.categories) defined for this device",
					"readOnly": true,
					"type": "array",
					"items": { "$ref": "#/definitions/NameAndValue" }
				},
				"hostStatus": {
					"description": "The status of this device, where possible statuses are normal, dead and dead-collector",
					"readOnly": true,
					"type": "string"
				},
				"gcpState": {
					"format": "int32",
					"description": "The Azure instance state (if applicable): 1 indicates that the instance is running, 2 indicates that the instance is stopped and 3 the instance is terminated.",
					"readOnly": true,
					"type": "integer"
				},
				"autoBalancedCollectorGroupId": {
					"format": "int32",
					"description": "The Auto Balanced Collector Group id. 0 means not monitored by ABCG",
					"type": "integer"
				},
				"autoPropsUpdatedOn": {
					"format": "int64",
					"description": "The time, in epoch seconds, that auto properties last ran and updated the properties table for this device",
					"readOnly": true,
					"type": "integer"
				},
				"scanConfigId": {
					"format": "int32",
					"description": "The Id of the netscan configuration which was used to discover this device. 0 indicates that the device was not discovered by a scan",
					"readOnly": true,
					"type": "integer",
					"example": 0.0
				},
				"inheritedProperties": {
					"description": "Any properties inherit from parents",
					"readOnly": true,
					"type": "array",
					"items": { "$ref": "#/definitions/NameAndValue" }
				},
				"id": {
					"format": "int32",
					"description": "The Id of the device",
					"readOnly": true,
					"type": "integer"
				},
				"enableNetflow": {
					"description": "Indicates whether Netflow is enabled (true) or disabled (false) for the device",
					"type": "boolean",
					"example": true
				},
				"lastDataTime": {
					"format": "int64",
					"description": "The last time, in epoch seconds, that the device received Netflow data",
					"readOnly": true,
					"type": "integer"
				},
				"hostGroupIds": {
					"description": "The Id(s) of the groups the device is in, where multiple group ids are comma separated",
					"type": "string",
					"example": "16,4,3"
				},
				"upTimeInSeconds": {
					"format": "int64",
					"description": "The uptime of the device in seconds. This value will always be the largest value reported by the following datasources:\nHost Uptime-\nSNMPUptime-\nSNMP_Engine_Uptime-\nWinSystemUptime-\nNimbleUptime-",
					"readOnly": true,
					"type": "integer"
				},
				"deviceType": {
					"format": "int32",
					"description": "The type of device: 0 indicates a regular device, 2 indicates an AWS device, 4 indicates an Azure device",
					"type": "integer",
					"example": 0.0
				},
				"currentCollectorId": {
					"format": "int32",
					"description": "The id of the collector currently monitoring the device and discovering instances",
					"type": "integer",
					"example": 1.0
				},
				"netflowCollectorDescription": {
					"description": "The description/name of the netflow collector for this device",
					"readOnly": true,
					"type": "string"
				},
				"netflowCollectorId": {
					"format": "int32",
					"description": "The Id of the netflow collector associated with the device",
					"type": "integer",
					"example": 1.0
				},
				"userPermission": {
					"description": "The read and/or write permissions for this device that are granted to the user who made the API request",
					"readOnly": true,
					"type": "string"
				},
				"autoPropsAssignedOn": {
					"format": "int64",
					"description": "The time, in epoch seconds format, that properties were first discovered for this device",
					"readOnly": true,
					"type": "integer"
				},
				"updatedOn": {
					"format": "int64",
					"description": "The time, in epoch seconds format, that the device was last updated",
					"readOnly": true,
					"type": "integer"
				},
				"preferredCollectorGroupName": {
					"description": "The name of the Collector Group associated with the device\u0027s preferred collector",
					"readOnly": true,
					"type": "string"
				},
				"preferredCollectorGroupId": {
					"format": "int32",
					"description": "The id of the Collector Group associated with the device\u0027s preferred collector",
					"readOnly": true,
					"type": "integer"
				},
				"autoProperties": {
					"description": "Any auto properties assigned to the device",
					"readOnly": true,
					"type": "array",
					"items": { "$ref": "#/definitions/NameAndValue" }
				},
				"customProperties": {
					"description": "Any non-system properties (aside from system.categories) defined for this device",
					"type": "array",
					"items": { "$ref": "#/definitions/NameAndValue" }
				},
				"toDeleteTimeInMs": {
					"format": "int64",
					"description": "The number of milliseconds until the device will be automatically deleted from your LogicMonitor account (a value of zero indicates that a future delete time/date has not been scheduled)",
					"readOnly": true,
					"type": "integer"
				},
				"collectorDescription": {
					"description": "The description/name of the collector for this device",
					"readOnly": true,
					"type": "string"
				},
				"preferredCollectorId": {
					"format": "int32",
					"description": "The Id of the preferred collector assigned to monitor the device",
					"type": "integer",
					"example": 2.0
				},
				"lastRawdataTime": {
					"format": "int64",
					"description": "The last time, in epoch seconds, that raw Netflow data was reported",
					"readOnly": true,
					"type": "integer"
				},
				"name": {
					"description": "The host name or IP address of the device",
					"type": "string",
					"example": "Main Collector"
				},
				"deletedTimeInMs": {
					"format": "int64",
					"description": "The time in milliseconds that the device has been dead for, or since the AWS device was filtered out",
					"readOnly": true,
					"type": "integer"
				}
			}
		},
		"DeviceSDTHistoryPaginationResponse": {
			"type": "object",
			"properties": {
				"total": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"searchId": {
					"readOnly": true,
					"type": "string"
				},
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/SDTHistory" }
				}
			}
		},
		"Period": {
			"type": "object",
			"required": [ "endMinutes", "startMinutes", "timezone", "weekDays" ],
			"properties": {
				"weekDays": {
					"type": "array",
					"items": {
						"format": "int32",
						"type": "integer"
					}
				},
				"timezone": { "type": "string" },
				"startMinutes": {
					"format": "int32",
					"type": "integer"
				},
				"endMinutes": {
					"format": "int32",
					"type": "integer"
				}
			}
		},
		"OpenMetricCollectorAttributeV2": {
			"allOf": [
				{ "$ref": "#/definitions/CollectorAttribute" },
				{
					"type": "object",
					"properties": {
						"headers": { "type": "string" },
						"followRedirect": { "type": "boolean" },
						"readTimeout": {
							"format": "int32",
							"type": "integer"
						},
						"connectTimeout": {
							"format": "int32",
							"type": "integer"
						},
						"url": { "type": "string" }
					}
				}
			]
		},
		"ConversationFilter": {
			"type": "object",
			"properties": {
				"fromOperator": { "type": "string" },
				"fromEndpoint": { "type": "string" },
				"toEndpoint": { "type": "string" },
				"toOperator": { "type": "string" },
				"includeOrExclude": { "type": "string" }
			}
		},
		"AlertWidget": {
			"allOf": [
				{ "$ref": "#/definitions/Widget" },
				{
					"type": "object",
					"properties": {
						"filters": {
							"description": "The filter for the alert table",
							"$ref": "#/definitions/AlertFilters"
						},
						"parsedFilters": { "$ref": "#/definitions/AlertFilters" }
					}
				}
			],
			"x-discriminator-value": "alert"
		},
		"GoogleMapWidget": {
			"allOf": [
				{ "$ref": "#/definitions/Widget" },
				{
					"type": "object",
					"required": [ "mapPoints" ],
					"properties": {
						"ackChecked": {
							"description": "Whether ACKed alerts should be displayed, the default value is true",
							"type": "boolean"
						},
						"displayErrorAlert": {
							"description": "Whether error alerts should be displayed, the default value is true",
							"type": "boolean"
						},
						"displayWarnAlert": {
							"description": "Whether warning alerts should be displayed, the default value is true",
							"type": "boolean"
						},
						"displayCriticalAlert": {
							"description": "Whether critical alerts should be displayed, the default value is true",
							"type": "boolean"
						},
						"sdtChecked": {
							"description": "Whether alerts occuring during an SDT period should be displayed, the default value is true",
							"type": "boolean"
						},
						"mapPoints": {
							"description": "The points info",
							"type": "array",
							"items": { "$ref": "#/definitions/PointSource" }
						}
					}
				}
			],
			"x-discriminator-value": "gmap"
		},
		"FlashWidget": {
			"allOf": [
				{ "$ref": "#/definitions/Widget" },
				{
					"type": "object",
					"required": [ "url" ],
					"properties": {
						"url": { "type": "string" },
						"height": {
							"format": "int32",
							"type": "integer"
						}
					}
				}
			],
			"x-discriminator-value": "flash"
		},
		"UpdateReason": {
			"type": "object",
			"properties": {
				"timeEpoch": {
					"format": "int64",
					"type": "integer"
				},
				"clientIp": { "type": "string" },
				"updateReason": { "type": "string" },
				"timeStr": { "type": "string" },
				"id": {
					"format": "int32",
					"type": "integer"
				},
				"userName": { "type": "string" }
			}
		},
		"PointSource": {
			"type": "object",
			"required": [ "deviceGroupFullPath" ],
			"properties": {
				"hasLocation": {
					"description": "Whether or not the specified group or device has a location property defined",
					"readOnly": true,
					"type": "boolean"
				},
				"type": {
					"description": "Whether or not the mapPoint represents a device or a group",
					"type": "string"
				},
				"deviceGroupFullPath": {
					"description": "The full path of the ResourceGroup associated with the map point. This may be the group the map point represents, or the group of the device that the map point represents",
					"type": "string"
				},
				"deviceDisplayName": {
					"description": "The display name of the device the map point represents (if type\u003ddevice). This field supports Glob (*)",
					"type": "string"
				}
			}
		},
		"DashboardGroup": {
			"type": "object",
			"required": [ "name" ],
			"properties": {
				"template": {
					"description": "The template which is used for import dashboard group",
					"type": "object"
				},
				"fullPath": {
					"description": "The full path of the dashboard group",
					"readOnly": true,
					"type": "string"
				},
				"userPermission": {
					"description": "The permission of the user that made the API call",
					"readOnly": true,
					"type": "string"
				},
				"widgetTokens": {
					"description": "The tokens assigned at the group level",
					"type": "array",
					"items": { "$ref": "#/definitions/WidgetToken" }
				},
				"name": {
					"description": "The name of the dashboard group",
					"type": "string",
					"example": "LogicMonitor Dashboards"
				},
				"numOfDirectSubGroups": {
					"format": "int64",
					"description": "The number of groups directly under the Dashboard Group",
					"readOnly": true,
					"type": "integer"
				},
				"numOfDashboards": {
					"format": "int64",
					"description": "The number of dashboards that belong to the Dashboard Group and any sub-groups",
					"readOnly": true,
					"type": "integer"
				},
				"description": {
					"description": "This is a description of the dashboard group",
					"type": "string",
					"example": "Servers in LA DataCenter"
				},
				"id": {
					"format": "int32",
					"description": "The Id of the dashboard group ",
					"readOnly": true,
					"type": "integer"
				},
				"dashboards": {
					"description": "The dashboards that belong to the group",
					"readOnly": true,
					"type": "array",
					"items": { "$ref": "#/definitions/DashboardData" }
				},
				"parentId": {
					"format": "int32",
					"description": "The Id of the parent dashboard group",
					"type": "integer",
					"example": 1.0
				},
				"numOfDirectDashboards": {
					"format": "int64",
					"description": "The number of dashboards that belong directly to the Dashboard Group",
					"readOnly": true,
					"type": "integer"
				}
			}
		},
		"Macro": {
			"type": "object",
			"required": [ "value", "variable" ],
			"properties": {
				"variable": { "type": "string" },
				"description": { "type": "string" },
				"value": { "type": "string" }
			}
		},
		"BigNumberWidget": {
			"allOf": [
				{ "$ref": "#/definitions/Widget" },
				{
					"type": "object",
					"required": [ "bigNumberInfo" ],
					"properties": {
						"bigNumberInfo": {
							"description": "BigNumber widget configuration info",
							"$ref": "#/definitions/BigNumberInfo"
						}
					}
				}
			],
			"x-discriminator-value": "bignumber"
		},
		"WebsiteSLAReport": {
			"allOf": [
				{ "$ref": "#/definitions/ReportBase" },
				{
					"type": "object",
					"required": [ "metrics" ],
					"properties": {
						"dateRange": { "type": "string" },
						"timezone": { "type": "string" },
						"dayInOneWeek": { "type": "string" },
						"periodInOneDay": { "type": "string" },
						"metrics": {
							"type": "array",
							"items": { "$ref": "#/definitions/SlaMetric" }
						}
					}
				}
			],
			"x-discriminator-value": "website sla"
		},
		"DevicePaginationResponse": {
			"type": "object",
			"properties": {
				"total": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"searchId": {
					"readOnly": true,
					"type": "string"
				},
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/Device" }
				}
			}
		},
		"UserReport": {
			"allOf": [
				{ "$ref": "#/definitions/ReportBase" },
				{
					"type": "object",
					"properties": {
						"sortedBy": {
							"description": "The sort by method",
							"type": "string"
						},
						"columns": {
							"description": "The columns displayed in the report",
							"type": "array",
							"items": { "$ref": "#/definitions/DynamicColumn" }
						},
						"userFilter": {
							"description": "The filter for the report",
							"$ref": "#/definitions/UserFilter"
						}
					}
				}
			],
			"x-discriminator-value": "user"
		},
		"DeviceGroupPaginationResponse": {
			"type": "object",
			"properties": {
				"total": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"searchId": {
					"readOnly": true,
					"type": "string"
				},
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/DeviceGroup" }
				}
			}
		},
		"Collector": {
			"type": "object",
			"properties": {
				"userChangeOn": {
					"format": "int64",
					"description": "The last time the Collector was updated, in epoch format",
					"readOnly": true,
					"type": "integer"
				},
				"confVersion": {
					"description": "The version of the agent.conf configuration file",
					"readOnly": true,
					"type": "string"
				},
				"updatedOnLocal": {
					"description": "The time that the Collector was last updated, in local time format",
					"readOnly": true,
					"type": "string"
				},
				"hostname": {
					"description": "The hostname of the device the Collector is installed on",
					"readOnly": true,
					"type": "string"
				},
				"numberOfInstances": {
					"format": "int32",
					"type": "integer"
				},
				"id": {
					"format": "int32",
					"description": "The id of the Collector",
					"readOnly": true,
					"type": "integer"
				},
				"ea": {
					"description": "Whether the collector is in EA version",
					"readOnly": true,
					"type": "boolean"
				},
				"watchdogUpdatedOnLocal": {
					"description": "The time that the Collector Watchdog was last updated, in local time format",
					"readOnly": true,
					"type": "string"
				},
				"hasFailOverDevice": {
					"description": "Whether the collector has failover devices",
					"readOnly": true,
					"type": "boolean"
				},
				"collectorGroupName": {
					"description": "The name of the group the Collector is in",
					"readOnly": true,
					"type": "string"
				},
				"netscanVersion": {
					"description": "The Netscan version associated with the Collector",
					"readOnly": true,
					"type": "string"
				},
				"inSDT": {
					"description": "The SDT status of the collector",
					"readOnly": true,
					"type": "boolean"
				},
				"updatedOn": {
					"format": "int64",
					"description": "The time that the Collector was last updated, in epoch format",
					"readOnly": true,
					"type": "integer"
				},
				"automaticUpgradeInfo": {
					"description": "The details of the Collector\u0027s automatic upgrade schedule, if one exists",
					"$ref": "#/definitions/AutomaticUpgradeInfo"
				},
				"numberOfHosts": {
					"format": "int32",
					"description": "The number of devices monitored by the Collector",
					"readOnly": true,
					"type": "integer"
				},
				"collectorConf": {
					"description": "The Collector\u0027s configuration file",
					"readOnly": true,
					"type": "string"
				},
				"sbproxyConf": {
					"description": "The Proxy\u0027s configuration",
					"readOnly": true,
					"type": "string"
				},
				"userVisibleWebsitesNum": {
					"format": "int32",
					"description": "The number of websites monitored by the Collector and visible to the user that made the query",
					"readOnly": true,
					"type": "integer"
				},
				"lastSentNotificationOnLocal": {
					"description": "The time that a notification was last sent for this Collector, in local time format",
					"readOnly": true,
					"type": "string"
				},
				"customProperties": {
					"description": "The custom properties defined for the Collector",
					"type": "array",
					"items": { "$ref": "#/definitions/NameAndValue" }
				},
				"predefinedConfig": {
					"description": "Collector configurations",
					"readOnly": true,
					"type": "object"
				},
				"onetimeUpgradeInfo": {
					"description": "The details of the Collector\u0027s one time upgrade, if one has been scheduled",
					"$ref": "#/definitions/OnetimeUpgradeInfo"
				},
				"wrapperConf": {
					"description": "The java service wrapper\u0027s configuration",
					"readOnly": true,
					"type": "string"
				},
				"clearSent": {
					"description": "Whether or not an alert clear notifcation has been sent for this Collector",
					"readOnly": true,
					"type": "boolean"
				},
				"status": {
					"format": "int32",
					"description": "The registration status of the Collector. Acceptable values are: 0\u003d unregistered, 1\u003d registered, 2\u003d stopped, 3\u003d suspended",
					"readOnly": true,
					"type": "integer"
				},
				"backupAgentId": {
					"format": "int32",
					"description": "The Id of the backup Collector assigned to the Collector",
					"type": "integer",
					"example": 75.0
				},
				"specifiedCollectorDeviceGroupId": {
					"format": "int32",
					"description": "The ResourceGroup id when create a new collector device",
					"type": "integer",
					"example": 0.0
				},
				"escalatingChainId": {
					"format": "int32",
					"description": "The Id of the escalation chain associated with this Collector",
					"type": "integer",
					"example": 80.0
				},
				"collectorSize": {
					"description": "The size of the collector",
					"readOnly": true,
					"type": "string"
				},
				"ackedOnLocal": {
					"description": "The time that the Collector was acknowledged (if it is in alert), in local time format",
					"readOnly": true,
					"type": "string"
				},
				"watchdogConf": {
					"description": "The Watchdog\u0027s configuration",
					"readOnly": true,
					"type": "string"
				},
				"description": {
					"description": "The Collector\u0027s description",
					"type": "string",
					"example": "Linux Collector"
				},
				"createdOn": {
					"format": "int64",
					"description": "The time that the Collector was created, in epoch format",
					"readOnly": true,
					"type": "integer"
				},
				"platform": {
					"description": "The OS of the Collector device (e.g. Linux, Windows)",
					"readOnly": true,
					"type": "string"
				},
				"isDown": {
					"description": "Whether or not the Collector is currently down",
					"readOnly": true,
					"type": "boolean"
				},
				"userVisibleHostsNum": {
					"format": "int32",
					"description": "The number of devices monitored by the Collector and visible to the user that made the query",
					"readOnly": true,
					"type": "integer"
				},
				"canDowngrade": {
					"description": "Whether the collector can be downgraded to a lower version",
					"readOnly": true,
					"type": "boolean"
				},
				"ackComment": {
					"description": "The comment associated with the Collector acknowledgement (if it is in alert and acknowledged)",
					"readOnly": true,
					"type": "string"
				},
				"nextUpgradeInfo": {
					"description": "The details of the Collector\u0027s next upgrade, if one has been scheduled",
					"readOnly": true,
					"$ref": "#/definitions/NextUpgradeInfo"
				},
				"suppressAlertClear": {
					"description": "Whether alert clear notifications are suppressed for the Collector",
					"type": "boolean",
					"example": true
				},
				"nextRecipient": {
					"format": "int32",
					"description": "The Id of the next recipient to which alert notifications will be sent",
					"readOnly": true,
					"type": "integer"
				},
				"ackedOn": {
					"format": "int64",
					"description": "The epoch at which the Collector was acknowledged (if it is in alert)",
					"readOnly": true,
					"type": "integer"
				},
				"userChangeOnLocal": {
					"description": "The last time the Collector was updated, in the account time zone",
					"readOnly": true,
					"type": "string"
				},
				"numberOfWebsites": {
					"format": "int32",
					"description": "The number of websites monitored by the Collector",
					"readOnly": true,
					"type": "integer"
				},
				"collectorDeviceId": {
					"format": "int32",
					"description": "The device id of the collector device",
					"readOnly": true,
					"type": "integer"
				},
				"ackedBy": {
					"description": "The user that acknowledged the Collector (if it is in alert)",
					"readOnly": true,
					"type": "string"
				},
				"userPermission": {
					"description": "The permission level of the user that made the API request to get Collector information",
					"readOnly": true,
					"type": "string"
				},
				"needAutoCreateCollectorDevice": {
					"description": "Whether to create a collector device when instance collector, the default value is true",
					"type": "boolean",
					"example": "true"
				},
				"watchdogUpdatedOn": {
					"format": "int64",
					"description": "The time that the Watchdog Services was last updated, in epoch format",
					"readOnly": true,
					"type": "integer"
				},
				"canDowngradeReason": {
					"description": "The reason why the collector can be downgraded",
					"readOnly": true,
					"type": "string"
				},
				"lastSentNotificationOn": {
					"format": "int64",
					"description": "The time, in epoch format, that a notification was last sent for the Collector",
					"readOnly": true,
					"type": "integer"
				},
				"acked": {
					"description": "Whether or not the Collector is currently acknowledged",
					"readOnly": true,
					"type": "boolean"
				},
				"onetimeDowngradeInfo": {
					"description": "The details of the Collector\u0027s automatic downgrade schedule, if one exists",
					"$ref": "#/definitions/OnetimeUpgradeInfo"
				},
				"websiteConf": {
					"description": "Whether or not the device the Collector is installed on is enabled for fail over",
					"readOnly": true,
					"type": "string"
				},
				"upTime": {
					"format": "int64",
					"description": "The time the Collector has been up, in seconds",
					"readOnly": true,
					"type": "integer"
				},
				"build": {
					"description": "The Collector version",
					"readOnly": true,
					"type": "string"
				},
				"previousVersion": {
					"description": "The previous version of the collector, used for downgrading",
					"readOnly": true,
					"type": "string"
				},
				"collectorGroupId": {
					"format": "int32",
					"description": "The Id of the group the Collector is in",
					"type": "integer",
					"example": 10.0
				},
				"createdOnLocal": {
					"description": "The time that the Collector was created, in local time format",
					"readOnly": true,
					"type": "string"
				},
				"enableFailBack": {
					"description": "Whether or not automatic failback is enabled for the Collector, the default value is true",
					"type": "boolean",
					"example": "true"
				},
				"resendIval": {
					"format": "int32",
					"description": "The interval, in minutes, after which alert notifications for the Collector will be resent",
					"type": "integer",
					"example": 15.0
				},
				"arch": {
					"description": "The collector architecture (Windows | Linux platform followed by 32 | 64 bit)",
					"readOnly": true,
					"type": "string"
				},
				"enableFailOverOnCollectorDevice": {
					"description": "Whether or not the device the Collector is installed on is enabled for fail over",
					"type": "boolean",
					"example": true
				}
			}
		},
		"AwsSesServiceLimitsCollectorAttribute": {
			"allOf": [
				{ "$ref": "#/definitions/CollectorAttribute" },
				{
					"type": "object",
					"properties": {
						"period": {
							"format": "int32",
							"type": "integer"
						}
					}
				}
			],
			"x-discriminator-value": "awssesservicelimits"
		},
		"AzureInsightsCollectorAttribute": {
			"allOf": [
				{ "$ref": "#/definitions/CollectorAttribute" },
				{
					"type": "object",
					"properties": {
						"period": {
							"format": "int32",
							"type": "integer"
						}
					}
				}
			],
			"x-discriminator-value": "azureinsights"
		},
		"AutoDiscoveryMethod": {
			"type": "object",
			"required": [ "name" ],
			"properties": { "name": { "type": "string" } },
			"discriminator": "name"
		},
		"DeviceEventSourceSDT": {
			"allOf": [
				{ "$ref": "#/definitions/SDT" },
				{
					"type": "object",
					"properties": {
						"eventSourceName": {
							"description": "The name of the eventsource that the SDT will apply to",
							"type": "string"
						},
						"deviceEventSourceId": {
							"format": "int32",
							"description": "The id of the device eventsource that the SDT will be associated with",
							"type": "integer"
						},
						"deviceId": {
							"format": "int32",
							"description": "The id of the device associated with the eventsource that the SDT will apply to",
							"type": "integer"
						},
						"deviceDisplayName": {
							"description": "The display name of the device associated with the eventsource that the SDT will apply to",
							"type": "string"
						}
					}
				}
			],
			"x-discriminator-value": "deviceeventsourcesdt"
		},
		"DeviceDataSourceSDT": {
			"allOf": [
				{ "$ref": "#/definitions/SDT" },
				{
					"type": "object",
					"properties": {
						"deviceDataSourceId": {
							"format": "int32",
							"description": "The id of the device datasource that the SDT will be associated with",
							"type": "integer"
						},
						"deviceId": {
							"format": "int32",
							"description": "The id of the device associated with the datasource that the SDT will apply to",
							"type": "integer"
						},
						"deviceDisplayName": {
							"description": "The display name of the device associated with the datasource that the SDT will apply to",
							"type": "string"
						},
						"dataSourceName": {
							"description": "The name of the datasource that the SDT will apply to",
							"type": "string"
						}
					}
				}
			],
			"x-discriminator-value": "devicedatasourcesdt"
		},
		"InterfBandwidthReport": {
			"allOf": [
				{ "$ref": "#/definitions/ReportBase" },
				{
					"type": "object",
					"properties": {
						"hostsValType": {
							"description": "host | group. The type of entities specified in the hostsVal field",
							"type": "string"
						},
						"dateRange": {
							"description": "The Time Range configured for the report. Last 2 hours | Last 24 hours | Last calendar day | Last 7 days | Last 14 days | Last 30 days | Last calendar month | Last 365 days | Any custom date range in this format: YYYY-MM-dd hh:mm TO YYYY-MM-dd hh:mm",
							"type": "string"
						},
						"hostsVal": {
							"description": "The devices OR groups selected for the report, where multiple entities are separated by commas",
							"type": "string"
						},
						"rowFormat": {
							"format": "int32",
							"description": "0 | 1\n0: Text only - metrics will be displayed in a tabular format.\n1: One graph per instance - metrics will be displayed in a tabular format and one graph will be displayed per instance",
							"type": "integer"
						}
					}
				}
			],
			"x-discriminator-value": "interfaces bandwidth"
		},
		"AzureRssEventSource": {
			"allOf": [
				{ "$ref": "#/definitions/EventSource" },
				{
					"type": "object",
					"properties": {
						"schedule": {
							"format": "int32",
							"description": "The polling interval for the EventSource",
							"type": "integer"
						}
					}
				}
			],
			"x-discriminator-value": "azurerss"
		},
		"BigNumberWidgetData": {
			"allOf": [
				{ "$ref": "#/definitions/WidgetData" },
				{
					"type": "object",
					"properties": {
						"data": {
							"readOnly": true,
							"type": "array",
							"items": { "$ref": "#/definitions/BigNumberData" }
						}
					}
				}
			],
			"x-discriminator-value": "bignumber"
		},
		"EC2AutoDiscoveryMethod": {
			"allOf": [
				{ "$ref": "#/definitions/AutoDiscoveryMethod" },
				{
					"type": "object",
					"required": [ "accessKeyId", "secretAccessKey" ],
					"properties": {
						"secretAccessKey": { "type": "string" },
						"accessKeyId": { "type": "string" }
					}
				}
			],
			"x-discriminator-value": "ad_ec2"
		},
		"BigNumberItem": {
			"type": "object",
			"required": [ "dataPointName", "useCommaSeparators" ],
			"properties": {
				"dataPointName": { "type": "string" },
				"useCommaSeparators": { "type": "boolean" },
				"bottomLabel": { "type": "string" },
				"rounding": {
					"format": "int32",
					"type": "integer"
				},
				"position": {
					"format": "int32",
					"type": "integer"
				},
				"rightLabel": { "type": "string" },
				"colorThresholds": {
					"type": "array",
					"items": { "$ref": "#/definitions/ColorThreshold" }
				}
			}
		},
		"WebsiteGroupData": {
			"type": "object",
			"required": [ "websiteGroupName", "websiteName" ],
			"properties": {
				"websiteName": {
					"description": "The name of the website status should be displayed",
					"type": "string"
				},
				"websiteGroupName": {
					"description": "The name of the group for which member website status should be displayed",
					"type": "string"
				}
			}
		},
		"DeviceDataSourceInstanceAlertSetting": {
			"type": "object",
			"properties": {
				"globalAlertExpr": {
					"description": "The global alert expression for this datapoint",
					"readOnly": true,
					"type": "string"
				},
				"alertClearInterval": {
					"format": "int32",
					"description": "The interval of alert clear transition",
					"readOnly": true,
					"type": "integer"
				},
				"disableAlerting": {
					"description": "Whether or not alerting will be disabled for the datapoint",
					"type": "boolean",
					"example": true
				},
				"alertExprNote": {
					"description": "The note associated with the current alert threshold settings",
					"type": "string",
					"example": "Router 1 Ping Check"
				},
				"dataPointDescription": {
					"description": "The description of the datapoint the alert settings apply to",
					"readOnly": true,
					"type": "string"
				},
				"dataSourceInstanceId": {
					"format": "int32",
					"description": "The id of the DataSource instance alert settings apply to",
					"readOnly": true,
					"type": "integer"
				},
				"disableDpAlertHostGroups": {
					"description": "The group full path lists who disable alert for this datapoint on devicegroup level",
					"readOnly": true,
					"type": "string"
				},
				"dataPointName": {
					"description": "The name of the datapoint the alert settings apply to",
					"readOnly": true,
					"type": "string"
				},
				"dataPointId": {
					"format": "int32",
					"description": "The id of the Datapoint alert settings apply to",
					"readOnly": true,
					"type": "integer"
				},
				"deviceGroupId": {
					"format": "int32",
					"description": "The ID of the ResourceGroup",
					"readOnly": true,
					"type": "integer"
				},
				"parentDeviceGroupAlertExprList": {
					"description": "ResourceGroup alert expression list base on the priority. The first is the highest priority and effected on this instance",
					"readOnly": true,
					"type": "array",
					"items": { "$ref": "#/definitions/DeviceGroupAlertThresholdInfo" }
				},
				"alertingDisabledOn": {
					"description": "The datapoint is effected alert disabled by which group",
					"readOnly": true,
					"type": "string"
				},
				"id": {
					"format": "int32",
					"description": "The id of this alert setting",
					"readOnly": true,
					"type": "integer"
				},
				"dataSourceInstanceAlias": {
					"description": "The alias (name) of the DataSource instance the alert settings apply to",
					"readOnly": true,
					"type": "string"
				},
				"deviceGroupFullPath": {
					"description": "The full path of the ResourceGroup",
					"readOnly": true,
					"type": "string"
				},
				"alertExpr": {
					"description": "The thresholds that should be associated with the datapoint. Note that you need to have a space between the operator and each threshold (e.g. \u003e 1 2 3)",
					"type": "string",
					"example": "\u003e\u003d 70 90 95"
				},
				"alertTransitionInterval": {
					"format": "int32",
					"description": "The interval of alert transition",
					"readOnly": true,
					"type": "integer"
				}
			}
		},
		"FlowRecordPaginationResponse": {
			"type": "object",
			"properties": {
				"total": {
					"format": "int32",
					"readOnly": true,
					"type": "integer"
				},
				"searchId": {
					"readOnly": true,
					"type": "string"
				},
				"items": {
					"type": "array",
					"items": { "$ref": "#/definitions/NetFlowRecord" }
				}
			}
		},
		"LinkedWmiClass": {
			"type": "object",
			"required": [ "anchorClassWMIProperty", "linkedWmiClass" ],
			"properties": {
				"anchorClassWMIProperty": { "type": "string" },
				"linkedWmiClass": { "type": "string" },
				"match": { "$ref": "#/definitions/PropertyMatchRule" },
				"myLinkWMIProperty": { "type": "string" },
				"ILP": {
					"type": "array",
					"items": { "$ref": "#/definitions/ILP" }
				}
			}
		},
		"HtmlWidget": {
			"allOf": [
				{ "$ref": "#/definitions/Widget" },
				{
					"type": "object",
					"required": [ "resources" ],
					"properties": {
						"isCustom": { "type": "boolean" },
						"resources": {
							"uniqueItems": true,
							"type": "array",
							"items": { "$ref": "#/definitions/WebResource" }
						}
					}
				}
			],
			"x-discriminator-value": "html"
		},
		"WebsiteGroupSDT": {
			"allOf": [
				{ "$ref": "#/definitions/SDT" },
				{
					"type": "object",
					"required": [ "websiteGroupId" ],
					"properties": {
						"websiteGroupId": {
							"format": "int32",
							"description": "The Id of the service group that the SDT applies to",
							"type": "integer"
						},
						"websiteGroupName": {
							"description": "The name of the service group that the SDT applies to",
							"readOnly": true,
							"type": "string"
						}
					}
				}
			],
			"x-discriminator-value": "websitegroupsdt"
		},
		"Privilege": {
			"type": "object",
			"required": [ "objectId", "objectType", "operation" ],
			"properties": {
				"objectName": {
					"readOnly": true,
					"type": "string"
				},
				"subOperation": {
					"readOnly": true,
					"type": "string"
				},
				"operation": {
					"type": "string",
					"example": "write"
				},
				"objectId": {
					"type": "string",
					"example": "123"
				},
				"objectType": {
					"type": "string",
					"example": "dashboard group"
				}
			}
		},
		"PieChartItem": {
			"type": "object",
			"required": [ "dataPointName", "legend" ],
			"properties": {
				"dataPointName": { "type": "string" },
				"color": { "type": "string" },
				"legend": { "type": "string" }
			}
		}
	},
	"externalDocs": {
		"description": "LogicMonitor Support Docs",
		"url": "https://www.logicmonitor.com/support/rest-api-developers-guide/"
	},
	"info": {
		"license": {
			"name": "Apache 2.0",
			"url": "http://www.apache.org/licenses/LICENSE-2.0.html"
		},
		"description": "LogicMonitor is a SaaS-based performance monitoring platform that provides full visibility into complex, hybrid infrastructures, offering granular performance monitoring and actionable data and insights. logicmonitor_sdk enables you to manage your LogicMonitor account programmatically. Note: For Python SDKs, the REQUEST parameters can contain camelCase or an underscore. However, the RESPONSE parameters will always contain an underscore. For example, the REQUEST parameter can be testLocation or test_location. The RESPONSE parameter will be test_location.",
		"title": "LogicMonitor REST API",
		"version": "2.0.0"
	},
	"paths": {
		"/device/devices/{deviceId}/devicedatasources": {
			"get": {
				"summary": "get device datasource list ",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getDeviceDatasourceList",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/DeviceDatasourcePaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "deviceId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Devices" ]
			}
		},
		"/setting/configsources/importxml": {
			"post": {
				"summary": "import config source via xml",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "importConfigSource",
				"responses": {
					"200": {
						"schema": { "type": "object" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "formData",
						"name": "file",
						"type": "file",
						"required": true
					}
				],
				"tags": [ "ConfigSources" ],
				"consumes": [ "multipart/form-data" ]
			}
		},
		"/setting/collector/collectors/versions": {
			"get": {
				"summary": "get collector version list",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getCollectorVersionList",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/CollectorVersionPaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "CollectorVersions" ]
			}
		},
		"/setting/datasources/{dsId}/ographs/{id}": {
			"get": {
				"summary": "get datasource overview graph by id",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getDataSourceOverviewGraphById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/DataSourceOverviewGraph" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "dsId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					}
				],
				"tags": [ "Datasources" ]
			}
		},
		"/device/groups/{id}/devices": {
			"get": {
				"summary": "get immediate devices under group",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getImmediateDeviceListByDeviceGroupId",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/DevicePaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "ResourceGroups" ]
			}
		},
		"/device/devices/{deviceId}/devicedatasources/{hdsId}/instances/{instanceId}/config": {
			"get": {
				"summary": "get detailed config information for the instance",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getDeviceConfigSourceConfigList",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/DeviceDatasourceInstanceConfigPaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "deviceId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "hdsId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "instanceId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Datasource Instances" ]
			}
		},
		"/setting/eventsources": {
			"get": {
				"summary": "get eventSource list",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getEventSourceList",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/EventSourcePaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"default": "json",
						"in": "query",
						"name": "format",
						"type": "string",
						"required": false
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "EventSources" ]
			}
		},
		"/device/devices": {
			"post": {
				"summary": "add a new device",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "addDevice",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/Device" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "query",
						"name": "start",
						"format": "int64",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "end",
						"format": "int64",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "netflowFilter",
						"type": "string",
						"required": false
					},
					{
						"schema": { "$ref": "#/definitions/Device" },
						"in": "body",
						"name": "body",
						"required": true
					},
					{
						"default": false,
						"in": "query",
						"name": "addFromWizard",
						"type": "boolean",
						"required": false
					}
				],
				"tags": [ "Devices" ],
				"consumes": [ "application/json" ]
			},
			"get": {
				"summary": "get device list",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getDeviceList",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/DevicePaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "query",
						"name": "start",
						"format": "int64",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "end",
						"format": "int64",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "netflowFilter",
						"type": "string",
						"required": false
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Devices" ]
			}
		},
		"/alert/alerts/{id}": {
			"get": {
				"summary": "get alert",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getAlertById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/Alert" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"type": "string",
						"required": true
					},
					{
						"default": false,
						"in": "query",
						"name": "needMessage",
						"type": "boolean",
						"required": false
					},
					{
						"in": "query",
						"name": "customColumns",
						"type": "string",
						"required": false
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Alerts" ]
			}
		},
		"/device/devices/{id}/alerts": {
			"get": {
				"summary": "get alerts",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getAlertListByDeviceId",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/AlertPaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "query",
						"name": "start",
						"format": "int64",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "end",
						"format": "int64",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "netflowFilter",
						"type": "string",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"default": false,
						"in": "query",
						"name": "needMessage",
						"type": "boolean",
						"required": false
					},
					{
						"in": "query",
						"name": "customColumns",
						"type": "string",
						"required": false
					},
					{
						"default": "instances",
						"in": "query",
						"name": "bound",
						"type": "string",
						"required": false
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Devices" ]
			}
		},
		"/device/devices/{id}/scheduleAutoDiscovery": {
			"post": {
				"summary": "schedule active discovery for a device",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "scheduleAutoDiscoveryByDeviceId",
				"responses": {
					"200": {
						"schema": { "type": "object" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "query",
						"name": "start",
						"format": "int64",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "end",
						"format": "int64",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "netflowFilter",
						"type": "string",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					}
				],
				"tags": [ "Devices" ],
				"consumes": [ "application/json" ]
			}
		},
		"/alert/alerts": {
			"get": {
				"summary": "get alert list",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getAlertList",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/AlertPaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Alerts" ]
			}
		},
		"/setting/opsnotes": {
			"post": {
				"summary": "add opsnote",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "addOpsNote",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/OpsNote" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"schema": { "$ref": "#/definitions/OpsNote" },
						"in": "body",
						"name": "body",
						"required": true
					}
				],
				"tags": [ "Ops Notes" ],
				"consumes": [ "application/json" ]
			},
			"get": {
				"summary": "get opsnote list",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getOpsNoteList",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/OpsNotePaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"description": "Filter the response based on tags, createdBy, happenedOn, monitorObjectGroups, monitorObjectNames, or _all field values",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Ops Notes" ]
			}
		},
		"/website/websites/{id}/historysdts": {
			"get": {
				"summary": "get SDT history for the website",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getSDTHistoryByWebsiteId",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/WebsiteSDTHistoryPaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Websites" ]
			}
		},
		"/setting/datasources/{dsId}/ographs": {
			"get": {
				"summary": "get datasource overview graph list",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getDataSourceOverviewGraphList",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/DatasourceOverviewGraphPaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "dsId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Datasources" ]
			}
		},
		"/device/devices/{id}/historysdts": {
			"get": {
				"summary": "get SDT history for the device",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getSDTHistoryByDeviceId",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/DeviceSDTHistoryPaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "query",
						"name": "start",
						"format": "int64",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "end",
						"format": "int64",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "netflowFilter",
						"type": "string",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Devices" ]
			}
		},
		"/device/devices/{deviceId}/devicedatasources/{hdsId}/instances/{instanceId}/config/{id}": {
			"get": {
				"summary": "get a config for a device",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getDeviceConfigSourceConfigById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/DeviceDataSourceInstanceConfig" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "deviceId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "hdsId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "instanceId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"pattern": "[-_a-zA-Z0-9]+",
						"type": "string",
						"required": true
					},
					{
						"default": "json",
						"in": "query",
						"name": "format",
						"type": "string",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "startEpoch",
						"format": "int64",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Data" ]
			}
		},
		"/device/groups/{deviceGroupId}/datasources": {
			"get": {
				"summary": "get ResourceGroup datasource list",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getDeviceGroupDatasourceList",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/DeviceGroupDatasourcePaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "deviceGroupId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"default": false,
						"in": "query",
						"name": "includeDisabledDataSourceWithoutInstance",
						"type": "boolean",
						"required": false
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "ResourceGroups" ]
			}
		},
		"/setting/accesslogs/{id}": {
			"get": {
				"summary": "Get audit log by id",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getAuditLogById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/AuditLog" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"type": "string",
						"required": true
					}
				],
				"tags": [ "Audit Logs" ]
			}
		},
		"/device/devices/{deviceId}/devicedatasources/{deviceDsId}/groups": {
			"post": {
				"summary": "add device datasource instance group ",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "addDeviceDatasourceInstanceGroup",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/DeviceDataSourceInstanceGroup" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "deviceId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "deviceDsId",
						"pattern": "\\d+",
						"format": "int32",
						"description": "The device-datasource ID you\u0027d like to add an instance group for",
						"type": "integer",
						"required": true
					},
					{
						"schema": { "$ref": "#/definitions/DeviceDataSourceInstanceGroup" },
						"in": "body",
						"name": "body",
						"required": true
					}
				],
				"tags": [ "Datasource Instances" ],
				"consumes": [ "application/json" ]
			},
			"get": {
				"summary": "get device datasource instance group list ",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getDeviceDatasourceInstanceGroupList",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/DeviceDatasourceInstanceGroupPaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "deviceId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "deviceDsId",
						"pattern": "\\d+",
						"format": "int32",
						"description": "The device-datasource ID you\u0027d like to add an instance group for",
						"type": "integer",
						"required": true
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Datasource Instances" ]
			}
		},
		"/setting/alert/chains": {
			"post": {
				"summary": "add escalation chain",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "addEscalationChain",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/EscalatingChain" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"schema": { "$ref": "#/definitions/EscalatingChain" },
						"in": "body",
						"name": "body",
						"required": true
					}
				],
				"tags": [ "Escalation Chains" ],
				"consumes": [ "application/json" ]
			},
			"get": {
				"summary": "get escalation chain list",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getEscalationChainList",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/EscalationChainPaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Escalation Chains" ]
			}
		},
		"/setting/functions/{id}": {
			"patch": {
				"summary": "update applies to function",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "patchAppliesToFunction",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/AppliesToFunction" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"schema": { "$ref": "#/definitions/AppliesToFunction" },
						"in": "body",
						"name": "body",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "query",
						"name": "reason",
						"type": "string",
						"required": false
					},
					{
						"default": false,
						"in": "query",
						"name": "ignoreReference",
						"type": "boolean",
						"required": false
					}
				],
				"tags": [ "AppliesToFunctions" ],
				"consumes": [ "application/json" ]
			},
			"get": {
				"summary": "get applies to function",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getAppliesToFunctionById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/AppliesToFunction" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					}
				],
				"tags": [ "AppliesToFunctions" ]
			},
			"delete": {
				"summary": "delete applies to function",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "deleteAppliesToFunctionById",
				"responses": {
					"200": {
						"schema": { "type": "object" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"default": false,
						"in": "query",
						"name": "ignoreReference",
						"type": "boolean",
						"required": false
					}
				],
				"tags": [ "AppliesToFunctions" ]
			},
			"put": {
				"summary": "update applies to function",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "updateAppliesToFunction",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/AppliesToFunction" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"schema": { "$ref": "#/definitions/AppliesToFunction" },
						"in": "body",
						"name": "body",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "query",
						"name": "reason",
						"type": "string",
						"required": false
					},
					{
						"default": false,
						"in": "query",
						"name": "ignoreReference",
						"type": "boolean",
						"required": false
					}
				],
				"tags": [ "AppliesToFunctions" ],
				"consumes": [ "application/json" ]
			}
		},
		"/aws/externalId": {
			"get": {
				"summary": "Get AWS external id",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getAwsExternalId",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/AwsExternalId" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [],
				"tags": [ "ResourceGroups" ]
			}
		},
		"/device/groups/{gid}/properties": {
			"post": {
				"summary": "add ResourceGroup property",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "addDeviceGroupProperty",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/EntityProperty" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "gid",
						"pattern": "\\d+",
						"format": "int32",
						"description": "group ID",
						"type": "integer",
						"required": true
					},
					{
						"schema": { "$ref": "#/definitions/EntityProperty" },
						"in": "body",
						"name": "body",
						"required": true
					}
				],
				"tags": [ "ResourceGroups" ],
				"consumes": [ "application/json" ]
			},
			"get": {
				"summary": "get ResourceGroup properties",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getDeviceGroupPropertyList",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/PropertyPaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "gid",
						"pattern": "\\d+",
						"format": "int32",
						"description": "group ID",
						"type": "integer",
						"required": true
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "ResourceGroups" ]
			}
		},
		"/report/reports": {
			"post": {
				"summary": "add report",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "addReport",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/ReportBase" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"schema": { "$ref": "#/definitions/ReportBase" },
						"in": "body",
						"name": "body",
						"required": true
					}
				],
				"tags": [ "Report" ],
				"consumes": [ "application/json" ]
			},
			"get": {
				"summary": "get report list",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getReportList",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/ReportPaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Report" ]
			}
		},
		"/setting/collector/collectors": {
			"post": {
				"summary": "add collector",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "addCollector",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/Collector" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"schema": { "$ref": "#/definitions/Collector" },
						"in": "body",
						"name": "body",
						"required": true
					}
				],
				"tags": [ "Collectors" ],
				"consumes": [ "application/json" ]
			},
			"get": {
				"summary": "get collector list",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getCollectorList",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/CollectorPaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Collectors" ]
			}
		},
		"/device/devices/{deviceId}/devicedatasources/{hdsId}/instances/{instanceId}/config/collectNow": {
			"get": {
				"summary": "collect a config for a device",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "collectDeviceConfigSourceConfig",
				"responses": {
					"200": {
						"schema": { "type": "object" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "deviceId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "hdsId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "instanceId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					}
				],
				"tags": [ "Datasource Instances" ]
			}
		},
		"/device/devices/{id}": {
			"patch": {
				"summary": "update a device",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "patchDevice",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/Device" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "query",
						"name": "start",
						"format": "int64",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "end",
						"format": "int64",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "netflowFilter",
						"type": "string",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"schema": { "$ref": "#/definitions/Device" },
						"in": "body",
						"name": "body",
						"required": true
					},
					{
						"default": "refresh",
						"in": "query",
						"name": "opType",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Devices" ],
				"consumes": [ "application/json" ]
			},
			"get": {
				"summary": "get device by id",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getDeviceById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/Device" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "query",
						"name": "start",
						"format": "int64",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "end",
						"format": "int64",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "netflowFilter",
						"type": "string",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Devices" ]
			},
			"delete": {
				"summary": "delete a device",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "deleteDeviceById",
				"responses": {
					"200": {
						"schema": { "type": "object" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "query",
						"name": "start",
						"format": "int64",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "end",
						"format": "int64",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "netflowFilter",
						"type": "string",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"default": true,
						"in": "query",
						"name": "deleteHard",
						"type": "boolean",
						"required": false
					}
				],
				"tags": [ "Devices" ]
			},
			"put": {
				"summary": "update a device",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "updateDevice",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/Device" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "query",
						"name": "start",
						"format": "int64",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "end",
						"format": "int64",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "netflowFilter",
						"type": "string",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"schema": { "$ref": "#/definitions/Device" },
						"in": "body",
						"name": "body",
						"required": true
					},
					{
						"default": "refresh",
						"in": "query",
						"name": "opType",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Devices" ],
				"consumes": [ "application/json" ]
			}
		},
		"/device/devices/{deviceId}/devicedatasources/{hdsId}/instances/{instanceId}/alertsettings": {
			"get": {
				"summary": "get a list of alert settings for a device datasource instance",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getDeviceDatasourceInstanceAlertSettingListOfDSI",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/DeviceDataSourceInstanceAlertSettingPaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "deviceId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "hdsId",
						"pattern": "\\d+",
						"format": "int32",
						"description": "Device-DataSource ID",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "instanceId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					}
				],
				"tags": [ "Thresholds" ]
			}
		},
		"/device/devices/{deviceId}/devicedatasources/{hdsId}/instances/{id}/graphs/{graphId}/data": {
			"get": {
				"summary": "get device instance graph data ",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getDeviceDatasourceInstanceGraphData",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/GraphPlot" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "deviceId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "hdsId",
						"pattern": "\\d+",
						"format": "int32",
						"description": "The device-datasource ID",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "query",
						"name": "start",
						"format": "int64",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "end",
						"format": "int64",
						"type": "integer",
						"required": false
					},
					{
						"in": "path",
						"name": "graphId",
						"pattern": "-?\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "query",
						"name": "format",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Data" ]
			}
		},
		"/device/devices/{id}/flows": {
			"get": {
				"summary": "get netflow flow list",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getNetflowFlowList",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/FlowRecordPaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "query",
						"name": "start",
						"format": "int64",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "end",
						"format": "int64",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "netflowFilter",
						"type": "string",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Devices" ]
			}
		},
		"/setting/recipientgroups/{id}": {
			"patch": {
				"summary": "update recipient group",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "patchRecipientGroupById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/RecipientGroup" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"schema": { "$ref": "#/definitions/RecipientGroup" },
						"in": "body",
						"name": "body",
						"required": true
					}
				],
				"tags": [ "Recipient Groups" ],
				"consumes": [ "application/json" ]
			},
			"get": {
				"summary": "get recipient group by id",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getRecipientGroupById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/RecipientGroup" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					}
				],
				"tags": [ "Recipient Groups" ]
			},
			"delete": {
				"summary": "delete recipient group",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "deleteRecipientGroupById",
				"responses": {
					"200": {
						"schema": { "type": "object" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					}
				],
				"tags": [ "Recipient Groups" ]
			},
			"put": {
				"summary": "update recipient group",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "updateRecipientGroupById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/RecipientGroup" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"schema": { "$ref": "#/definitions/RecipientGroup" },
						"in": "body",
						"name": "body",
						"required": true
					}
				],
				"tags": [ "Recipient Groups" ],
				"consumes": [ "application/json" ]
			}
		},
		"/device/devices/{deviceId}/alertsettings": {
			"get": {
				"summary": "get a list of alert settings for a device",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getDeviceDatasourceInstanceAlertSettingListOfDevice",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/DeviceDataSourceInstanceAlertSettingPaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "query",
						"name": "start",
						"format": "int64",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "end",
						"format": "int64",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "netflowFilter",
						"type": "string",
						"required": false
					},
					{
						"in": "path",
						"name": "deviceId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					}
				],
				"tags": [ "Devices" ]
			}
		},
		"/website/websites/{id}": {
			"patch": {
				"summary": "update website",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "patchWebsiteById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/Website" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"schema": { "$ref": "#/definitions/Website" },
						"in": "body",
						"name": "body",
						"required": true
					},
					{
						"default": "refresh",
						"in": "query",
						"name": "opType",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Websites" ],
				"consumes": [ "application/json" ]
			},
			"get": {
				"summary": "get website by id",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getWebsiteById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/Website" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"default": "json",
						"in": "query",
						"name": "format",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Websites" ],
				"consumes": [ "application/json" ]
			},
			"delete": {
				"summary": "delete website",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "deleteWebsiteById",
				"responses": {
					"200": {
						"schema": { "type": "object" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					}
				],
				"tags": [ "Websites" ]
			},
			"put": {
				"summary": "update website",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "updateWebsiteById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/Website" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"schema": { "$ref": "#/definitions/Website" },
						"in": "body",
						"name": "body",
						"required": true
					},
					{
						"default": "refresh",
						"in": "query",
						"name": "opType",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Websites" ],
				"consumes": [ "application/json" ]
			}
		},
		"/report/groups": {
			"post": {
				"summary": "add report group",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "addReportGroup",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/ReportGroup" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"schema": { "$ref": "#/definitions/ReportGroup" },
						"in": "body",
						"name": "body",
						"required": true
					}
				],
				"tags": [ "Report Groups" ],
				"consumes": [ "application/json" ]
			},
			"get": {
				"summary": "get report group list",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getReportGroupList",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/ReportGroupPaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Report Groups" ]
			}
		},
		"/setting/roles/{id}": {
			"patch": {
				"summary": "update role",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "patchRoleById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/Role" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"schema": { "$ref": "#/definitions/Role" },
						"in": "body",
						"name": "body",
						"required": true
					}
				],
				"tags": [ "Roles" ],
				"consumes": [ "application/json" ]
			},
			"get": {
				"summary": "get role by id",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getRoleById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/Role" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Roles" ]
			},
			"delete": {
				"summary": "delete role",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "deleteRoleById",
				"responses": {
					"200": {
						"schema": { "type": "object" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					}
				],
				"tags": [ "Roles" ]
			},
			"put": {
				"summary": "update role",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "updateRoleById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/Role" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"schema": { "$ref": "#/definitions/Role" },
						"in": "body",
						"name": "body",
						"required": true
					}
				],
				"tags": [ "Roles" ],
				"consumes": [ "application/json" ]
			}
		},
		"/device/groups/{deviceGroupId}/clusterAlertConf": {
			"post": {
				"summary": "Add cluster alert configuration",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "addDeviceGroupClusterAlertConf",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/DeviceClusterAlertConfig" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "deviceGroupId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"schema": { "$ref": "#/definitions/DeviceClusterAlertConfig" },
						"in": "body",
						"name": "body",
						"required": true
					}
				],
				"tags": [ "Thresholds" ],
				"consumes": [ "application/json" ]
			},
			"get": {
				"summary": "get a list of cluster alert configurations for a ResourceGroup",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getDeviceGroupClusterAlertConfList",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/DeviceClusterAlertConfigPaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "deviceGroupId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Thresholds" ]
			}
		},
		"/device/groups/{id}": {
			"patch": {
				"summary": "update ResourceGroup",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "patchDeviceGroupById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/DeviceGroup" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"default": "refresh",
						"in": "query",
						"name": "opType",
						"type": "string",
						"required": false
					},
					{
						"schema": { "$ref": "#/definitions/DeviceGroup" },
						"in": "body",
						"name": "body",
						"required": true
					}
				],
				"tags": [ "ResourceGroups" ],
				"consumes": [ "application/json" ]
			},
			"get": {
				"summary": "get ResourceGroup",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getDeviceGroupById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/DeviceGroup" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "ResourceGroups" ]
			},
			"delete": {
				"summary": "delete ResourceGroup",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "deleteDeviceGroupById",
				"responses": {
					"200": {
						"schema": { "type": "object" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"default": false,
						"in": "query",
						"name": "deleteChildren",
						"type": "boolean",
						"required": false
					},
					{
						"default": true,
						"in": "query",
						"name": "deleteHard",
						"type": "boolean",
						"required": false
					}
				],
				"tags": [ "ResourceGroups" ]
			},
			"put": {
				"summary": "update ResourceGroup",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "updateDeviceGroupById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/DeviceGroup" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"default": "refresh",
						"in": "query",
						"name": "opType",
						"type": "string",
						"required": false
					},
					{
						"schema": { "$ref": "#/definitions/DeviceGroup" },
						"in": "body",
						"name": "body",
						"required": true
					}
				],
				"tags": [ "ResourceGroups" ],
				"consumes": [ "application/json" ]
			}
		},
		"/setting/netscans": {
			"post": {
				"summary": "add a new netscan",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "addNetscan",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/Netscan" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"schema": { "$ref": "#/definitions/Netscan" },
						"in": "body",
						"name": "body",
						"required": false
					}
				],
				"tags": [ "Netscans" ],
				"consumes": [ "application/json" ]
			},
			"get": {
				"summary": "get netscan list",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getNetscanList",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/NetscanPaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Netscans" ]
			}
		},
		"/website/groups/{id}": {
			"patch": {
				"summary": "update website group",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "patchWebsiteGroupById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/WebsiteGroup" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"schema": { "$ref": "#/definitions/WebsiteGroup" },
						"in": "body",
						"name": "body",
						"required": true
					},
					{
						"default": "refresh",
						"in": "query",
						"name": "opType",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Website Groups" ],
				"consumes": [ "application/json" ]
			},
			"get": {
				"summary": "get website group",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getWebsiteGroupById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/WebsiteGroup" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					}
				],
				"tags": [ "Website Groups" ],
				"consumes": [ "application/json" ]
			},
			"delete": {
				"summary": "delete website group",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "deleteWebsiteGroupById",
				"responses": {
					"200": {
						"schema": { "type": "object" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "deleteChildren",
						"format": "int32",
						"type": "integer",
						"required": false
					}
				],
				"tags": [ "Website Groups" ],
				"consumes": [ "application/json" ]
			},
			"put": {
				"summary": "update website group",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "updateWebsiteGroupById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/WebsiteGroup" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"schema": { "$ref": "#/definitions/WebsiteGroup" },
						"in": "body",
						"name": "body",
						"required": true
					},
					{
						"default": "refresh",
						"in": "query",
						"name": "opType",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Website Groups" ],
				"consumes": [ "application/json" ]
			}
		},
		"/device/devices/{deviceId}/devicedatasources/{hdsId}/instances": {
			"post": {
				"summary": "add device instance ",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "addDeviceDatasourceInstance",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/DeviceDataSourceInstance" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "deviceId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "hdsId",
						"pattern": "\\d+",
						"format": "int32",
						"description": "The device-datasource ID",
						"type": "integer",
						"required": true
					},
					{
						"schema": { "$ref": "#/definitions/DeviceDataSourceInstance" },
						"in": "body",
						"name": "body",
						"required": true
					}
				],
				"tags": [ "Datasource Instances" ],
				"consumes": [ "application/json" ]
			},
			"get": {
				"summary": "get device instance list",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getDeviceDatasourceInstanceList",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/DeviceDatasourceInstancePaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "deviceId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "hdsId",
						"pattern": "\\d+",
						"format": "int32",
						"description": "The device-datasource ID",
						"type": "integer",
						"required": true
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Datasource Instances" ]
			}
		},
		"/website/websites/{id}/properties": {
			"get": {
				"summary": "get a list of properties for a website",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getWebsitePropertyListByWebsiteId",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/PropertyPaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Websites" ]
			}
		},
		"/debug": {
			"post": {
				"summary": "Execute a Collector debug command",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "executeDebugCommand",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/Debug" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"schema": { "$ref": "#/definitions/Debug" },
						"in": "body",
						"name": "body",
						"required": false
					},
					{
						"default": -1.0,
						"in": "query",
						"name": "collectorId",
						"format": "int32",
						"type": "integer",
						"required": false
					}
				],
				"tags": [ "Debug" ],
				"consumes": [ "application/json" ]
			}
		},
		"/setting/batchjobs/importxml": {
			"post": {
				"summary": "import batch job via xml",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "importBatchJob",
				"responses": {
					"200": {
						"schema": { "type": "object" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "formData",
						"name": "file",
						"type": "file",
						"required": true
					}
				],
				"tags": [ "BatchJobs" ],
				"consumes": [ "multipart/form-data" ]
			}
		},
		"/setting/datasources/{id}/devices": {
			"get": {
				"summary": "get devices associated with a datasource",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getAssociatedDeviceListByDataSourceId",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/DeviceDataSourceAssociatedPaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Datasources" ]
			}
		},
		"/dashboard/widgets/{id}": {
			"patch": {
				"summary": "update widget",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "patchWidgetById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/Widget" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"schema": { "$ref": "#/definitions/Widget" },
						"in": "body",
						"name": "body",
						"required": true
					}
				],
				"tags": [ "Widgets" ],
				"consumes": [ "application/json" ]
			},
			"get": {
				"summary": "get widget by id",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getWidgetById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/Widget" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Widgets" ]
			},
			"delete": {
				"summary": "delete widget",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "deleteWidgetById",
				"responses": {
					"200": {
						"schema": { "type": "object" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					}
				],
				"tags": [ "Widgets" ]
			},
			"put": {
				"summary": "update widget",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "updateWidgetById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/Widget" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"schema": { "$ref": "#/definitions/Widget" },
						"in": "body",
						"name": "body",
						"required": true
					}
				],
				"tags": [ "Widgets" ],
				"consumes": [ "application/json" ]
			}
		},
		"/setting/admins/{adminId}/apitokens": {
			"post": {
				"summary": "add api tokens for a user",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "addApiTokenByAdminId",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/APIToken" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "adminId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"schema": { "$ref": "#/definitions/APIToken" },
						"in": "body",
						"name": "body",
						"required": true
					},
					{
						"default": "API Token",
						"in": "query",
						"name": "type",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "API Tokens" ],
				"consumes": [ "application/json" ]
			},
			"get": {
				"summary": "get api tokens for a user",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getApiTokenListByAdminId",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/ApiTokenPaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "adminId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "API Tokens" ]
			}
		},
		"/apiStats/externalApis": {
			"get": {
				"summary": "get external api stats info",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getExternalApiStats",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/ApiPerfMetrics" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [],
				"tags": [ "ApiPerfStats" ]
			}
		},
		"/sdt/sdts": {
			"post": {
				"summary": "add SDT",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "addSDT",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/SDT" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"schema": { "$ref": "#/definitions/SDT" },
						"in": "body",
						"name": "body",
						"required": true
					}
				],
				"tags": [ "SDTs" ],
				"consumes": [ "application/json" ]
			},
			"get": {
				"summary": "get SDT list",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getSDTList",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/SDTPaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "SDTs" ]
			}
		},
		"/dashboard/widgets": {
			"post": {
				"summary": "add widget",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "addWidget",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/Widget" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"schema": { "$ref": "#/definitions/Widget" },
						"in": "body",
						"name": "body",
						"required": true
					}
				],
				"tags": [ "Widgets" ],
				"consumes": [ "application/json" ]
			},
			"get": {
				"summary": "get widget list",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getWidgetList",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/WidgetPaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Widgets" ]
			}
		},
		"/alert/alerts/{id}/ack": {
			"post": {
				"summary": "ack alert by id",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "ackAlertById",
				"responses": {
					"200": {
						"schema": { "type": "object" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"schema": { "$ref": "#/definitions/AlertAck" },
						"in": "body",
						"name": "body",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"type": "string",
						"required": true
					}
				],
				"tags": [ "Alerts" ],
				"consumes": [ "application/json" ]
			}
		},
		"/device/devices/{deviceId}/devicedatasources/{hdsId}/instances/{id}/historysdts": {
			"get": {
				"summary": "get device instance SDT history",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getDeviceDatasourceInstanceSDTHistory",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/DeviceGroupSDTHistoryPaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "deviceId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "hdsId",
						"pattern": "\\d+",
						"format": "int32",
						"description": "The device-datasource ID",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Datasource Instances" ]
			}
		},
		"/device/devices/{id}/sdts": {
			"get": {
				"summary": "get SDTs for a device",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getAllSDTListByDeviceId",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/SDTPaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "query",
						"name": "start",
						"format": "int64",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "end",
						"format": "int64",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "netflowFilter",
						"type": "string",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Devices" ]
			}
		},
		"/device/devices/{id}/instances": {
			"get": {
				"summary": "get device instance list",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getDeviceInstanceList",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/DeviceDatasourceInstancePaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "query",
						"name": "start",
						"format": "int64",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "end",
						"format": "int64",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "netflowFilter",
						"type": "string",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Devices" ]
			}
		},
		"/setting/dnsmappings": {
			"post": {
				"summary": "import DNS mapping via CSV",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "importDNSMapping",
				"responses": {
					"200": {
						"schema": { "type": "object" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "formData",
						"name": "file",
						"description": "the csv mapping to be uploaded",
						"type": "file",
						"required": true
					}
				],
				"tags": [ "DNSMappings" ],
				"consumes": [ "multipart/form-data" ]
			}
		},
		"/device/devices/{deviceId}/devicedatasources/{deviceDsId}/groups/{id}": {
			"patch": {
				"summary": "update device datasource instance group ",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "patchDeviceDatasourceInstanceGroupById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/DeviceDataSourceInstanceGroup" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "deviceId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "deviceDsId",
						"pattern": "\\d+",
						"format": "int32",
						"description": "The device-datasource ID you\u0027d like to add an instance group for",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"schema": { "$ref": "#/definitions/DeviceDataSourceInstanceGroup" },
						"in": "body",
						"name": "body",
						"required": true
					}
				],
				"tags": [ "Datasource Instances" ],
				"consumes": [ "application/json" ]
			},
			"get": {
				"summary": "get device datasource instance group ",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getDeviceDatasourceInstanceGroupById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/DeviceDataSourceInstanceGroup" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "deviceId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "deviceDsId",
						"pattern": "\\d+",
						"format": "int32",
						"description": "The device-datasource ID you\u0027d like to add an instance group for",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Datasource Instances" ]
			},
			"put": {
				"summary": "update device datasource instance group ",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "updateDeviceDatasourceInstanceGroupById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/DeviceDataSourceInstanceGroup" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "deviceId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "deviceDsId",
						"pattern": "\\d+",
						"format": "int32",
						"description": "The device-datasource ID you\u0027d like to add an instance group for",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"schema": { "$ref": "#/definitions/DeviceDataSourceInstanceGroup" },
						"in": "body",
						"name": "body",
						"required": true
					}
				],
				"tags": [ "Datasource Instances" ],
				"consumes": [ "application/json" ]
			}
		},
		"/device/unmonitoreddevices": {
			"get": {
				"summary": "get unmonitored device list",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getUnmonitoredDeviceList",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/UnmonitoredDevicePaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Devices" ]
			}
		},
		"/setting/datasources": {
			"get": {
				"summary": "get datasource list",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getDatasourceList",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/DatasourcePaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"default": "json",
						"in": "query",
						"name": "format",
						"type": "string",
						"required": false
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Datasources" ]
			}
		},
		"/dashboard/groups/{id}": {
			"patch": {
				"summary": "update dashboard group",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "The template field works only for the POST API",
				"operationId": "patchDashboardGroupById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/DashboardGroup" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"schema": { "$ref": "#/definitions/DashboardGroup" },
						"in": "body",
						"name": "body",
						"required": true
					}
				],
				"tags": [ "Dashboard Groups" ],
				"consumes": [ "application/json" ]
			},
			"get": {
				"summary": "get dashboard group",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getDashboardGroupById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/DashboardGroup" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"default": false,
						"in": "query",
						"name": "template",
						"type": "boolean",
						"required": false
					},
					{
						"default": "json",
						"in": "query",
						"name": "format",
						"type": "string",
						"required": false
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Dashboard Groups" ]
			},
			"delete": {
				"summary": "delete dashboard group",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "deleteDashboardGroupById",
				"responses": {
					"200": {
						"schema": { "type": "object" },
						"description": "OK"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"default": false,
						"in": "query",
						"name": "allowNonEmptyGroup",
						"type": "boolean",
						"required": false
					}
				],
				"tags": [ "Dashboard Groups" ]
			},
			"put": {
				"summary": "update dashboard group",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "The template field works only for the POST API",
				"operationId": "updateDashboardGroupById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/DashboardGroup" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"schema": { "$ref": "#/definitions/DashboardGroup" },
						"in": "body",
						"name": "body",
						"required": true
					}
				],
				"tags": [ "Dashboard Groups" ],
				"consumes": [ "application/json" ]
			}
		},
		"/device/groups": {
			"post": {
				"summary": "add ResourceGroup",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "addDeviceGroup",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/DeviceGroup" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"schema": { "$ref": "#/definitions/DeviceGroup" },
						"in": "body",
						"name": "body",
						"required": true
					}
				],
				"tags": [ "ResourceGroups" ],
				"consumes": [ "application/json" ]
			},
			"get": {
				"summary": "get ResourceGroup list",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getDeviceGroupList",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/DeviceGroupPaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "ResourceGroups" ]
			}
		},
		"/setting/functions": {
			"post": {
				"summary": "add applies to function",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "addAppliesToFunction",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/AppliesToFunction" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"schema": { "$ref": "#/definitions/AppliesToFunction" },
						"in": "body",
						"name": "body",
						"required": false
					}
				],
				"tags": [ "AppliesToFunctions" ],
				"consumes": [ "application/json" ]
			},
			"get": {
				"summary": "get applies to function list",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getAppliesToFunctionList",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/RestAppliesToFunctionPaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "AppliesToFunctions" ]
			}
		},
		"/setting/collector/groups": {
			"post": {
				"summary": "add collector group",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "addCollectorGroup",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/CollectorGroup" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"schema": { "$ref": "#/definitions/CollectorGroup" },
						"in": "body",
						"name": "body",
						"required": true
					}
				],
				"tags": [ "Collector Groups" ],
				"consumes": [ "application/json" ]
			},
			"get": {
				"summary": "get collector group list",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getCollectorGroupList",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/CollectorGroupPaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Collector Groups" ]
			}
		},
		"/device/devices/{deviceId}/devicedatasources/{deviceDsId}/groups/{dsigId}/graphs/{ographId}/data": {
			"get": {
				"summary": "get device instance group overview graph data ",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getDeviceDatasourceInstanceGroupOverviewGraphData",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/GraphPlot" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "deviceId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "deviceDsId",
						"pattern": "\\d+",
						"format": "int32",
						"description": "The device-datasource ID you\u0027d like to add an instance group for",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "dsigId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "query",
						"name": "start",
						"format": "int64",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "end",
						"format": "int64",
						"type": "integer",
						"required": false
					},
					{
						"in": "path",
						"name": "ographId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "query",
						"name": "format",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Data" ]
			}
		},
		"/website/websites/{id}/alerts": {
			"get": {
				"summary": "get alerts for a website",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getWebsiteAlertListByWebsiteId",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/AlertPaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"default": false,
						"in": "query",
						"name": "needMessage",
						"type": "boolean",
						"required": false
					},
					{
						"in": "query",
						"name": "customColumns",
						"type": "string",
						"required": false
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Websites" ]
			}
		},
		"/device/devices/{deviceId}/devicedatasources/{id}/data": {
			"get": {
				"summary": "get device datasource data ",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getDeviceDatasourceDataById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/DeviceDataSourceData" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "deviceId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"default": 1.0,
						"in": "query",
						"name": "period",
						"format": "double",
						"type": "number",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "start",
						"format": "int64",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "end",
						"format": "int64",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "datapoints",
						"type": "string",
						"required": false
					},
					{
						"default": "json",
						"in": "query",
						"name": "format",
						"type": "string",
						"required": false
					},
					{
						"default": "none",
						"in": "query",
						"name": "aggregate",
						"description": "the aggregate option",
						"type": "string",
						"required": false,
						"enum": [ "first", "last", "min", "max", "sum", "average", "none" ]
					}
				],
				"tags": [ "Devices" ]
			}
		},
		"/device/devices/{deviceId}/properties/{name}": {
			"patch": {
				"summary": "update device property",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "patchDevicePropertyByName",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/EntityProperty" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "deviceId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "name",
						"pattern": "[^/]+",
						"type": "string",
						"required": true
					},
					{
						"schema": { "$ref": "#/definitions/EntityProperty" },
						"in": "body",
						"name": "body",
						"required": true
					}
				],
				"tags": [ "Devices" ],
				"consumes": [ "application/json" ]
			},
			"get": {
				"summary": "get device property by name",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getDevicePropertyByName",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/EntityProperty" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "deviceId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "name",
						"pattern": "[^/]+",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Devices" ]
			},
			"delete": {
				"summary": "delete device property",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "deleteDevicePropertyByName",
				"responses": {
					"200": {
						"schema": { "type": "object" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "deviceId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "name",
						"pattern": "[^/]+",
						"type": "string",
						"required": true
					}
				],
				"tags": [ "Devices" ]
			},
			"put": {
				"summary": "update device property",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "updateDevicePropertyByName",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/EntityProperty" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "deviceId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "name",
						"pattern": "[^/]+",
						"type": "string",
						"required": true
					},
					{
						"schema": { "$ref": "#/definitions/EntityProperty" },
						"in": "body",
						"name": "body",
						"required": true
					}
				],
				"tags": [ "Devices" ],
				"consumes": [ "application/json" ]
			}
		},
		"/setting/admins/{id}": {
			"patch": {
				"summary": "update user",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "patchAdminById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/Admin" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"schema": { "$ref": "#/definitions/Admin" },
						"in": "body",
						"name": "body",
						"required": true
					},
					{
						"default": false,
						"in": "query",
						"name": "changePassword",
						"type": "boolean",
						"required": false
					}
				],
				"tags": [ "Users" ],
				"consumes": [ "application/json" ]
			},
			"get": {
				"summary": "get user",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getAdminById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/Admin" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Users" ]
			},
			"delete": {
				"summary": "delete user",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "deleteAdminById",
				"responses": {
					"200": {
						"schema": { "type": "object" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					}
				],
				"tags": [ "Users" ]
			},
			"put": {
				"summary": "update user",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "updateAdminById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/Admin" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"schema": { "$ref": "#/definitions/Admin" },
						"in": "body",
						"name": "body",
						"required": true
					},
					{
						"default": false,
						"in": "query",
						"name": "changePassword",
						"type": "boolean",
						"required": false
					}
				],
				"tags": [ "Users" ],
				"consumes": [ "application/json" ]
			}
		},
		"/setting/eventsources/importxml": {
			"post": {
				"summary": "import eventsource via xml",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "importEventSource",
				"responses": {
					"200": {
						"schema": { "type": "object" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "formData",
						"name": "file",
						"type": "file",
						"required": true
					}
				],
				"tags": [ "EventSources" ],
				"consumes": [ "multipart/form-data" ]
			}
		},
		"/website/websites/{websiteId}/checkpoints/{checkpointId}/graphs/{graphName}/data": {
			"get": {
				"summary": "get website graph data",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getWebsiteGraphData",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/GraphPlot" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "websiteId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "checkpointId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "query",
						"name": "start",
						"format": "int64",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "end",
						"format": "int64",
						"type": "integer",
						"required": false
					},
					{
						"in": "path",
						"name": "graphName",
						"pattern": ".+",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "format",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Data" ]
			}
		},
		"/device/groups/{id}/historysdts": {
			"get": {
				"summary": "get SDT history for the group",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getSDTHistoryByDeviceGroupId",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/DeviceGroupSDTHistoryPaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "ResourceGroups" ]
			}
		},
		"/setting/admins/{adminId}/apitokens/{apitokenId}": {
			"patch": {
				"summary": "update api tokens for a user",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "patchApiTokenByAdminId",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/APIToken" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "adminId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "apitokenId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"schema": { "$ref": "#/definitions/APIToken" },
						"in": "body",
						"name": "body",
						"required": true
					}
				],
				"tags": [ "API Tokens" ],
				"consumes": [ "application/json" ]
			},
			"delete": {
				"summary": "delete apiToken",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "deleteApiTokenById",
				"responses": {
					"200": {
						"schema": { "type": "object" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "adminId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "apitokenId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					}
				],
				"tags": [ "API Tokens" ]
			},
			"put": {
				"summary": "update api tokens for a user",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "updateApiTokenByAdminId",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/APIToken" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "adminId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "apitokenId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"schema": { "$ref": "#/definitions/APIToken" },
						"in": "body",
						"name": "body",
						"required": true
					}
				],
				"tags": [ "API Tokens" ],
				"consumes": [ "application/json" ]
			}
		},
		"/alert/alerts/{id}/note": {
			"post": {
				"summary": "add alert note",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "addAlertNoteById",
				"responses": {
					"200": {
						"schema": { "type": "object" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"schema": { "$ref": "#/definitions/AlertAck" },
						"in": "body",
						"name": "body",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"type": "string",
						"required": true
					}
				],
				"tags": [ "Alerts" ],
				"consumes": [ "application/json" ]
			}
		},
		"/dashboard/dashboards": {
			"post": {
				"summary": "add dashboard",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "addDashboard",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/Dashboard" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"schema": { "$ref": "#/definitions/Dashboard" },
						"in": "body",
						"name": "body",
						"required": true
					}
				],
				"tags": [ "Dashboards" ],
				"consumes": [ "application/json" ]
			},
			"get": {
				"summary": "get dashboard list",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getDashboardList",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/DashboardPaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Dashboards" ]
			}
		},
		"/setting/admins/apitokens": {
			"get": {
				"summary": "get a list of api tokens across users",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getApiTokenList",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/ApiTokenPaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "API Tokens" ]
			}
		},
		"/setting/alert/chains/{id}": {
			"patch": {
				"summary": "update escalation chain",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "patchEscalationChainById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/EscalatingChain" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"schema": { "$ref": "#/definitions/EscalatingChain" },
						"in": "body",
						"name": "body",
						"required": true
					}
				],
				"tags": [ "Escalation Chains" ],
				"consumes": [ "application/json" ]
			},
			"get": {
				"summary": "get escalation chain by id",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getEscalationChainById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/EscalatingChain" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Escalation Chains" ]
			},
			"delete": {
				"summary": "delete escalation chain",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "deleteEscalationChainById",
				"responses": {
					"200": {
						"schema": { "type": "object" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					}
				],
				"tags": [ "Escalation Chains" ]
			},
			"put": {
				"summary": "update escalation chain",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "updateEscalationChainById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/EscalatingChain" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"schema": { "$ref": "#/definitions/EscalatingChain" },
						"in": "body",
						"name": "body",
						"required": true
					}
				],
				"tags": [ "Escalation Chains" ],
				"consumes": [ "application/json" ]
			}
		},
		"/device/groups/{deviceGroupId}/datasources/{dsId}/alertsettings": {
			"patch": {
				"summary": "update ResourceGroup datasource alert setting",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "patchDeviceGroupDatasourceAlertSetting",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/DeviceGroupDataSourceAlertConfig" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "deviceGroupId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "dsId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"schema": { "$ref": "#/definitions/DeviceGroupDataSourceAlertConfig" },
						"in": "body",
						"name": "body",
						"required": true
					}
				],
				"tags": [ "Thresholds" ],
				"consumes": [ "application/json" ]
			},
			"get": {
				"summary": "get ResourceGroup datasource alert setting ",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getDeviceGroupDatasourceAlertSetting",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/DeviceGroupDataSourceAlertConfig" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "deviceGroupId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "dsId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Thresholds" ]
			},
			"put": {
				"summary": "update ResourceGroup datasource alert setting",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "updateDeviceGroupDatasourceAlertSetting",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/DeviceGroupDataSourceAlertConfig" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "deviceGroupId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "dsId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"schema": { "$ref": "#/definitions/DeviceGroupDataSourceAlertConfig" },
						"in": "body",
						"name": "body",
						"required": true
					}
				],
				"tags": [ "Thresholds" ],
				"consumes": [ "application/json" ]
			}
		},
		"/setting/alert/rules/{id}": {
			"patch": {
				"summary": "update alert rule",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "patchAlertRuleById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/AlertRule" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"schema": { "$ref": "#/definitions/AlertRule" },
						"in": "body",
						"name": "body",
						"required": true
					}
				],
				"tags": [ "Alert Rules" ],
				"consumes": [ "application/json" ]
			},
			"get": {
				"summary": "get alert rule by id",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getAlertRuleById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/AlertRule" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Alert Rules" ]
			},
			"delete": {
				"summary": "delete alert rule",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "deleteAlertRuleById",
				"responses": {
					"200": {
						"schema": { "type": "object" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					}
				],
				"tags": [ "Alert Rules" ]
			},
			"put": {
				"summary": "update alert rule",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "updateAlertRuleById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/AlertRule" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"schema": { "$ref": "#/definitions/AlertRule" },
						"in": "body",
						"name": "body",
						"required": true
					}
				],
				"tags": [ "Alert Rules" ],
				"consumes": [ "application/json" ]
			}
		},
		"/device/devicedatasourceinstances/{instanceId}/graphs/{graphId}/data": {
			"get": {
				"summary": "get device instance data",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getDeviceInstanceGraphDataOnlyByInstanceId",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/GraphPlot" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "instanceId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "graphId",
						"pattern": "-?\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "query",
						"name": "start",
						"format": "int64",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "end",
						"format": "int64",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "format",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Data" ]
			}
		},
		"/setting/datasources/{id}": {
			"get": {
				"summary": "get datasource by id",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getDatasourceById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/DataSource" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"default": "json",
						"in": "query",
						"name": "format",
						"type": "string",
						"required": false
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Datasources" ]
			},
			"delete": {
				"summary": "delete datasource",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "deleteDatasourceById",
				"responses": {
					"200": {
						"schema": { "type": "object" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					}
				],
				"tags": [ "Datasources" ]
			}
		},
		"/setting/accesslogs": {
			"get": {
				"summary": "Get audit logs",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getAuditLogList",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/AccessLogPaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "query",
						"name": "format",
						"type": "string",
						"required": false
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Audit Logs" ]
			}
		},
		"/device/devices/{deviceId}/devicedatasources/{hdsId}/instances/{instanceId}/alertsettings/{id}": {
			"patch": {
				"summary": "update device instance alert setting",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "patchDeviceDatasourceInstanceAlertSettingById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/DeviceDataSourceInstanceAlertSetting" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "deviceId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "hdsId",
						"pattern": "\\d+",
						"format": "int32",
						"description": "Device-DataSource ID",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "instanceId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"schema": { "$ref": "#/definitions/DeviceDataSourceInstanceAlertSetting" },
						"in": "body",
						"name": "body",
						"required": true
					}
				],
				"tags": [ "Thresholds" ],
				"consumes": [ "application/json" ]
			},
			"get": {
				"summary": "get device instance alert setting",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getDeviceDatasourceInstanceAlertSettingById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/DeviceDataSourceInstanceAlertSetting" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "deviceId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "hdsId",
						"pattern": "\\d+",
						"format": "int32",
						"description": "Device-DataSource ID",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "instanceId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Thresholds" ]
			},
			"put": {
				"summary": "update device instance alert setting",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "updateDeviceDatasourceInstanceAlertSettingById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/DeviceDataSourceInstanceAlertSetting" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "deviceId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "hdsId",
						"pattern": "\\d+",
						"format": "int32",
						"description": "Device-DataSource ID",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "instanceId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"schema": { "$ref": "#/definitions/DeviceDataSourceInstanceAlertSetting" },
						"in": "body",
						"name": "body",
						"required": true
					}
				],
				"tags": [ "Thresholds" ],
				"consumes": [ "application/json" ]
			}
		},
		"/device/devices/{id}/topTalkersGraph": {
			"get": {
				"summary": "get top talkers graph",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getTopTalkersGraph",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/GraphPlot" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "query",
						"name": "start",
						"format": "int64",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "end",
						"format": "int64",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "netflowFilter",
						"type": "string",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "query",
						"name": "format",
						"type": "string",
						"required": false
					},
					{
						"in": "query",
						"name": "keyword",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Devices" ]
			}
		},
		"/setting/collector/collectors/{id}": {
			"patch": {
				"summary": "update collector",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "patchCollectorById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/Collector" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"schema": { "$ref": "#/definitions/Collector" },
						"in": "body",
						"name": "body",
						"required": true
					},
					{
						"default": false,
						"in": "query",
						"name": "forceUpdateFailedOverDevices",
						"type": "boolean",
						"required": false
					}
				],
				"tags": [ "Collectors" ],
				"consumes": [ "application/json" ]
			},
			"get": {
				"summary": "get collector",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getCollectorById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/Collector" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Collectors" ]
			},
			"delete": {
				"summary": "delete collector",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "deleteCollectorById",
				"responses": {
					"200": {
						"schema": { "type": "object" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					}
				],
				"tags": [ "Collectors" ]
			},
			"put": {
				"summary": "update collector",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "updateCollectorById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/Collector" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"schema": { "$ref": "#/definitions/Collector" },
						"in": "body",
						"name": "body",
						"required": true
					},
					{
						"default": false,
						"in": "query",
						"name": "forceUpdateFailedOverDevices",
						"type": "boolean",
						"required": false
					}
				],
				"tags": [ "Collectors" ],
				"consumes": [ "application/json" ]
			}
		},
		"/setting/collector/collectors/{collectorId}/installers/{osAndArch}": {
			"get": {
				"summary": "get collector installer",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getCollectorInstaller",
				"responses": {
					"200": {
						"schema": { "type": "file" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "collectorId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "osAndArch",
						"pattern": ".+",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "collectorVersion",
						"format": "int32",
						"description": "The version of the installer you\u0027d like to download. This defaults to the latest GD Collector, unless useEA is true",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "token",
						"type": "string",
						"required": false
					},
					{
						"default": true,
						"in": "query",
						"name": "monitorOthers",
						"type": "boolean",
						"required": false
					},
					{
						"default": "medium",
						"in": "query",
						"name": "collectorSize",
						"description": "The size of the Collector you\u0027d like to install. Options are nano, small (requires 2GB memory), medium (requires 4GB memory), large (requires 8GB memory), extra large (requires 16GB memory), double extra large (requires 32GB memory). Requires collector version 22.180 or higher. Defaults to small",
						"type": "string",
						"required": false
					},
					{
						"default": false,
						"in": "query",
						"name": "useEA",
						"description": "If true, the latest EA Collector version will be used. Defaults to false",
						"type": "boolean",
						"required": false
					}
				],
				"tags": [ "Collectors" ]
			}
		},
		"/setting/recipientgroups": {
			"post": {
				"summary": "add recipient group",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "addRecipientGroup",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/RecipientGroup" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"schema": { "$ref": "#/definitions/RecipientGroup" },
						"in": "body",
						"name": "body",
						"required": true
					}
				],
				"tags": [ "Recipient Groups" ],
				"consumes": [ "application/json" ]
			},
			"get": {
				"summary": "get recipient group List",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getRecipientGroupList",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/RecipientGroupPaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Recipient Groups" ]
			}
		},
		"/device/groups/{gid}/properties/{name}": {
			"patch": {
				"summary": "update ResourceGroup property",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "patchDeviceGroupPropertyByName",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/EntityProperty" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "gid",
						"pattern": "\\d+",
						"format": "int32",
						"description": "group ID",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "name",
						"pattern": "[^/]+",
						"type": "string",
						"required": true
					},
					{
						"schema": { "$ref": "#/definitions/EntityProperty" },
						"in": "body",
						"name": "body",
						"required": true
					}
				],
				"tags": [ "ResourceGroups" ],
				"consumes": [ "application/json" ]
			},
			"get": {
				"summary": "get ResourceGroup property by name",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getDeviceGroupPropertyByName",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/EntityProperty" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "gid",
						"pattern": "\\d+",
						"format": "int32",
						"description": "group ID",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "name",
						"pattern": "[^/]+",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "ResourceGroups" ]
			},
			"delete": {
				"summary": "delete ResourceGroup property",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "deleteDeviceGroupPropertyByName",
				"responses": {
					"200": {
						"schema": { "type": "object" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "gid",
						"pattern": "\\d+",
						"format": "int32",
						"description": "group ID",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "name",
						"pattern": "[^/]+",
						"type": "string",
						"required": true
					}
				],
				"tags": [ "ResourceGroups" ]
			},
			"put": {
				"summary": "update ResourceGroup property",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "updateDeviceGroupPropertyByName",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/EntityProperty" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "gid",
						"pattern": "\\d+",
						"format": "int32",
						"description": "group ID",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "name",
						"pattern": "[^/]+",
						"type": "string",
						"required": true
					},
					{
						"schema": { "$ref": "#/definitions/EntityProperty" },
						"in": "body",
						"name": "body",
						"required": true
					}
				],
				"tags": [ "ResourceGroups" ],
				"consumes": [ "application/json" ]
			}
		},
		"/debug/{id}": {
			"get": {
				"summary": "Get the result of a Collector debug command",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getDebugCommandResult",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/Debug" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": ".*",
						"type": "string",
						"required": true
					},
					{
						"default": -1.0,
						"in": "query",
						"name": "collectorId",
						"format": "int32",
						"type": "integer",
						"required": false
					}
				],
				"tags": [ "Debug" ]
			}
		},
		"/website/websites": {
			"post": {
				"summary": "add website",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "addWebsite",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/Website" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"schema": { "$ref": "#/definitions/Website" },
						"in": "body",
						"name": "body",
						"required": true
					}
				],
				"tags": [ "Websites" ],
				"consumes": [ "application/json" ]
			},
			"get": {
				"summary": "get website list",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getWebsiteList",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/WebsitePaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "query",
						"name": "collectorIds",
						"type": "string",
						"required": false
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Websites" ],
				"consumes": [ "application/json" ]
			}
		},
		"/sdt/sdts/{id}": {
			"patch": {
				"summary": "update SDT",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "patchSDTById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/SDT" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"type": "string",
						"required": true
					},
					{
						"schema": { "$ref": "#/definitions/SDT" },
						"in": "body",
						"name": "body",
						"required": true
					}
				],
				"tags": [ "SDTs" ],
				"consumes": [ "application/json" ]
			},
			"get": {
				"summary": "get SDT by id",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getSDTById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/SDT" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "SDTs" ]
			},
			"delete": {
				"summary": "delete SDT",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "deleteSDTById",
				"responses": {
					"200": {
						"schema": { "type": "object" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"type": "string",
						"required": true
					}
				],
				"tags": [ "SDTs" ]
			},
			"put": {
				"summary": "update SDT",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "updateSDTById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/SDT" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"type": "string",
						"required": true
					},
					{
						"schema": { "$ref": "#/definitions/SDT" },
						"in": "body",
						"name": "body",
						"required": true
					}
				],
				"tags": [ "SDTs" ],
				"consumes": [ "application/json" ]
			}
		},
		"/dashboard/groups": {
			"post": {
				"summary": "add dashboard group",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "addDashboardGroup",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/DashboardGroup" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"schema": { "$ref": "#/definitions/DashboardGroup" },
						"in": "body",
						"name": "body",
						"required": true
					}
				],
				"tags": [ "Dashboard Groups" ],
				"consumes": [ "application/json" ]
			},
			"get": {
				"summary": "get dashboard group list",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getDashboardGroupList",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/DashboardGroupPaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Dashboard Groups" ]
			}
		},
		"/setting/netscans/{id}": {
			"patch": {
				"summary": "update a netscan",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "patchNetscan",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/Netscan" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"schema": { "$ref": "#/definitions/Netscan" },
						"in": "body",
						"name": "body",
						"required": false
					},
					{
						"in": "query",
						"name": "reason",
						"type": "string",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					}
				],
				"tags": [ "Netscans" ],
				"consumes": [ "application/json" ]
			},
			"get": {
				"summary": "get netscan by id",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getNetscanById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/Netscan" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					}
				],
				"tags": [ "Netscans" ]
			},
			"delete": {
				"summary": "delete a netscan",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "deleteNetscanById",
				"responses": {
					"200": {
						"schema": { "type": "object" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					}
				],
				"tags": [ "Netscans" ]
			},
			"put": {
				"summary": "update a netscan",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "updateNetscan",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/Netscan" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"schema": { "$ref": "#/definitions/Netscan" },
						"in": "body",
						"name": "body",
						"required": false
					},
					{
						"in": "query",
						"name": "reason",
						"type": "string",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					}
				],
				"tags": [ "Netscans" ],
				"consumes": [ "application/json" ]
			}
		},
		"/setting/admins": {
			"post": {
				"summary": "add user",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "addAdmin",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/Admin" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"schema": { "$ref": "#/definitions/Admin" },
						"in": "body",
						"name": "body",
						"required": true
					}
				],
				"tags": [ "Users" ],
				"consumes": [ "application/json" ]
			},
			"get": {
				"summary": "get user list",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getAdminList",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/AdminPaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Users" ]
			}
		},
		"/setting/collector/collectors/{id}/ackdown": {
			"post": {
				"summary": "ack collector down alert",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "ackCollectorDownAlertById",
				"responses": {
					"200": {
						"schema": { "type": "object" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"schema": { "$ref": "#/definitions/AckCollectorDown" },
						"in": "body",
						"name": "body",
						"required": true
					}
				],
				"tags": [ "Collectors" ],
				"consumes": [ "application/json" ]
			}
		},
		"/dashboard/dashboards/{id}/widgets": {
			"get": {
				"summary": "get widget list by DashboardId",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getWidgetListByDashboardId",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/WidgetPaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Dashboards" ]
			}
		},
		"/device/devices/{id}/ports": {
			"get": {
				"summary": "get netflow port list",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getNetflowPortList",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/PortPaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "query",
						"name": "start",
						"format": "int64",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "end",
						"format": "int64",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "netflowFilter",
						"type": "string",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "query",
						"name": "ip",
						"type": "string",
						"required": false
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Devices" ]
			}
		},
		"/website/websites/{id}/sdts": {
			"get": {
				"summary": "get a list of SDTs for a website",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getWebsiteSDTListByWebsiteId",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/SDTPaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Websites" ]
			}
		},
		"/device/groups/{deviceGroupId}/datasources/{id}": {
			"patch": {
				"summary": "update ResourceGroup datasource",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "patchDeviceGroupDatasourceById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/DeviceGroupDataSource" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "deviceGroupId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"schema": { "$ref": "#/definitions/DeviceGroupDataSource" },
						"in": "body",
						"name": "body",
						"required": false
					}
				],
				"tags": [ "ResourceGroups" ],
				"consumes": [ "application/json" ]
			},
			"get": {
				"summary": "get ResourceGroup datasource",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getDeviceGroupDatasourceById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/DeviceGroupDataSource" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "deviceGroupId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "ResourceGroups" ]
			},
			"put": {
				"summary": "update ResourceGroup datasource",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "updateDeviceGroupDatasourceById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/DeviceGroupDataSource" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "deviceGroupId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"schema": { "$ref": "#/definitions/DeviceGroupDataSource" },
						"in": "body",
						"name": "body",
						"required": false
					}
				],
				"tags": [ "ResourceGroups" ],
				"consumes": [ "application/json" ]
			}
		},
		"/device/devices/{deviceId}/devicedatasources/{hdsId}/instances/{id}/data": {
			"get": {
				"summary": "get device instance data",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getDeviceDatasourceInstanceData",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/DeviceDataSourceInstanceData" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "deviceId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "hdsId",
						"pattern": "\\d+",
						"format": "int32",
						"description": "The device-datasource ID",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"default": 1.0,
						"in": "query",
						"name": "period",
						"format": "double",
						"type": "number",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "start",
						"format": "int64",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "end",
						"format": "int64",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "datapoints",
						"type": "string",
						"required": false
					},
					{
						"default": "json",
						"in": "query",
						"name": "format",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Data" ]
			}
		},
		"/device/groups/{id}/sdts": {
			"get": {
				"summary": "get ResourceGroup SDTs",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getDeviceGroupSDTList",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/SDTPaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "ResourceGroups" ]
			}
		},
		"/device/groups/{deviceGroupId}/clusterAlertConf/{id}": {
			"patch": {
				"summary": "Update cluster alert configuration",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "patchDeviceGroupClusterAlertConfById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/DeviceClusterAlertConfig" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "deviceGroupId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"schema": { "$ref": "#/definitions/DeviceClusterAlertConfig" },
						"in": "body",
						"name": "body",
						"required": true
					}
				],
				"tags": [ "Thresholds" ],
				"consumes": [ "application/json" ]
			},
			"get": {
				"summary": "Get cluster alert configuration by id",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getDeviceGroupClusterAlertConfById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/DeviceClusterAlertConfig" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "deviceGroupId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					}
				],
				"tags": [ "Thresholds" ]
			},
			"delete": {
				"summary": "Delete cluster alert configuration",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "deleteDeviceGroupClusterAlertConfById",
				"responses": {
					"200": {
						"schema": { "type": "object" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "deviceGroupId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					}
				],
				"tags": [ "Thresholds" ]
			},
			"put": {
				"summary": "Update cluster alert configuration",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "updateDeviceGroupClusterAlertConfById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/DeviceClusterAlertConfig" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "deviceGroupId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"schema": { "$ref": "#/definitions/DeviceClusterAlertConfig" },
						"in": "body",
						"name": "body",
						"required": true
					}
				],
				"tags": [ "Thresholds" ],
				"consumes": [ "application/json" ]
			}
		},
		"/device/groups/{id}/alerts": {
			"get": {
				"summary": "get ResourceGroup alerts",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getAlertListByDeviceGroupId",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/AlertPaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"default": false,
						"in": "query",
						"name": "needMessage",
						"type": "boolean",
						"required": false
					},
					{
						"in": "query",
						"name": "customColumns",
						"type": "string",
						"required": false
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "ResourceGroups" ]
			}
		},
		"/dashboard/widgets/{id}/data": {
			"get": {
				"summary": "get widget data",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getWidgetDataById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/WidgetData" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "query",
						"name": "start",
						"format": "int64",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "end",
						"format": "int64",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "format",
						"type": "string",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					}
				],
				"tags": [ "Data" ]
			}
		},
		"/website/websites/{id}/graphs/{graphName}/data": {
			"get": {
				"summary": "get website data by graph name",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getWebsiteDataByGraphName",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/GraphPlot" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "start",
						"format": "int64",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "end",
						"format": "int64",
						"type": "integer",
						"required": false
					},
					{
						"in": "path",
						"name": "graphName",
						"pattern": ".+",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "format",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Websites" ]
			}
		},
		"/report/groups/{id}": {
			"patch": {
				"summary": "update report group",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "patchReportGroupById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/ReportGroup" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"schema": { "$ref": "#/definitions/ReportGroup" },
						"in": "body",
						"name": "body",
						"required": true
					}
				],
				"tags": [ "Report Groups" ],
				"consumes": [ "application/json" ]
			},
			"get": {
				"summary": "get report group by id",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getReportGroupById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/ReportGroup" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					}
				],
				"tags": [ "Report Groups" ]
			},
			"delete": {
				"summary": "delete report group",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "deleteReportGroupById",
				"responses": {
					"200": {
						"schema": { "type": "object" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					}
				],
				"tags": [ "Report Groups" ]
			},
			"put": {
				"summary": "update report group",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "updateReportGroupById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/ReportGroup" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"schema": { "$ref": "#/definitions/ReportGroup" },
						"in": "body",
						"name": "body",
						"required": true
					}
				],
				"tags": [ "Report Groups" ],
				"consumes": [ "application/json" ]
			}
		},
		"/setting/roles": {
			"post": {
				"summary": "add role",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "addRole",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/Role" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"schema": { "$ref": "#/definitions/Role" },
						"in": "body",
						"name": "body",
						"required": true
					}
				],
				"tags": [ "Roles" ],
				"consumes": [ "application/json" ]
			},
			"get": {
				"summary": "get role list",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getRoleList",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/RolePaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Roles" ]
			}
		},
		"/setting/alert/rules": {
			"post": {
				"summary": "add alert rule",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "addAlertRule",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/AlertRule" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"schema": { "$ref": "#/definitions/AlertRule" },
						"in": "body",
						"name": "body",
						"required": true
					}
				],
				"tags": [ "Alert Rules" ],
				"consumes": [ "application/json" ]
			},
			"get": {
				"summary": "get alert rule list",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getAlertRuleList",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/AlertRulePaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Alert Rules" ]
			}
		},
		"/metrics/usage": {
			"get": {
				"summary": "get metrics usage",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getMetricsUsage",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/Usage" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [],
				"tags": [ "Metrics" ]
			}
		},
		"/website/smcheckpoints": {
			"get": {
				"summary": "get website checkpoint list",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getSiteMonitorCheckPointList",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/SiteMonitorCheckPointPaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Websites" ]
			}
		},
		"/device/devices/{id}/endpoints": {
			"get": {
				"summary": "get netflow endpoint list",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getNetflowEndpointList",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/EndpointPaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "query",
						"name": "start",
						"format": "int64",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "end",
						"format": "int64",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "netflowFilter",
						"type": "string",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "query",
						"name": "port",
						"type": "string",
						"required": false
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Devices" ]
			}
		},
		"/report/reports/{id}": {
			"patch": {
				"summary": "update report",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "patchReportById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/ReportBase" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"schema": { "$ref": "#/definitions/ReportBase" },
						"in": "body",
						"name": "body",
						"required": true
					}
				],
				"tags": [ "Report" ],
				"consumes": [ "application/json" ]
			},
			"get": {
				"summary": "get report by id",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getReportById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/ReportBase" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Report" ]
			},
			"delete": {
				"summary": "delete report",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "deleteReportById",
				"responses": {
					"200": {
						"schema": { "type": "object" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					}
				],
				"tags": [ "Report" ]
			},
			"put": {
				"summary": "update report",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "updateReportById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/ReportBase" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"schema": { "$ref": "#/definitions/ReportBase" },
						"in": "body",
						"name": "body",
						"required": true
					}
				],
				"tags": [ "Report" ],
				"consumes": [ "application/json" ]
			}
		},
		"/website/websites/{srvId}/checkpoints/{checkId}/data": {
			"get": {
				"summary": "get data for a website checkpoint",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getWebsiteCheckpointDataById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/WebsiteCheckpointRawData" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "srvId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "checkId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"default": 1.0,
						"in": "query",
						"name": "period",
						"format": "double",
						"type": "number",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "start",
						"format": "int64",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "end",
						"format": "int64",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "datapoints",
						"type": "string",
						"required": false
					},
					{
						"default": "json",
						"in": "query",
						"name": "format",
						"type": "string",
						"required": false
					},
					{
						"default": "none",
						"in": "query",
						"name": "aggregate",
						"description": "the aggregate option",
						"type": "string",
						"required": false,
						"enum": [ "first", "last", "min", "max", "sum", "average", "none" ]
					}
				],
				"tags": [ "Data" ]
			}
		},
		"/device/devices/{deviceId}/devicedatasources/{id}": {
			"get": {
				"summary": "get device datasource ",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getDeviceDatasourceById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/DeviceDataSource" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "deviceId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Devices" ]
			}
		},
		"/website/groups/{id}/sdts": {
			"get": {
				"summary": "get a list of SDTs for a website group",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getAllSDTListByWebsiteGroupId",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/SDTPaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Website Groups" ],
				"consumes": [ "application/json" ]
			}
		},
		"/report/reports/{id}/executions": {
			"post": {
				"summary": "run a report",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "generateReportById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/GenerateReportResult" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"schema": { "$ref": "#/definitions/GenerateReportRequest" },
						"in": "body",
						"name": "body",
						"required": false
					},
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					}
				],
				"tags": [ "Report" ],
				"consumes": [ "application/json" ]
			}
		},
		"/setting/datasources/importxml": {
			"post": {
				"summary": "import datasource via xml",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "importDataSource",
				"responses": {
					"200": {
						"schema": { "type": "object" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "formData",
						"name": "file",
						"type": "file",
						"required": true
					}
				],
				"tags": [ "Datasources" ],
				"consumes": [ "multipart/form-data" ]
			}
		},
		"/website/groups/{id}/websites": {
			"get": {
				"summary": "get a list of websites for a group",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getImmediateWebsiteListByWebsiteGroupId",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/WebsitePaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Website Groups" ],
				"consumes": [ "application/json" ]
			}
		},
		"/device/instances/datafetch": {
			"post": {
				"summary": "fetch device instances data",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "fetchDeviceInstancesData",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/DeviceInstanceDataPaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"schema": { "$ref": "#/definitions/DeviceInstances" },
						"in": "body",
						"name": "body",
						"required": true
					},
					{
						"default": 1.0,
						"in": "query",
						"name": "period",
						"format": "double",
						"type": "number",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "start",
						"format": "int64",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "end",
						"format": "int64",
						"type": "integer",
						"required": false
					},
					{
						"default": "none",
						"in": "query",
						"name": "aggregate",
						"description": "the aggregate option",
						"type": "string",
						"required": false,
						"enum": [ "first", "last", "min", "max", "sum", "average", "none" ]
					}
				],
				"tags": [ "Data" ],
				"consumes": [ "application/json" ]
			}
		},
		"/setting/opsnotes/{id}": {
			"patch": {
				"summary": "update opsnote",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "patchOpsNoteById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/OpsNote" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "[^/]+",
						"type": "string",
						"required": true
					},
					{
						"schema": { "$ref": "#/definitions/OpsNote" },
						"in": "body",
						"name": "body",
						"required": true
					}
				],
				"tags": [ "Ops Notes" ],
				"consumes": [ "application/json" ]
			},
			"get": {
				"summary": "get opsnote by id",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getOpsNoteById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/OpsNote" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "[^/]+",
						"type": "string",
						"required": true
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Ops Notes" ]
			},
			"delete": {
				"summary": "delete opsnote",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "deleteOpsNoteById",
				"responses": {
					"200": {
						"schema": { "type": "object" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "[^/]+",
						"type": "string",
						"required": true
					}
				],
				"tags": [ "Ops Notes" ]
			},
			"put": {
				"summary": "update opsnote",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "updateOpsNoteById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/OpsNote" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "[^/]+",
						"type": "string",
						"required": true
					},
					{
						"schema": { "$ref": "#/definitions/OpsNote" },
						"in": "body",
						"name": "body",
						"required": true
					}
				],
				"tags": [ "Ops Notes" ],
				"consumes": [ "application/json" ]
			}
		},
		"/website/groups/{id}/historysdts": {
			"get": {
				"summary": "get SDT history for the website group",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getSDTHistoryByWebsiteGroupId",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/WebsiteGroupSDTHistoryPaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Website Groups" ],
				"consumes": [ "application/json" ]
			}
		},
		"/dashboard/dashboards/{id}": {
			"patch": {
				"summary": "update dashboard",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "The template field works only for the POST API",
				"operationId": "patchDashboardById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/Dashboard" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"schema": { "$ref": "#/definitions/Dashboard" },
						"in": "body",
						"name": "body",
						"required": true
					},
					{
						"default": false,
						"in": "query",
						"name": "overwriteGroupFields",
						"type": "boolean",
						"required": false
					}
				],
				"tags": [ "Dashboards" ],
				"consumes": [ "application/json" ]
			},
			"get": {
				"summary": "get dashboard",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getDashboardById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/Dashboard" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"default": false,
						"in": "query",
						"name": "template",
						"type": "boolean",
						"required": false
					},
					{
						"default": "json",
						"in": "query",
						"name": "format",
						"type": "string",
						"required": false
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Dashboards" ]
			},
			"delete": {
				"summary": "delete dashboard",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "deleteDashboardById",
				"responses": {
					"200": {
						"schema": { "type": "object" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					}
				],
				"tags": [ "Dashboards" ]
			},
			"put": {
				"summary": "update dashboard",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "The template field works only for the POST API",
				"operationId": "updateDashboardById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/Dashboard" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"schema": { "$ref": "#/definitions/Dashboard" },
						"in": "body",
						"name": "body",
						"required": true
					},
					{
						"default": false,
						"in": "query",
						"name": "overwriteGroupFields",
						"type": "boolean",
						"required": false
					}
				],
				"tags": [ "Dashboards" ],
				"consumes": [ "application/json" ]
			}
		},
		"/device/devices/{deviceId}/devicedatasources/{id}/historysdts": {
			"get": {
				"summary": "get SDT history for the device dataSource",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getSDTHistoryByDeviceDataSourceId",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/DeviceDataSourceSDTHistoryPaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "deviceId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Devices" ]
			}
		},
		"/device/devices/{deviceId}/properties": {
			"post": {
				"summary": "add device property",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "addDeviceProperty",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/EntityProperty" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "deviceId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"schema": { "$ref": "#/definitions/EntityProperty" },
						"in": "body",
						"name": "body",
						"required": true
					}
				],
				"tags": [ "Devices" ],
				"consumes": [ "application/json" ]
			},
			"get": {
				"summary": "get device properties",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getDevicePropertyList",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/PropertyPaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "deviceId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Devices" ]
			}
		},
		"/setting/datasources/{id}/updatereasons": {
			"get": {
				"summary": "get update history for a datasource",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getUpdateReasonListByDataSourceId",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/DataSourceUpdateReasonsPaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Datasources" ]
			}
		},
		"/website/groups": {
			"post": {
				"summary": "add website group",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "addWebsiteGroup",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/WebsiteGroup" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"schema": { "$ref": "#/definitions/WebsiteGroup" },
						"in": "body",
						"name": "body",
						"required": true
					}
				],
				"tags": [ "Website Groups" ],
				"consumes": [ "application/json" ]
			},
			"get": {
				"summary": "get website group list",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getWebsiteGroupList",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/WebsiteGroupPaginationResponse" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					},
					{
						"default": 50.0,
						"in": "query",
						"name": "size",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"default": 0.0,
						"in": "query",
						"name": "offset",
						"format": "int32",
						"type": "integer",
						"required": false
					},
					{
						"in": "query",
						"name": "filter",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Website Groups" ],
				"consumes": [ "application/json" ]
			}
		},
		"/device/devices/{deviceId}/devicedatasources/{hdsId}/instances/{id}": {
			"patch": {
				"summary": "update device instance",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "patchDeviceDatasourceInstanceById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/DeviceDataSourceInstance" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "deviceId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "hdsId",
						"pattern": "\\d+",
						"format": "int32",
						"description": "The device-datasource ID",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"schema": { "$ref": "#/definitions/DeviceDataSourceInstance" },
						"in": "body",
						"name": "body",
						"required": true
					},
					{
						"default": "refresh",
						"in": "query",
						"name": "opType",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Datasource Instances" ],
				"consumes": [ "application/json" ]
			},
			"get": {
				"summary": "get device instance ",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getDeviceDatasourceInstanceById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/DeviceDataSourceInstance" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "deviceId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "hdsId",
						"pattern": "\\d+",
						"format": "int32",
						"description": "The device-datasource ID",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Datasource Instances" ]
			},
			"delete": {
				"summary": "delete a device instance",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "deleteDeviceDatasourceInstanceById",
				"responses": {
					"200": {
						"schema": { "type": "object" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "deviceId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "hdsId",
						"pattern": "\\d+",
						"format": "int32",
						"description": "The device-datasource ID",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					}
				],
				"tags": [ "Datasource Instances" ]
			},
			"put": {
				"summary": "update device instance",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "updateDeviceDatasourceInstanceById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/DeviceDataSourceInstance" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "deviceId",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "hdsId",
						"pattern": "\\d+",
						"format": "int32",
						"description": "The device-datasource ID",
						"type": "integer",
						"required": true
					},
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"schema": { "$ref": "#/definitions/DeviceDataSourceInstance" },
						"in": "body",
						"name": "body",
						"required": true
					},
					{
						"default": "refresh",
						"in": "query",
						"name": "opType",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Datasource Instances" ],
				"consumes": [ "application/json" ]
			}
		},
		"/setting/collector/groups/{id}": {
			"patch": {
				"summary": "update collector group",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "patchCollectorGroupById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/CollectorGroup" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"schema": { "$ref": "#/definitions/CollectorGroup" },
						"in": "body",
						"name": "body",
						"required": true
					},
					{
						"default": false,
						"in": "query",
						"name": "forceUpdateFailedOverDevices",
						"type": "boolean",
						"required": false
					}
				],
				"tags": [ "Collector Groups" ],
				"consumes": [ "application/json" ]
			},
			"get": {
				"summary": "get collector group",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "getCollectorGroupById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/CollectorGroup" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"in": "query",
						"name": "fields",
						"type": "string",
						"required": false
					}
				],
				"tags": [ "Collector Groups" ]
			},
			"delete": {
				"summary": "delete collector group",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "deleteCollectorGroupById",
				"responses": {
					"200": {
						"schema": { "type": "object" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					}
				],
				"tags": [ "Collector Groups" ]
			},
			"put": {
				"summary": "update collector group",
				"security": [ { "LMv1": [] } ],
				"produces": [ "application/json" ],
				"description": "",
				"operationId": "updateCollectorGroupById",
				"responses": {
					"200": {
						"schema": { "$ref": "#/definitions/CollectorGroup" },
						"description": "successful operation"
					},
					"default": {
						"schema": { "$ref": "#/definitions/ErrorResponse" },
						"description": "Error"
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"pattern": "\\d+",
						"format": "int32",
						"type": "integer",
						"required": true
					},
					{
						"schema": { "$ref": "#/definitions/CollectorGroup" },
						"in": "body",
						"name": "body",
						"required": true
					},
					{
						"default": false,
						"in": "query",
						"name": "forceUpdateFailedOverDevices",
						"type": "boolean",
						"required": false
					}
				],
				"tags": [ "Collector Groups" ],
				"consumes": [ "application/json" ]
			}
		}
	},
	"schemes": [ "https" ],
	"securityDefinitions": {
		"LMv1": {
			"in": "header",
			"name": "Authorization",
			"type": "apiKey"
		}
	},
	"swagger": "2.0",
	"tags": [
		{ "name": "Alert Rules" },
		{ "name": "Alerts" },
		{ "name": "API Tokens" },
		{ "name": "ApiPerfStats" },
		{ "name": "AppliesToFunctions" },
		{ "name": "Audit Logs" },
		{ "name": "BatchJobs" },
		{ "name": "Collector Groups" },
		{ "name": "Collectors" },
		{ "name": "CollectorVersions" },
		{ "name": "ConfigSources" },
		{ "name": "Dashboard Groups" },
		{ "name": "Dashboards" },
		{ "name": "Data" },
		{ "name": "Datasource Instances" },
		{ "name": "Datasources" },
		{ "name": "Debug" },
		{ "name": "ResourceGroups" },
		{ "name": "Devices" },
		{ "name": "DNSMappings" },
		{ "name": "Escalation Chains" },
		{ "name": "EventSources" },
		{ "name": "Metrics" },
		{ "name": "Netscans" },
		{ "name": "Ops Notes" },
		{ "name": "Recipient Groups" },
		{ "name": "Report" },
		{ "name": "Report Groups" },
		{ "name": "Roles" },
		{ "name": "SDTs" },
		{ "name": "Thresholds" },
		{ "name": "Users" },
		{ "name": "Website Groups" },
		{ "name": "Websites" },
		{ "name": "Widgets" }
	]
}
